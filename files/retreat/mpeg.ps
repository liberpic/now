%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 8 FMDOCUMENT
0 0 /Helvetica FMFONTDEFINE
1 0 /Helvetica-Bold FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 12 Q
0 X
0 0 0 1 0 0 0 K
(The Parallel MPEG-1 Encoder) 72 214.67 T
(June 8, 1995) 361.31 214.67 T
(Page 1 of 6) 658.62 214.67 T
0 0 0 1 0 0 0 K
72 252 720 720 18 RR
3 H
0 Z
N
0 0 0 1 0 0 0 K
0 36 Q
(The Parallel MPEG-1 Encoder) 153.92 601 T
0 0 0 1 0 0 0 K
1 24 Q
(Siddhartha Devadhar) 275.3 523 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Cedric Krumbein) 299.32 494 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Kim Man Liu) 324.66 465 T
0 0 0 1 0 0 0 K
0 F
(NOW Retreat) 323.99 407 T
(June 8, 1995) 326.62 378 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 12 Q
0 X
0 0 0 1 0 0 0 K
(The Parallel MPEG-1 Encoder) 72 214.67 T
(June 8, 1995) 361.31 214.67 T
(Page 2 of 6) 658.62 214.67 T
0 0 0 1 0 0 0 K
72 252 720 720 18 RR
3 H
0 Z
N
0 0 0 1 0 0 0 K
0 36 Q
(The MPEG-1 Format) 228.96 687 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(Frame) 86.99 408.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Encoding) 508.11 408.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Encoding) 616.11 408.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Type) 91.66 391.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Name) 178.94 391.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Dependence) 336.38 391.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Complexity) 502.27 391.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Efficiency) 614.93 391.67 T
0 0 0 1 0 0 0 K
0 F
(I) 106.05 357.67 T
(Intra) 183.99 357.67 T
(Independent) 339.08 357.67 T
(Easiest) 517.05 357.67 T
(Worst) 629.72 357.67 T
(P) 103.33 323.67 T
(Past Reference) 149.76 323.67 T
(Relative to most recent I-frame) 282.3 323.67 T
(Medium) 515.11 323.67 T
(Medium) 623.11 323.67 T
(B) 103.33 289.67 T
(Bidirectional) 159.88 289.67 T
(Relative to most recent) 306.42 289.67 T
(Hardest) 515.49 289.67 T
(Best) 633.99 289.67 T
(and next I- or P-frames) 306.42 272.67 T
81 261 711 711 C
280.12 468 511.88 675 C
0 0 0 1 0 0 0 K
298.12 591 298.12 531 334.12 561 334.12 621 4 Y
7 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
0 X
N
1 12 Q
(I) 307.12 576.96 T
316.12 591 316.12 531 352.12 561 352.12 621 4 Y
7 X
V
0 X
N
(B) 325.12 576.96 T
334.12 591 334.12 531 370.12 561 370.12 621 4 Y
7 X
V
0 X
N
(B) 343.12 576.96 T
352.12 591 352.12 531 388.12 561 388.12 621 4 Y
7 X
V
0 X
N
(B) 361.12 576.96 T
370.12 591 370.12 531 406.12 561 406.12 621 4 Y
7 X
V
0 X
N
(P) 379.12 576.96 T
388.12 591 388.12 531 424.12 561 424.12 621 4 Y
7 X
V
0 X
N
(B) 397.12 576.96 T
406.12 591 406.12 531 442.12 561 442.12 621 4 Y
7 X
V
0 X
N
(B) 415.12 576.96 T
424.12 591 424.12 531 460.12 561 460.12 621 4 Y
7 X
V
0 X
N
(B) 433.12 576.96 T
442.12 591 442.12 531 478.12 561 478.12 621 4 Y
7 X
V
0 X
N
(B) 451.12 576.96 T
460.12 591 460.12 531 496.12 561 496.12 621 4 Y
7 X
V
0 X
N
(P) 469.12 576.96 T
7 X
90 180 9 9 334.12 639 G
0 X
90 180 9 9 334.12 639 A
7 X
0 90 9 9 334.12 639 G
0 X
0 90 9 9 334.12 639 A
7 X
0 90 9 9 352.12 639 G
0 X
0 90 9 9 352.12 639 A
7 X
0 90 9 9 370.12 639 G
0 X
0 90 9 9 370.12 639 A
334.12 648 370.12 648 2 L
N
7 X
90 180 9 9 415.12 639 G
0 X
90 180 9 9 415.12 639 A
7 X
0 90 9 9 415.12 639 G
0 X
0 90 9 9 415.12 639 A
7 X
0 90 9 9 433.12 639 G
0 X
0 90 9 9 433.12 639 A
7 X
0 90 9 9 451.12 639 G
0 X
0 90 9 9 451.12 639 A
415.12 648 469.12 648 2 L
N
7 X
0 90 9 9 469.12 639 G
0 X
0 90 9 9 469.12 639 A
345.71 639 343.12 630 340.54 639 343.12 639 4 Y
V
343.12 639 343.12 639 2 L
N
363.71 639 361.12 630 358.54 639 361.12 639 4 Y
V
361.12 639 361.12 639 2 L
N
381.71 639 379.12 630 376.54 639 379.12 639 4 Y
V
379.12 639 379.12 639 2 L
N
426.71 639 424.12 630 421.54 639 424.12 639 4 Y
V
424.12 639 424.12 639 2 L
N
444.71 639 442.12 630 439.54 639 442.12 639 4 Y
V
442.12 639 442.12 639 2 L
N
462.71 639 460.12 630 457.54 639 460.12 639 4 Y
V
460.12 639 460.12 639 2 L
N
480.71 639 478.12 630 475.54 639 478.12 639 4 Y
V
478.12 639 478.12 639 2 L
N
406.12 639 406.12 630 2 L
N
325.12 639 325.12 630 2 L
N
7 X
0 90 9 9 388.12 648 G
0 X
0 90 9 9 388.12 648 A
7 X
90 180 9 9 388.12 648 G
0 X
90 180 9 9 388.12 648 A
7 X
90 180 9 9 370.12 648 G
0 X
90 180 9 9 370.12 648 A
7 X
90 180 9 9 352.12 648 G
0 X
90 180 9 9 352.12 648 A
388.12 657 352.12 657 2 L
N
7 X
0 90 9 9 487.12 648 G
0 X
0 90 9 9 487.12 648 A
7 X
90 180 9 9 487.12 648 G
0 X
90 180 9 9 487.12 648 A
7 X
90 180 9 9 469.12 648 G
0 X
90 180 9 9 469.12 648 A
7 X
90 180 9 9 451.12 648 G
0 X
90 180 9 9 451.12 648 A
487.12 657 433.12 657 2 L
N
7 X
90 180 9 9 433.12 648 G
0 X
90 180 9 9 433.12 648 A
379.12 648 379.12 630 2 L
N
361.12 648 361.12 630 2 L
N
343.12 648 343.12 630 2 L
N
478.12 648 478.12 630 2 L
N
460.12 648 460.12 630 2 L
N
442.12 648 442.12 630 2 L
N
424.12 648 424.12 630 2 L
N
496.12 648 496.12 630 2 L
N
397.12 648 397.12 630 2 L
N
(Group of Pictures) 349.77 479.63 T
7 X
180 270 9 9 307.12 513 G
0 X
180 270 9 9 307.12 513 A
307.12 504 361.12 504 2 L
N
7 X
270 360 9 9 361.12 513 G
0 X
270 360 9 9 361.12 513 A
7 X
180 270 9 9 379.12 513 G
0 X
180 270 9 9 379.12 513 A
379.12 504 451.12 504 2 L
N
7 X
270 360 9 9 451.12 513 G
0 X
270 360 9 9 451.12 513 A
367.54 513 370.12 522 372.71 513 370.12 513 4 Y
V
370.12 513 370.12 513 2 L
N
457.54 513 460.12 522 462.71 513 460.12 513 4 Y
V
460.12 513 460.12 513 2 L
N
298.12 513 298.12 522 2 L
N
0 0 0 1 0 0 0 K
81 261 711 711 C
0 -208 1000 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 12 Q
0 X
0 0 0 1 0 0 0 K
(The Parallel MPEG-1 Encoder) 72 214.67 T
(June 8, 1995) 361.31 214.67 T
(Page 3 of 6) 658.62 214.67 T
0 0 0 1 0 0 0 K
72 252 720 720 18 RR
3 H
0 Z
N
0 0 0 1 0 0 0 K
0 36 Q
(MPEG-1 Encoding) 246.94 687 T
0 0 0 1 0 0 0 K
1 24 Q
(MPEG is an \322embarrassingly parallel\323 application!) 81 652 T
0 0 0 1 0 0 0 K
0 F
(\245) 81 623 T
(100\325s--1000\325s of input frames) 99 623 T
(\245) 81 594 T
(Each frame is encoded separately) 99 594 T
(\245) 81 565 T
(Frames are grouped into \322Groups of Pictures\323 \050GOPs\051) 99 565 T
81 261 711 711 C
81 269 711 557 C
0 0 0 1 0 0 0 K
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
90 450 36 9 216 443 A
180 270 36 9 216 389 A
180 443 180 389 2 L
N
270 360 36 9 216 389 A
252 443 252 389 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 36 9 576 443 A
180 270 36 9 576 389 A
540 443 540 389 2 L
N
270 360 36 9 576 389 A
612 443 612 389 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
349.51 518.18 360 524 354.18 513.51 351.84 515.84 4 Y
V
252 416 351.84 515.84 2 L
N
348.01 451.49 360 452 350.1 445.21 349.06 448.35 4 Y
V
252 416 349.06 448.35 2 L
N
0 0 0 1 0 0 0 K
0 12 Q
(Input frames 0-4) 0 -315 279 455.07 TF
0 0 0 1 0 0 0 K
354.18 319.86 360 309.36 349.51 315.18 351.84 317.52 4 Y
V
252 417.36 351.84 317.52 2 L
N
0 0 0 1 0 0 0 K
(Input frames 15-19) 0 -45 273.95 373.25 TF
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Input frames 5-9) 0 -342 272.7 426.86 TF
0 0 0 1 0 0 0 K
350.1 386.79 360 380 348.01 380.51 349.06 383.65 4 Y
V
252 416 349.06 383.65 2 L
N
0 0 0 1 0 0 0 K
(Input frames 10-14) 0 -18 270.81 399.32 TF
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
534.18 426.49 540 416 529.51 421.82 531.84 424.16 4 Y
V
531.84 424.16 432 524 2 L
N
530.1 422.79 540 416 528.01 416.51 529.06 419.65 4 Y
V
529.06 419.65 432 452 2 L
N
0 0 0 1 0 0 0 K
(Output frames 0-4) 0 -45 444.62 523.45 TF
0 0 0 1 0 0 0 K
529.51 411.54 540 417.36 534.18 406.86 531.84 409.2 4 Y
V
531.84 409.2 432 309.36 2 L
N
0 0 0 1 0 0 0 K
(Output frames 15-19) 0 -315 440.23 295.43 TF
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Output frames 5-9) 0 -18 427.32 456.74 TF
0 0 0 1 0 0 0 K
528.01 415.49 540 416 530.1 409.21 529.06 412.35 4 Y
V
529.06 412.35 432 380 2 L
N
0 0 0 1 0 0 0 K
(Output frames 10-14) 0 -342 416.52 365.32 TF
0 0 0 1 0 0 0 K
369 497 441 533 R
V
N
369 425 441 461 R
V
N
369 353 441 389 R
V
N
369 281 441 317 R
V
N
360 506 432 542 R
7 X
V
0 X
N
0 0 0 1 0 0 0 K
(Proc. 0) 369 518.94 T
0 0 0 1 0 0 0 K
360 434 432 470 R
7 X
V
0 X
N
360 362 432 398 R
7 X
V
0 X
N
360 290 432 326 R
7 X
V
0 X
N
0 0 0 1 0 0 0 K
(Proc. 1) 369 446.94 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Proc. 2) 369 374.94 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Proc. 3) 369 302.94 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 261 711 711 C
0 180 792 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 12 Q
0 X
0 0 0 1 0 0 0 K
(The Parallel MPEG-1 Encoder) 72 214.67 T
(June 8, 1995) 361.31 214.67 T
(Page 4 of 6) 658.62 214.67 T
0 0 0 1 0 0 0 K
72 252 720 720 18 RR
3 H
0 Z
N
0 0 0 1 0 0 0 K
0 36 Q
(The Purdue MPEG-1 Encoder) 155.9 687 T
0 24 Q
(Scales linearly up to ~16 processors, then levels off at ~9) 81 652 T
(FPS) 81 623 T
81 261 711 711 C
225.92 310.98 566.08 615 C
0 0 0 1 0 0 0 K
269.48 340.04 554.36 340.04 2 L
1 H
2 Z
5 X
0 0 0 1 0 0 0 K
N
269.48 340.04 269.48 586.93 2 L
N
269.48 340.04 271.35 340.04 2 L
0 X
N
554.36 340.04 552.49 340.04 2 L
N
0 0 0 1 0 0 0 K
2 12 Q
(0) 259.03 338.22 T
0 0 0 1 0 0 0 K
269.48 389.42 271.35 389.42 2 L
N
554.36 389.42 552.49 389.42 2 L
N
0 0 0 1 0 0 0 K
(2) 259.03 387.6 T
0 0 0 1 0 0 0 K
269.48 438.8 271.35 438.8 2 L
N
554.36 438.8 552.49 438.8 2 L
N
0 0 0 1 0 0 0 K
(4) 259.03 436.98 T
0 0 0 1 0 0 0 K
269.48 488.17 271.35 488.17 2 L
N
554.36 488.17 552.49 488.17 2 L
N
0 0 0 1 0 0 0 K
(6) 259.03 486.36 T
0 0 0 1 0 0 0 K
269.48 537.55 271.35 537.55 2 L
N
554.36 537.55 552.49 537.55 2 L
N
0 0 0 1 0 0 0 K
(8) 259.03 535.74 T
0 0 0 1 0 0 0 K
269.48 586.93 271.35 586.93 2 L
N
554.36 586.93 552.49 586.93 2 L
N
0 0 0 1 0 0 0 K
(10) 253.03 585.12 T
0 0 0 1 0 0 0 K
269.48 340.04 269.48 341.91 2 L
N
269.48 586.93 269.48 585.06 2 L
N
0 0 0 1 0 0 0 K
(0) 266.48 329.09 T
0 0 0 1 0 0 0 K
295.39 340.04 295.39 341.91 2 L
N
295.39 586.93 295.39 585.06 2 L
N
0 0 0 1 0 0 0 K
(5) 292.39 329.09 T
0 0 0 1 0 0 0 K
321.27 340.04 321.27 341.91 2 L
N
321.27 586.93 321.27 585.06 2 L
N
0 0 0 1 0 0 0 K
(10) 315.27 329.09 T
0 0 0 1 0 0 0 K
347.18 340.04 347.18 341.91 2 L
N
347.18 586.93 347.18 585.06 2 L
N
0 0 0 1 0 0 0 K
(15) 341.18 329.09 T
0 0 0 1 0 0 0 K
373.09 340.04 373.09 341.91 2 L
N
373.09 586.93 373.09 585.06 2 L
N
0 0 0 1 0 0 0 K
(20) 367.09 329.09 T
0 0 0 1 0 0 0 K
398.97 340.04 398.97 341.91 2 L
N
398.97 586.93 398.97 585.06 2 L
N
0 0 0 1 0 0 0 K
(25) 392.97 329.09 T
0 0 0 1 0 0 0 K
424.88 340.04 424.88 341.91 2 L
N
424.88 586.93 424.88 585.06 2 L
N
0 0 0 1 0 0 0 K
(30) 418.88 329.09 T
0 0 0 1 0 0 0 K
450.76 340.04 450.76 341.91 2 L
N
450.76 586.93 450.76 585.06 2 L
N
0 0 0 1 0 0 0 K
(35) 444.76 329.09 T
0 0 0 1 0 0 0 K
476.67 340.04 476.67 341.91 2 L
N
476.67 586.93 476.67 585.06 2 L
N
0 0 0 1 0 0 0 K
(40) 470.67 329.09 T
0 0 0 1 0 0 0 K
502.57 340.04 502.57 341.91 2 L
N
502.57 586.93 502.57 585.06 2 L
N
0 0 0 1 0 0 0 K
(45) 496.57 329.09 T
0 0 0 1 0 0 0 K
528.46 340.04 528.46 341.91 2 L
N
528.46 586.93 528.46 585.06 2 L
N
0 0 0 1 0 0 0 K
(50) 522.46 329.09 T
0 0 0 1 0 0 0 K
554.36 340.04 554.36 341.91 2 L
N
554.36 586.93 554.36 585.06 2 L
N
0 0 0 1 0 0 0 K
(55) 548.36 329.09 T
0 0 0 1 0 0 0 K
269.48 340.04 554.36 340.04 554.36 586.93 269.48 586.93 269.48 340.04 5 L
N
0 0 0 1 0 0 0 K
(FPS) 0 -270 234.1 451.66 TF
(Num Procs) 385.09 319.97 T
(Paragon MPEG Encoder: FPS) 339.42 594.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(FPS) 510.23 574.12 T
0 0 0 1 0 0 0 K
534.69 575.93 548.04 575.93 2 L
0.5 H
N
290.2 409.43 290.2 409.43 310.92 467.93 331.64 509.89 352.37 535.57 373.09 547.93 393.78 546.94
 414.5 551.39 435.22 546.68 455.95 546.46 476.67 536.31 497.39 547.93 518.11 553.12 538.83 560.77 14 L
N
538.21 575.93 539.14 575 540.08 575.93 539.14 576.87 538.21 575.93 5 L
N
539.14 575.93 539.14 575.93 2 L
N
289.27 409.43 290.2 408.49 291.14 409.43 290.2 410.36 289.27 409.43 5 L
N
290.2 409.43 290.2 409.43 2 L
N
309.99 467.93 310.92 467 311.86 467.93 310.92 468.87 309.99 467.93 5 L
N
310.92 467.93 310.92 467.93 2 L
N
330.71 509.89 331.64 508.95 332.58 509.89 331.64 510.82 330.71 509.89 5 L
N
331.64 509.89 331.64 509.89 2 L
N
351.43 535.57 352.37 534.63 353.3 535.57 352.37 536.51 351.43 535.57 5 L
N
352.37 535.57 352.37 535.57 2 L
N
372.15 547.93 373.09 546.99 374.02 547.93 373.09 548.86 372.15 547.93 5 L
N
373.09 547.93 373.09 547.93 2 L
N
392.85 546.94 393.78 546 394.72 546.94 393.78 547.87 392.85 546.94 5 L
N
393.78 546.94 393.78 546.94 2 L
N
413.57 551.39 414.5 550.45 415.44 551.39 414.5 552.32 413.57 551.39 5 L
N
414.5 551.39 414.5 551.39 2 L
N
434.29 546.68 435.22 545.75 436.16 546.68 435.22 547.62 434.29 546.68 5 L
N
435.22 546.68 435.22 546.68 2 L
N
455.01 546.46 455.95 545.52 456.88 546.46 455.95 547.39 455.01 546.46 5 L
N
455.95 546.46 455.95 546.46 2 L
N
475.73 536.31 476.67 535.37 477.6 536.31 476.67 537.24 475.73 536.31 5 L
N
476.67 536.31 476.67 536.31 2 L
N
496.45 547.93 497.39 546.99 498.32 547.93 497.39 548.86 496.45 547.93 5 L
N
497.39 547.93 497.39 547.93 2 L
N
517.17 553.12 518.11 552.18 519.04 553.12 518.11 554.05 517.17 553.12 5 L
N
518.11 553.12 518.11 553.12 2 L
N
537.89 560.77 538.83 559.83 539.77 560.77 538.83 561.71 537.89 560.77 5 L
N
538.83 560.77 538.83 560.77 2 L
N
0 0 0 1 0 0 0 K
81 261 711 711 C
0 180 792 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 12 Q
0 X
0 0 0 1 0 0 0 K
(The Parallel MPEG-1 Encoder) 72 214.67 T
(June 8, 1995) 361.31 214.67 T
(Page 5 of 6) 658.62 214.67 T
0 0 0 1 0 0 0 K
72 252 720 720 18 RR
3 H
0 Z
N
0 0 0 1 0 0 0 K
0 36 Q
(The Purdue MPEG-1 Encoder) 155.9 687 T
0 24 Q
(\245) 81 652 T
(Few procs:) 99 652 T
(encoding is computation-bound) 252 652 T
(\245) 81 623 T
(Many procs:) 99 623 T
(encoding is I/O-bound) 252 623 T
81 261 711 711 C
84.19 310.28 707.81 615 C
0 0 0 1 0 0 0 K
432.69 337.87 701.14 337.87 2 L
1 H
2 Z
5 X
0 0 0 1 0 0 0 K
N
432.69 337.87 432.69 584.76 2 L
N
432.69 337.87 434.45 337.87 2 L
0 X
N
701.14 337.87 699.38 337.87 2 L
N
0 0 0 1 0 0 0 K
0 12 Q
(0) 421.82 336.05 T
0 0 0 1 0 0 0 K
432.69 387.25 434.45 387.25 2 L
N
701.14 387.25 699.38 387.25 2 L
N
0 0 0 1 0 0 0 K
(20) 415.15 385.43 T
0 0 0 1 0 0 0 K
432.69 436.63 434.45 436.63 2 L
N
701.14 436.63 699.38 436.63 2 L
N
0 0 0 1 0 0 0 K
(40) 415.15 434.81 T
0 0 0 1 0 0 0 K
432.69 486.01 434.45 486.01 2 L
N
701.14 486.01 699.38 486.01 2 L
N
0 0 0 1 0 0 0 K
(60) 415.15 484.19 T
0 0 0 1 0 0 0 K
432.69 535.39 434.45 535.39 2 L
N
701.14 535.39 699.38 535.39 2 L
N
0 0 0 1 0 0 0 K
(80) 415.15 533.57 T
0 0 0 1 0 0 0 K
432.69 584.76 434.45 584.76 2 L
N
701.14 584.76 699.38 584.76 2 L
N
0 0 0 1 0 0 0 K
(100) 408.48 582.95 T
0 0 0 1 0 0 0 K
432.69 337.87 432.69 339.74 2 L
N
432.69 584.76 432.69 582.9 2 L
N
0 0 0 1 0 0 0 K
(0) 429.35 326.93 T
0 0 0 1 0 0 0 K
457.1 337.87 457.1 339.74 2 L
N
457.1 584.76 457.1 582.9 2 L
N
0 0 0 1 0 0 0 K
(5) 453.77 326.93 T
0 0 0 1 0 0 0 K
481.49 337.87 481.49 339.74 2 L
N
481.49 584.76 481.49 582.9 2 L
N
0 0 0 1 0 0 0 K
(10) 474.82 326.93 T
0 0 0 1 0 0 0 K
505.9 337.87 505.9 339.74 2 L
N
505.9 584.76 505.9 582.9 2 L
N
0 0 0 1 0 0 0 K
(15) 499.23 326.93 T
0 0 0 1 0 0 0 K
530.32 337.87 530.32 339.74 2 L
N
530.32 584.76 530.32 582.9 2 L
N
0 0 0 1 0 0 0 K
(20) 523.65 326.93 T
0 0 0 1 0 0 0 K
554.71 337.87 554.71 339.74 2 L
N
554.71 584.76 554.71 582.9 2 L
N
0 0 0 1 0 0 0 K
(25) 548.03 326.93 T
0 0 0 1 0 0 0 K
579.12 337.87 579.12 339.74 2 L
N
579.12 584.76 579.12 582.9 2 L
N
0 0 0 1 0 0 0 K
(30) 572.45 326.93 T
0 0 0 1 0 0 0 K
603.51 337.87 603.51 339.74 2 L
N
603.51 584.76 603.51 582.9 2 L
N
0 0 0 1 0 0 0 K
(35) 596.84 326.93 T
0 0 0 1 0 0 0 K
627.92 337.87 627.92 339.74 2 L
N
627.92 584.76 627.92 582.9 2 L
N
0 0 0 1 0 0 0 K
(40) 621.25 326.93 T
0 0 0 1 0 0 0 K
652.34 337.87 652.34 339.74 2 L
N
652.34 584.76 652.34 582.9 2 L
N
0 0 0 1 0 0 0 K
(45) 645.66 326.93 T
0 0 0 1 0 0 0 K
676.72 337.87 676.72 339.74 2 L
N
676.72 584.76 676.72 582.9 2 L
N
0 0 0 1 0 0 0 K
(50) 670.05 326.93 T
0 0 0 1 0 0 0 K
701.14 337.87 701.14 339.74 2 L
N
701.14 584.76 701.14 582.9 2 L
N
0 0 0 1 0 0 0 K
(55) 694.47 326.93 T
0 0 0 1 0 0 0 K
432.69 337.87 701.14 337.87 701.14 584.76 432.69 584.76 432.69 337.87 5 L
N
0 0 0 1 0 0 0 K
(Time \050secs\051) 0 -270 399.35 428.17 TF
(Num Procs) 537.24 317.8 T
(Paragon MPEG Encoder: Average I/O Times) 447.53 592.08 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Avg Read Time) 595.72 571.95 T
0 0 0 1 0 0 0 K
682.6 573.77 695.18 573.77 2 L
0.5 H
N
452.21 494.14 452.21 494.14 471.74 448.14 491.27 439.8 510.79 440.31 530.32 450.49 549.82 464.8
 569.34 464.43 588.87 471.66 608.4 483.94 627.92 501.37 647.45 486.83 666.97 484.22 686.5 471.98 14 L
N
685.91 573.77 686.79 572.83 687.68 573.77 686.79 574.7 685.91 573.77 5 L
N
686.79 573.77 686.79 573.77 2 L
N
451.33 494.14 452.21 493.21 453.1 494.14 452.21 495.08 451.33 494.14 5 L
N
452.21 494.14 452.21 494.14 2 L
N
470.86 448.14 471.74 447.2 472.62 448.14 471.74 449.07 470.86 448.14 5 L
N
471.74 448.14 471.74 448.14 2 L
N
490.39 439.8 491.27 438.87 492.15 439.8 491.27 440.74 490.39 439.8 5 L
N
491.27 439.8 491.27 439.8 2 L
N
509.91 440.31 510.79 439.38 511.67 440.31 510.79 441.25 509.91 440.31 5 L
N
510.79 440.31 510.79 440.31 2 L
N
529.44 450.49 530.32 449.55 531.2 450.49 530.32 451.42 529.44 450.49 5 L
N
530.32 450.49 530.32 450.49 2 L
N
548.94 464.8 549.82 463.87 550.7 464.8 549.82 465.74 548.94 464.8 5 L
N
549.82 464.8 549.82 464.8 2 L
N
568.46 464.43 569.34 463.5 570.23 464.43 569.34 465.37 568.46 464.43 5 L
N
569.34 464.43 569.34 464.43 2 L
N
587.99 471.66 588.87 470.73 589.75 471.66 588.87 472.6 587.99 471.66 5 L
N
588.87 471.66 588.87 471.66 2 L
N
607.52 483.94 608.4 483 609.28 483.94 608.4 484.87 607.52 483.94 5 L
N
608.4 483.94 608.4 483.94 2 L
N
627.04 501.37 627.92 500.43 628.8 501.37 627.92 502.31 627.04 501.37 5 L
N
627.92 501.37 627.92 501.37 2 L
N
646.57 486.83 647.45 485.89 648.33 486.83 647.45 487.76 646.57 486.83 5 L
N
647.45 486.83 647.45 486.83 2 L
N
666.09 484.22 666.97 483.29 667.86 484.22 666.97 485.16 666.09 484.22 5 L
N
666.97 484.22 666.97 484.22 2 L
N
685.62 471.98 686.5 471.04 687.38 471.98 686.5 472.91 685.62 471.98 5 L
N
686.5 471.98 686.5 471.98 2 L
N
0 0 0 1 0 0 0 K
(Avg Write Time) 596.4 562.82 T
0 0 0 1 0 0 0 K
682.6 564.64 695.18 564.64 2 L
1 X
N
452.21 436.85 452.21 436.85 471.74 411.48 491.27 420.75 510.79 432.32 530.32 454.6 549.82 480.17
 569.34 499.56 588.87 522.35 608.4 523.99 627.92 544.85 647.45 541.74 666.97 536.97 686.5 541.11 14 L
N
685.91 564.64 685.91 564.64 687.68 564.64 3 L
0 X
N
686.79 563.7 686.79 563.7 686.79 565.57 3 L
N
451.33 436.85 451.33 436.85 453.1 436.85 3 L
N
452.21 435.92 452.21 435.92 452.21 437.79 3 L
N
470.86 411.48 470.86 411.48 472.62 411.48 3 L
N
471.74 410.55 471.74 410.55 471.74 412.42 3 L
N
490.39 420.75 490.39 420.75 492.15 420.75 3 L
N
491.27 419.82 491.27 419.82 491.27 421.69 3 L
N
509.91 432.32 509.91 432.32 511.67 432.32 3 L
N
510.79 431.38 510.79 431.38 510.79 433.25 3 L
N
529.44 454.6 529.44 454.6 531.2 454.6 3 L
N
530.32 453.66 530.32 453.66 530.32 455.53 3 L
N
548.94 480.17 548.94 480.17 550.7 480.17 3 L
N
549.82 479.23 549.82 479.23 549.82 481.1 3 L
N
568.46 499.56 568.46 499.56 570.23 499.56 3 L
N
569.34 498.62 569.34 498.62 569.34 500.49 3 L
N
587.99 522.35 587.99 522.35 589.75 522.35 3 L
N
588.87 521.41 588.87 521.41 588.87 523.28 3 L
N
607.52 523.99 607.52 523.99 609.28 523.99 3 L
N
608.4 523.05 608.4 523.05 608.4 524.93 3 L
N
627.04 544.85 627.04 544.85 628.8 544.85 3 L
N
627.92 543.92 627.92 543.92 627.92 545.79 3 L
N
646.57 541.74 646.57 541.74 648.33 541.74 3 L
N
647.45 540.8 647.45 540.8 647.45 542.67 3 L
N
666.09 536.97 666.09 536.97 667.86 536.97 3 L
N
666.97 536.04 666.97 536.04 666.97 537.91 3 L
N
685.62 541.11 685.62 541.11 687.38 541.11 3 L
N
686.5 540.18 686.5 540.18 686.5 542.05 3 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
124.76 337.87 381 337.87 2 L
1 H
5 X
N
124.76 337.87 124.76 584.76 2 L
N
124.76 337.87 126.44 337.87 2 L
0 X
N
381 337.87 379.32 337.87 2 L
N
0 0 0 1 0 0 0 K
(0) 114.08 336.05 T
0 0 0 1 0 0 0 K
124.76 373.13 126.44 373.13 2 L
N
381 373.13 379.32 373.13 2 L
N
0 0 0 1 0 0 0 K
(100) 100.74 371.32 T
0 0 0 1 0 0 0 K
124.76 408.42 126.44 408.42 2 L
N
381 408.42 379.32 408.42 2 L
N
0 0 0 1 0 0 0 K
(200) 100.74 406.61 T
0 0 0 1 0 0 0 K
124.76 443.68 126.44 443.68 2 L
N
381 443.68 379.32 443.68 2 L
N
0 0 0 1 0 0 0 K
(300) 100.74 441.87 T
0 0 0 1 0 0 0 K
124.76 478.95 126.44 478.95 2 L
N
381 478.95 379.32 478.95 2 L
N
0 0 0 1 0 0 0 K
(400) 100.74 477.13 T
0 0 0 1 0 0 0 K
124.76 514.21 126.44 514.21 2 L
N
381 514.21 379.32 514.21 2 L
N
0 0 0 1 0 0 0 K
(500) 100.74 512.4 T
0 0 0 1 0 0 0 K
124.76 549.5 126.44 549.5 2 L
N
381 549.5 379.32 549.5 2 L
N
0 0 0 1 0 0 0 K
(600) 100.74 547.69 T
0 0 0 1 0 0 0 K
124.76 584.76 126.44 584.76 2 L
N
381 584.76 379.32 584.76 2 L
N
0 0 0 1 0 0 0 K
(700) 100.74 582.95 T
0 0 0 1 0 0 0 K
124.76 337.87 124.76 339.74 2 L
N
124.76 584.76 124.76 582.9 2 L
N
0 0 0 1 0 0 0 K
(0) 121.42 326.93 T
0 0 0 1 0 0 0 K
148.06 337.87 148.06 339.74 2 L
N
148.06 584.76 148.06 582.9 2 L
N
0 0 0 1 0 0 0 K
(5) 144.73 326.93 T
0 0 0 1 0 0 0 K
171.34 337.87 171.34 339.74 2 L
N
171.34 584.76 171.34 582.9 2 L
N
0 0 0 1 0 0 0 K
(10) 164.67 326.93 T
0 0 0 1 0 0 0 K
194.64 337.87 194.64 339.74 2 L
N
194.64 584.76 194.64 582.9 2 L
N
0 0 0 1 0 0 0 K
(15) 187.97 326.93 T
0 0 0 1 0 0 0 K
217.95 337.87 217.95 339.74 2 L
N
217.95 584.76 217.95 582.9 2 L
N
0 0 0 1 0 0 0 K
(20) 211.28 326.93 T
0 0 0 1 0 0 0 K
241.23 337.87 241.23 339.74 2 L
N
241.23 584.76 241.23 582.9 2 L
N
0 0 0 1 0 0 0 K
(25) 234.55 326.93 T
0 0 0 1 0 0 0 K
264.53 337.87 264.53 339.74 2 L
N
264.53 584.76 264.53 582.9 2 L
N
0 0 0 1 0 0 0 K
(30) 257.86 326.93 T
0 0 0 1 0 0 0 K
287.81 337.87 287.81 339.74 2 L
N
287.81 584.76 287.81 582.9 2 L
N
0 0 0 1 0 0 0 K
(35) 281.14 326.93 T
0 0 0 1 0 0 0 K
311.11 337.87 311.11 339.74 2 L
N
311.11 584.76 311.11 582.9 2 L
N
0 0 0 1 0 0 0 K
(40) 304.44 326.93 T
0 0 0 1 0 0 0 K
334.42 337.87 334.42 339.74 2 L
N
334.42 584.76 334.42 582.9 2 L
N
0 0 0 1 0 0 0 K
(45) 327.75 326.93 T
0 0 0 1 0 0 0 K
357.7 337.87 357.7 339.74 2 L
N
357.7 584.76 357.7 582.9 2 L
N
0 0 0 1 0 0 0 K
(50) 351.02 326.93 T
0 0 0 1 0 0 0 K
381 337.87 381 339.74 2 L
N
381 584.76 381 582.9 2 L
N
0 0 0 1 0 0 0 K
(55) 374.33 326.93 T
0 0 0 1 0 0 0 K
124.76 337.87 381 337.87 381 584.76 124.76 584.76 124.76 337.87 5 L
N
0 0 0 1 0 0 0 K
(Time \050secs\051) 0 -270 92.94 428.17 TF
(Num Procs) 223.21 317.8 T
(Paragon MPEG Encoder: Average Execution Times) 115.15 592.08 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Avg Encoding Time) 255.26 571.95 T
0 0 0 1 0 0 0 K
363.31 573.77 375.32 573.77 2 L
0.5 H
N
143.4 521.61 143.4 521.61 162.03 430.16 180.67 400.23 199.31 385.49 217.95 376.99 236.56 371.6
 255.2 367.69 273.84 364.57 292.48 362.39 311.11 359.7 329.75 358.5 348.39 357.03 367.03 355.64 14 L
N
366.47 573.77 367.31 572.83 368.15 573.77 367.31 574.7 366.47 573.77 5 L
N
367.31 573.77 367.31 573.77 2 L
N
142.55 521.61 143.4 520.67 144.24 521.61 143.4 522.55 142.55 521.61 5 L
N
143.4 521.61 143.4 521.61 2 L
N
161.19 430.16 162.03 429.23 162.88 430.16 162.03 431.1 161.19 430.16 5 L
N
162.03 430.16 162.03 430.16 2 L
N
179.83 400.23 180.67 399.3 181.51 400.23 180.67 401.17 179.83 400.23 5 L
N
180.67 400.23 180.67 400.23 2 L
N
198.47 385.49 199.31 384.55 200.15 385.49 199.31 386.42 198.47 385.49 5 L
N
199.31 385.49 199.31 385.49 2 L
N
217.11 376.99 217.95 376.05 218.79 376.99 217.95 377.92 217.11 376.99 5 L
N
217.95 376.99 217.95 376.99 2 L
N
235.72 371.6 236.56 370.67 237.4 371.6 236.56 372.54 235.72 371.6 5 L
N
236.56 371.6 236.56 371.6 2 L
N
254.36 367.69 255.2 366.75 256.04 367.69 255.2 368.62 254.36 367.69 5 L
N
255.2 367.69 255.2 367.69 2 L
N
273 364.57 273.84 363.64 274.68 364.57 273.84 365.51 273 364.57 5 L
N
273.84 364.57 273.84 364.57 2 L
N
291.64 362.39 292.48 361.45 293.32 362.39 292.48 363.32 291.64 362.39 5 L
N
292.48 362.39 292.48 362.39 2 L
N
310.27 359.7 311.11 358.76 311.96 359.7 311.11 360.63 310.27 359.7 5 L
N
311.11 359.7 311.11 359.7 2 L
N
328.91 358.5 329.75 357.57 330.59 358.5 329.75 359.44 328.91 358.5 5 L
N
329.75 358.5 329.75 358.5 2 L
N
347.55 357.03 348.39 356.1 349.23 357.03 348.39 357.97 347.55 357.03 5 L
N
348.39 357.03 348.39 357.03 2 L
N
366.19 355.64 367.03 354.71 367.87 355.64 367.03 356.58 366.19 355.64 5 L
N
367.03 355.64 367.03 355.64 2 L
N
0 0 0 1 0 0 0 K
(Avg Execution Time) 252.6 562.82 T
0 0 0 1 0 0 0 K
363.31 564.64 375.32 564.64 2 L
1 X
N
143.4 558.06 143.4 558.06 162.03 456.44 180.67 426.62 199.31 413.61 217.95 409.73 236.56 410.04
 255.2 408.88 273.84 410.04 292.48 409.84 311.11 412.65 329.75 408.9 348.39 406.38 367.03 403.83 14 L
N
366.47 564.64 366.47 564.64 368.15 564.64 3 L
0 X
N
367.31 563.7 367.31 563.7 367.31 565.57 3 L
N
142.55 558.06 142.55 558.06 144.24 558.06 3 L
N
143.4 557.13 143.4 557.13 143.4 559 3 L
N
161.19 456.44 161.19 456.44 162.88 456.44 3 L
N
162.03 455.51 162.03 455.51 162.03 457.38 3 L
N
179.83 426.62 179.83 426.62 181.51 426.62 3 L
N
180.67 425.68 180.67 425.68 180.67 427.56 3 L
N
198.47 413.61 198.47 413.61 200.15 413.61 3 L
N
199.31 412.67 199.31 412.67 199.31 414.55 3 L
N
217.11 409.73 217.11 409.73 218.79 409.73 3 L
N
217.95 408.79 217.95 408.79 217.95 410.66 3 L
N
235.72 410.04 235.72 410.04 237.4 410.04 3 L
N
236.56 409.1 236.56 409.1 236.56 410.97 3 L
N
254.36 408.88 254.36 408.88 256.04 408.88 3 L
N
255.2 407.94 255.2 407.94 255.2 409.81 3 L
N
273 410.04 273 410.04 274.68 410.04 3 L
N
273.84 409.1 273.84 409.1 273.84 410.97 3 L
N
291.64 409.84 291.64 409.84 293.32 409.84 3 L
N
292.48 408.9 292.48 408.9 292.48 410.77 3 L
N
310.27 412.65 310.27 412.65 311.96 412.65 3 L
N
311.11 411.71 311.11 411.71 311.11 413.58 3 L
N
328.91 408.9 328.91 408.9 330.59 408.9 3 L
N
329.75 407.97 329.75 407.97 329.75 409.84 3 L
N
347.55 406.38 347.55 406.38 349.23 406.38 3 L
N
348.39 405.45 348.39 405.45 348.39 407.32 3 L
N
366.19 403.83 366.19 403.83 367.87 403.83 3 L
N
367.03 402.89 367.03 402.89 367.03 404.77 3 L
N
0 0 0 1 0 0 0 K
81 261 711 711 C
0 180 792 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 12 Q
0 X
0 0 0 1 0 0 0 K
(The Parallel MPEG-1 Encoder) 72 214.67 T
(June 8, 1995) 361.31 214.67 T
(Page 6 of 6) 658.62 214.67 T
0 0 0 1 0 0 0 K
72 252 720 720 18 RR
3 H
0 Z
N
0 0 0 1 0 0 0 K
0 36 Q
(Where from Here?) 247.97 687 T
0 24 Q
(\245) 81 642 T
(Convert the Purdue MPEG-1 encoder to split-C.) 99 642 T
(\050Use global memory instead of message passing.\051) 99 603 T
(\245) 81 564 T
-0.02 (Modify the file I/O to use Parallel File System \050PFS\051, input) 99 564 P
(prefetching, and output buffering.) 99 535 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 6
%%DocumentFonts: Helvetica
%%+ Helvetica-Bold
%%+ Times-Roman
%%EOF
