%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 11 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /Helvetica FMFONTDEFINE
2 0 /Times-Bold FMFONTDEFINE
3 0 /Courier-Bold FMFONTDEFINE
4 0 /Times-Roman FMFONTDEFINE
5 0 /Times-Italic FMFONTDEFINE
6 0 /Courier FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "mini" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
31.64 153 823.64 765 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.59 Q
0 X
0 0 0 1 0 0 0 K
1.79 (GLUNIX) 197.09 746.16 S
188.71 745.33 191.71 748.85 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
188.71 745.33 191.71 748.85 R
7 X
0 0 0 1 0 0 0 K
V
188.71 746.68 190.88 748.85 R
0 X
V
0.01 H
0 Z
N
31.64 153 823.64 765 C
226.79 745.33 229.79 748.85 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
226.79 745.33 229.79 748.85 R
7 X
0 0 0 1 0 0 0 K
V
226.79 746.68 228.97 748.85 R
0 X
V
0.01 H
0 Z
N
31.64 153 823.64 765 C
59.89 510.69 358.61 736.74 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
338.42 502.61 358.61 507.55 R
7 X
V
1 4.04 Q
0 X
( Slide 1) 345.14 504.61 T
59.89 501.72 96.22 506.65 R
7 X
V
0 X
(Douglas Ghormley) 59.89 503.96 T
197.14 501.72 225.4 506.65 R
7 X
V
0 X
(Jan 1) 199.75 503.96 T
(1, 1995) 209.32 503.96 T
1 1 0 0 0 0 1 K
2 16.15 Q
1 1 0 0 0 0 1 K
(Ef\336cient, Portable, Robust) 117.75 717.68 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Extension of Operating) 128.96 701.53 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(System Functionality) 136.36 685.39 T
0 0 0 1 0 0 0 K
2 10.76 Q
0 0 0 1 0 0 0 K
(Doug Ghormley              Steve Rodrigues) 116.26 624.39 T
-0.75 (Amin V) 116.51 608.24 P
-0.75 (ahdat                         Keith V) 150.95 608.24 P
-0.75 (etter) 260.27 608.24 P
(T) 175.21 592.09 T
(om Anderson) 181.4 592.09 T
(NOW Retr) 177.21 543.65 T
(eat) 227.54 543.65 T
(Jan 1) 180.99 527.51 T
(1, 1995) 205.22 527.51 T
396.14 153 1188.14 765 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.59 Q
0 X
0 0 0 1 0 0 0 K
1.79 (GLUNIX) 561.59 746.16 S
553.21 745.33 556.21 748.85 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
553.21 745.33 556.21 748.85 R
7 X
0 0 0 1 0 0 0 K
V
553.21 746.68 555.38 748.85 R
0 X
V
0.01 H
0 Z
N
396.14 153 1188.14 765 C
591.29 745.33 594.29 748.85 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
591.29 745.33 594.29 748.85 R
7 X
0 0 0 1 0 0 0 K
V
591.29 746.68 593.46 748.85 R
0 X
V
0.01 H
0 Z
N
396.14 153 1188.14 765 C
424.39 510.69 723.11 736.74 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
702.92 502.61 723.11 507.55 R
7 X
V
1 4.04 Q
0 X
( Slide 2) 709.64 504.61 T
424.39 501.72 460.72 506.65 R
7 X
V
0 X
(Douglas Ghormley) 424.39 503.96 T
561.64 501.72 589.9 506.65 R
7 X
V
0 X
(Jan 1) 564.25 503.96 T
(1, 1995) 573.82 503.96 T
1 1 0 0 0 0 1 K
2 16.15 Q
1 1 0 0 0 0 1 K
(Outline) 547.73 717.68 T
0 0 0 1 0 0 0 K
3 7.18 Q
0 0 0 1 0 0 0 K
(\245) 484.94 672.83 T
4 10.76 Q
(Status) 493.02 672.83 T
3 7.18 Q
(\245) 484.94 656.68 T
4 10.76 Q
(Motivation:  technology transfer) 493.02 656.68 T
3 7.18 Q
(-) 501.09 640.53 T
4 10.76 Q
(T) 509.16 640.53 T
(raditional approaches) 515.36 640.53 T
3 7.18 Q
(-) 501.09 624.39 T
4 10.76 Q
(Our solution) 509.16 624.39 T
3 7.18 Q
(\245) 484.94 608.24 T
4 10.76 Q
(Conclusions) 493.02 608.24 T
3 7.18 Q
(\245) 484.94 592.09 T
4 10.76 Q
(Plan) 493.02 592.09 T
31.64 -121.5 823.64 490.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.59 Q
0 X
0 0 0 1 0 0 0 K
1.79 (GLUNIX) 197.09 471.66 S
188.71 470.83 191.71 474.35 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
188.71 470.83 191.71 474.35 R
7 X
0 0 0 1 0 0 0 K
V
188.71 472.18 190.88 474.35 R
0 X
V
0.01 H
0 Z
N
31.64 -121.5 823.64 490.5 C
226.79 470.83 229.79 474.35 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
226.79 470.83 229.79 474.35 R
7 X
0 0 0 1 0 0 0 K
V
226.79 472.18 228.97 474.35 R
0 X
V
0.01 H
0 Z
N
31.64 -121.5 823.64 490.5 C
59.89 236.19 358.61 462.24 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
338.42 228.11 358.61 233.05 R
7 X
V
1 4.04 Q
0 X
( Slide 3) 345.14 230.1 T
59.89 227.22 96.22 232.15 R
7 X
V
0 X
(Douglas Ghormley) 59.89 229.46 T
197.14 227.22 225.4 232.15 R
7 X
V
0 X
(Jan 1) 199.75 229.46 T
(1, 1995) 209.32 229.46 T
1 1 0 0 0 0 1 K
2 16.15 Q
1 1 0 0 0 0 1 K
(Status) 187.72 443.18 T
0 0 0 1 0 0 0 K
3 7.18 Q
0 0 0 1 0 0 0 K
(\245) 104.3 414.47 T
4 10.76 Q
(W) 112.37 414.47 T
(orking prototype, supports:) 121.67 414.47 T
3 7.18 Q
(-) 136.59 398.33 T
4 10.76 Q
(parallel job control) 144.66 398.33 T
3 7.18 Q
(-) 136.59 382.18 T
4 10.76 Q
(coscheduling) 144.66 382.18 T
3 7.18 Q
(-) 136.59 366.03 T
4 10.76 Q
(idle resource detection) 144.66 366.03 T
3 7.18 Q
(-) 136.59 349.89 T
4 10.76 Q
(Split-C programs) 144.66 349.89 T
3 7.18 Q
(-) 136.59 333.74 T
4 10.76 Q
(Mantis parallel debugger) 144.66 333.74 T
3 7.18 Q
(-) 136.59 317.59 T
4 10.76 Q
(Pmake) 144.66 317.59 T
3 7.18 Q
(\245) 104.3 301.45 T
4 10.76 Q
(Centralized master makes decisions) 112.37 301.45 T
3 7.18 Q
(\245) 104.3 285.3 T
4 10.76 Q
(Library communication done with sockets) 112.37 285.3 T
3 7.18 Q
(\245) 104.3 269.15 T
4 10.76 Q
(Unprotected user) 112.37 269.15 T
(-level library) 185.99 269.15 T
396.14 -121.5 1188.14 490.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.59 Q
0 X
0 0 0 1 0 0 0 K
1.79 (GLUNIX) 561.59 471.66 S
553.21 470.83 556.21 474.35 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
553.21 470.83 556.21 474.35 R
7 X
0 0 0 1 0 0 0 K
V
553.21 472.18 555.38 474.35 R
0 X
V
0.01 H
0 Z
N
396.14 -121.5 1188.14 490.5 C
591.29 470.83 594.29 474.35 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
591.29 470.83 594.29 474.35 R
7 X
0 0 0 1 0 0 0 K
V
591.29 472.18 593.46 474.35 R
0 X
V
0.01 H
0 Z
N
396.14 -121.5 1188.14 490.5 C
424.39 236.19 723.11 462.24 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
702.92 228.11 723.11 233.05 R
7 X
V
1 4.04 Q
0 X
( Slide 4) 709.64 230.1 T
424.39 227.22 460.72 232.15 R
7 X
V
0 X
(Douglas Ghormley) 424.39 229.46 T
561.64 227.22 589.9 232.15 R
7 X
V
0 X
(Jan 1) 564.25 229.46 T
(1, 1995) 573.82 229.46 T
1 1 0 0 0 0 1 K
2 16.15 Q
1 1 0 0 0 0 1 K
(T) 502.66 443.18 T
(echnology T) 511.94 443.18 T
(ransfer) 594.63 443.18 T
0 0 0 1 0 0 0 K
3 7.18 Q
0 0 0 1 0 0 0 K
(\245) 468.8 414.47 T
4 10.76 Q
(Innovations transfer to production systems) 476.87 414.47 T
(slowly:) 476.87 402.36 T
3 7.18 Q
(-) 501.09 378.14 T
4 10.76 Q
(Process migration) 509.16 378.14 T
3 7.18 Q
(-) 501.09 362 T
4 10.76 Q
(Load sharing) 509.16 362 T
3 7.18 Q
(-) 501.09 345.85 T
4 10.76 Q
(Split VM/\336le cache) 509.16 345.85 T
3 7.18 Q
(-) 501.09 329.7 T
4 10.76 Q
(Security) 509.16 329.7 T
FMENDPAGE
%%EndPage: "mini" 1
%%Page: "mini" 2
612 792 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
31.64 153 823.64 765 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.59 Q
0 X
0 0 0 1 0 0 0 K
1.79 (GLUNIX) 197.09 746.16 S
188.71 745.33 191.71 748.85 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
188.71 745.33 191.71 748.85 R
7 X
0 0 0 1 0 0 0 K
V
188.71 746.68 190.88 748.85 R
0 X
V
0.01 H
0 Z
N
31.64 153 823.64 765 C
226.79 745.33 229.79 748.85 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
226.79 745.33 229.79 748.85 R
7 X
0 0 0 1 0 0 0 K
V
226.79 746.68 228.97 748.85 R
0 X
V
0.01 H
0 Z
N
31.64 153 823.64 765 C
59.89 510.69 358.61 736.74 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
338.42 502.61 358.61 507.55 R
7 X
V
1 4.04 Q
0 X
( Slide 5) 345.14 504.61 T
59.89 501.72 96.22 506.65 R
7 X
V
0 X
(Douglas Ghormley) 59.89 503.96 T
197.14 501.72 225.4 506.65 R
7 X
V
0 X
(Jan 1) 199.75 503.96 T
(1, 1995) 209.32 503.96 T
1 1 0 0 0 0 1 K
2 16.15 Q
1 1 0 0 0 0 1 K
(T) 138.16 717.68 T
(echnology T) 147.44 717.68 T
(ransfer) 230.13 717.68 T
0 0 0 1 0 0 0 K
3 7.18 Q
0 0 0 1 0 0 0 K
(\245) 104.3 688.97 T
4 10.76 Q
(W) 112.37 688.97 T
(orkstations compete on:) 121.67 688.97 T
3 7.18 Q
(-) 136.59 672.83 T
4 10.76 Q
(Applications) 144.66 672.83 T
3 7.18 Q
(-) 136.59 656.68 T
4 10.76 Q
(Robustness) 144.66 656.68 T
3 7.18 Q
(-) 136.59 640.53 T
4 10.76 Q
(Performance) 144.66 640.53 T
0 1 1 0 1 0 0 K
3 7.18 Q
0 1 1 0 1 0 0 K
(-) 136.59 624.39 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
5 10.76 Q
(Not OS functionality) 144.66 624.39 T
0 0 0 1 0 0 0 K
3 7.18 Q
0 0 0 1 0 0 0 K
(\245) 104.3 600.17 T
4 10.76 Q
(Small OS release delays cost $$$ in lost hardware) 112.37 600.17 T
(sales) 112.37 588.06 T
396.14 153 1188.14 765 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.59 Q
0 X
0 0 0 1 0 0 0 K
1.79 (GLUNIX) 561.59 746.16 S
553.21 745.33 556.21 748.85 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
553.21 745.33 556.21 748.85 R
7 X
0 0 0 1 0 0 0 K
V
553.21 746.68 555.38 748.85 R
0 X
V
0.01 H
0 Z
N
396.14 153 1188.14 765 C
591.29 745.33 594.29 748.85 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
591.29 745.33 594.29 748.85 R
7 X
0 0 0 1 0 0 0 K
V
591.29 746.68 593.46 748.85 R
0 X
V
0.01 H
0 Z
N
396.14 153 1188.14 765 C
424.39 510.69 723.11 736.74 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
702.92 502.61 723.11 507.55 R
7 X
V
1 4.04 Q
0 X
( Slide 6) 709.64 504.61 T
424.39 501.72 460.72 506.65 R
7 X
V
0 X
(Douglas Ghormley) 424.39 503.96 T
561.64 501.72 589.9 506.65 R
7 X
V
0 X
(Jan 1) 564.25 503.96 T
(1, 1995) 573.82 503.96 T
1 1 0 0 0 0 1 K
2 16.15 Q
1 1 0 0 0 0 1 K
(GLUnix Featur) 513.57 717.68 T
(es) 620.48 717.68 T
0 0 0 1 0 0 0 K
3 7.18 Q
0 0 0 1 0 0 0 K
(\245) 468.8 688.97 T
4 10.76 Q
(Goals) 476.87 688.97 T
3 7.18 Q
(-) 501.09 672.83 T
4 10.76 Q
(Support parallel jobs) 509.16 672.83 T
3 7.18 Q
(-) 501.09 656.68 T
4 10.76 Q
(Improve performance of sequential apps) 509.16 656.68 T
3 7.18 Q
(\245) 468.8 632.46 T
4 10.76 Q
(GLUnix must support:) 476.87 632.46 T
3 7.18 Q
(-) 501.09 616.31 T
4 10.76 Q
(Parallel job control) 509.16 616.31 T
3 7.18 Q
(-) 501.09 600.17 T
4 10.76 Q
(Migration) 509.16 600.17 T
3 7.18 Q
(-) 501.09 584.02 T
4 10.76 Q
(Checkpointing) 509.16 584.02 T
3 7.18 Q
(-) 501.09 567.87 T
4 10.76 Q
(NRAM) 509.16 567.87 T
3 7.18 Q
(-) 501.09 551.73 T
4 10.76 Q
(Parallel \336le system) 509.16 551.73 T
3 7.18 Q
(-) 501.09 535.58 T
4 10.76 Q
(Fast communications) 509.16 535.58 T
31.64 -121.5 823.64 490.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.59 Q
0 X
0 0 0 1 0 0 0 K
1.79 (GLUNIX) 197.09 471.66 S
188.71 470.83 191.71 474.35 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
188.71 470.83 191.71 474.35 R
7 X
0 0 0 1 0 0 0 K
V
188.71 472.18 190.88 474.35 R
0 X
V
0.01 H
0 Z
N
31.64 -121.5 823.64 490.5 C
226.79 470.83 229.79 474.35 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
226.79 470.83 229.79 474.35 R
7 X
0 0 0 1 0 0 0 K
V
226.79 472.18 228.97 474.35 R
0 X
V
0.01 H
0 Z
N
31.64 -121.5 823.64 490.5 C
59.89 236.19 358.61 462.24 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
338.42 228.11 358.61 233.05 R
7 X
V
1 4.04 Q
0 X
( Slide 7) 345.14 230.1 T
59.89 227.22 96.22 232.15 R
7 X
V
0 X
(Douglas Ghormley) 59.89 229.46 T
197.14 227.22 225.4 232.15 R
7 X
V
0 X
(Jan 1) 199.75 229.46 T
(1, 1995) 209.32 229.46 T
1 1 0 0 0 0 1 K
2 16.15 Q
1 1 0 0 0 0 1 K
(T) 127.23 443.18 T
(raditional Appr) 136.81 443.18 T
(oaches) 245.52 443.18 T
0 0 0 1 0 0 0 K
2 8.07 Q
0 0 0 1 0 0 0 K
(Appr) 97.19 398.77 T
(oach) 115.44 398.77 T
(Advantages) 166.87 398.77 T
(Disadvantages) 257.02 398.77 T
4 F
(Build OS) 93.53 374.55 T
(from scratch) 93.53 366.03 T
(Full functionality) 146.01 374.55 T
(Long development time) 238.85 374.55 T
(Non portable) 238.85 362.45 T
(Modify) 93.53 338.23 T
(existing OS) 93.53 329.7 T
(Full functionality) 146.01 338.23 T
(Long development time) 238.85 338.23 T
(Non portable) 238.85 326.11 T
(User Level) 93.53 289.79 T
(Rapid development) 146.01 301.89 T
(Portable) 146.01 289.79 T
(Layered solution) 146.01 277.67 T
(Restricted functionality) 238.85 301.89 T
(Poor performance) 238.85 289.79 T
(T) 238.85 277.67 T
(oy solutions) 243.22 277.67 T
88.15 412.9 88.15 268.03 2 L
V
1.35 H
N
140.07 412.9 140.07 268.03 2 L
V
0.22 H
N
141.19 412.9 141.19 268.03 2 L
V
N
233.47 414.25 233.47 266.69 2 L
V
N
330.35 412.9 330.35 268.03 2 L
V
1.35 H
N
87.48 413.58 331.02 413.58 2 L
V
N
87.48 388.46 331.02 388.46 2 L
V
N
87.48 352.13 331.02 352.13 2 L
V
0.22 H
N
87.48 315.8 331.02 315.8 2 L
V
N
87.48 267.36 331.02 267.36 2 L
V
1.35 H
N
396.14 -121.5 1188.14 490.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.59 Q
0 X
0 0 0 1 0 0 0 K
1.79 (GLUNIX) 561.59 471.66 S
553.21 470.83 556.21 474.35 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
553.21 470.83 556.21 474.35 R
7 X
0 0 0 1 0 0 0 K
V
553.21 472.18 555.38 474.35 R
0 X
V
0.01 H
0 Z
N
396.14 -121.5 1188.14 490.5 C
591.29 470.83 594.29 474.35 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
591.29 470.83 594.29 474.35 R
7 X
0 0 0 1 0 0 0 K
V
591.29 472.18 593.46 474.35 R
0 X
V
0.01 H
0 Z
N
396.14 -121.5 1188.14 490.5 C
424.39 236.19 723.11 462.24 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
702.92 228.11 723.11 233.05 R
7 X
V
1 4.04 Q
0 X
( Slide 8) 709.64 230.1 T
424.39 227.22 460.72 232.15 R
7 X
V
0 X
(Douglas Ghormley) 424.39 229.46 T
561.64 227.22 589.9 232.15 R
7 X
V
0 X
(Jan 1) 564.25 229.46 T
(1, 1995) 573.82 229.46 T
1 1 0 0 0 0 1 K
2 16.15 Q
1 1 0 0 0 0 1 K
(T) 466.04 443.18 T
(raditional User Level Systems) 475.61 443.18 T
0 0 0 1 0 0 0 K
452.65 244.26 694.85 453.94 C
460.72 246.73 686.78 410.89 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
472.83 269.6 674.67 311.09 R
7 X
0 0 0 1 0 0 0 K
V
0.22 H
2 Z
0 X
N
2 10.76 Q
(Native OS) 553.57 279.94 T
597.97 327.24 666.59 399.9 R
7 X
V
0 X
N
J
597.97 347.42 666.59 347.42 2 L
J
597.97 347.42 599.65 347.42 2 L
N
[7.449 6.456] 7.449 I
599.65 347.42 664.91 347.42 2 L
N
J
664.91 347.42 666.59 347.42 2 L
N
(Application) 606.04 369.86 T
(Library) 613.97 335.33 T
J
90 450 36.33 34.31 525.31 357.51 A
(User Level) 504.23 365.36 T
(OS) 518.13 354.11 T
(Server) 510.08 343.4 T
J
1 1 0 0 0 0 1 K
615.6 307.07 614.12 301.89 612.63 307.07 614.12 307.07 4 Y
1 1 0 0 0 0 1 K
V
614.12 326.11 614.12 307.07 2 L
N
539.97 322.06 541.46 327.24 542.94 322.06 541.46 322.06 4 Y
V
541.46 301.89 541.46 322.06 2 L
N
510.65 298.99 509.16 293.82 507.68 298.99 509.16 298.99 4 Y
V
509.16 326.11 509.16 298.99 2 L
N
640.89 320.94 642.37 326.11 643.86 320.94 642.37 320.94 4 Y
V
642.37 293.82 642.37 320.94 2 L
N
0 1 1 0 1 0 0 K
4 6.28 Q
0 1 1 0 1 0 0 K
(1) 620.4 317.37 T
90 450 5.38 5.38 621.74 318.71 A
(2) 546.84 316.92 T
90 450 5.38 5.38 548.18 318.27 A
(3) 499.3 317.37 T
90 450 5.38 5.38 500.64 318.71 A
(4) 647.76 316.92 T
90 450 5.38 5.38 649.1 318.27 A
1 1 0 0 0 0 1 K
614.12 301.89 541.46 301.89 2 L
0.45 H
1 1 0 0 0 0 1 K
N
509.16 293.82 642.37 293.82 2 L
N
0 1 1 0 1 0 0 K
4 8.07 Q
0 1 1 0 1 0 0 K
(Protection) 553.57 401.34 T
(Boundary) 553.57 393.27 T
J
J
577.79 390.7 577.79 309.97 2 L
J
577.79 390.7 577.79 389.58 2 L
1.35 H
N
[4.943 8.898] 4.943 I
577.79 389.58 577.79 311.09 2 L
N
J
577.79 311.09 577.79 309.97 2 L
N
0 0 0 1 0 0 0 K
J
452.65 244.26 694.85 453.94 C
396.14 -121.5 1188.14 490.5 C
FMENDPAGE
%%EndPage: "mini" 2
%%Page: "mini" 3
612 792 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
31.64 153 823.64 765 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.59 Q
0 X
0 0 0 1 0 0 0 K
1.79 (GLUNIX) 197.09 746.16 S
188.71 745.33 191.71 748.85 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
188.71 745.33 191.71 748.85 R
7 X
0 0 0 1 0 0 0 K
V
188.71 746.68 190.88 748.85 R
0 X
V
0.01 H
0 Z
N
31.64 153 823.64 765 C
226.79 745.33 229.79 748.85 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
226.79 745.33 229.79 748.85 R
7 X
0 0 0 1 0 0 0 K
V
226.79 746.68 228.97 748.85 R
0 X
V
0.01 H
0 Z
N
31.64 153 823.64 765 C
59.89 510.69 358.61 736.74 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
338.42 502.61 358.61 507.55 R
7 X
V
1 4.04 Q
0 X
( Slide 9) 345.14 504.61 T
59.89 501.72 96.22 506.65 R
7 X
V
0 X
(Douglas Ghormley) 59.89 503.96 T
197.14 501.72 225.4 506.65 R
7 X
V
0 X
(Jan 1) 199.75 503.96 T
(1, 1995) 209.32 503.96 T
1 1 0 0 0 0 1 K
2 16.15 Q
1 1 0 0 0 0 1 K
(GLUnix Logical Organization) 105.63 717.68 T
0 0 0 1 0 0 0 K
88.15 518.76 330.35 728.44 C
94.96 530.2 323.54 712.3 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
111.11 558.46 312.94 590.75 R
7 X
0 0 0 1 0 0 0 K
V
0.22 H
2 Z
0 X
N
2 10.76 Q
(Native OS) 187.8 572.6 T
239.27 635.15 303.86 679.33 R
7 X
V
0 X
N
(Application) 245.99 652.16 T
(V) 167.62 609.6 T
(irtual OS  Layer) 175 609.6 T
J
114.14 635.15 178.72 679.33 R
7 X
V
0 X
N
(Application) 121.86 652.16 T
J
111.11 623.04 312.94 623.04 312.94 602.86 111.11 602.86 4 Y
J
111.11 621.36 111.11 623.04 112.79 623.04 3 L
N
[7.534 6.529] 7.534 I
112.79 623.04 311.26 623.04 2 L
N
J
311.26 623.04 312.94 623.04 312.94 621.36 3 L
N
[8.152 7.065] 8.152 I
312.94 621.36 312.94 604.54 2 L
N
J
312.94 604.54 312.94 602.86 311.26 602.86 3 L
N
[7.534 6.529] 7.534 I
311.26 602.86 112.79 602.86 2 L
N
J
112.79 602.86 111.11 602.86 111.11 604.54 3 L
N
[8.152 7.065] 8.152 I
111.11 604.54 111.11 621.36 2 L
N
1 1 0 0 0 0 1 K
J
140.85 620.14 139.37 614.97 137.88 620.14 139.37 620.14 4 Y
1 1 0 0 0 0 1 K
V
139.37 635.15 139.37 620.14 2 L
0.45 H
N
139.37 614.97 151.48 614.97 2 L
N
149.99 629.98 151.48 635.15 152.96 629.98 151.48 629.98 4 Y
V
151.48 614.97 151.48 629.98 2 L
N
265.98 620.14 264.5 614.97 263.02 620.14 264.5 620.14 4 Y
V
264.5 635.15 264.5 620.14 2 L
N
265.98 587.85 264.5 582.67 263.02 587.85 264.5 587.85 4 Y
V
264.5 614.97 264.5 587.85 2 L
N
264.5 582.67 276.61 582.67 2 L
N
275.13 613.83 276.61 619 278.1 613.83 276.61 613.83 4 Y
V
276.61 582.67 276.61 613.83 2 L
N
275.13 629.98 276.61 635.15 278.1 629.98 276.61 629.98 4 Y
V
276.61 619 276.61 629.98 2 L
N
0 0 0 1 0 0 0 K
88.15 518.76 330.35 728.44 C
31.64 153 823.64 765 C
396.14 153 1188.14 765 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.59 Q
0 X
0 0 0 1 0 0 0 K
1.79 (GLUNIX) 561.59 746.16 S
553.21 745.33 556.21 748.85 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
553.21 745.33 556.21 748.85 R
7 X
0 0 0 1 0 0 0 K
V
553.21 746.68 555.38 748.85 R
0 X
V
0.01 H
0 Z
N
396.14 153 1188.14 765 C
591.29 745.33 594.29 748.85 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
591.29 745.33 594.29 748.85 R
7 X
0 0 0 1 0 0 0 K
V
591.29 746.68 593.46 748.85 R
0 X
V
0.01 H
0 Z
N
396.14 153 1188.14 765 C
424.39 510.69 723.11 736.74 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
702.92 502.61 723.11 507.55 R
7 X
V
1 4.04 Q
0 X
( Slide 10) 707.4 504.61 T
424.39 501.72 460.72 506.65 R
7 X
V
0 X
(Douglas Ghormley) 424.39 503.96 T
561.64 501.72 589.9 506.65 R
7 X
V
0 X
(Jan 1) 564.25 503.96 T
(1, 1995) 573.82 503.96 T
1 1 0 0 0 0 1 K
2 16.15 Q
1 1 0 0 0 0 1 K
(GLUnix Logical Organization) 470.13 717.68 T
0 0 0 1 0 0 0 K
3 7.18 Q
0 0 0 1 0 0 0 K
(\245) 468.8 680.9 T
4 10.76 Q
(New OS layer sits between application and kernel) 476.87 680.9 T
3 7.18 Q
(\245) 468.8 656.68 T
4 10.76 Q
(Provides and uses standard system call interface) 476.87 656.68 T
3 7.18 Q
(\245) 468.8 632.46 T
4 10.76 Q
(All system calls directed through virtual OS layer) 476.87 632.46 T
3 7.18 Q
(\245) 468.8 608.24 T
4 10.76 Q
(Runs unmodi\336ed applications on an unmodi\336ed) 476.87 608.24 T
(kernel) 476.87 596.13 T
3 7.18 Q
(\245) 468.8 571.91 T
4 10.76 Q
(V) 476.87 571.91 T
(irtual OS layer protected from application) 484 571.91 T
3 7.18 Q
(\245) 468.8 547.69 T
4 10.76 Q
(V) 476.87 547.69 T
(irtual OS layer authenticates system call) 484 547.69 T
(ar) 476.87 535.58 T
(guments) 485.04 535.58 T
31.64 -121.5 823.64 490.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.59 Q
0 X
0 0 0 1 0 0 0 K
1.79 (GLUNIX) 197.09 471.66 S
188.71 470.83 191.71 474.35 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
188.71 470.83 191.71 474.35 R
7 X
0 0 0 1 0 0 0 K
V
188.71 472.18 190.88 474.35 R
0 X
V
0.01 H
0 Z
N
31.64 -121.5 823.64 490.5 C
226.79 470.83 229.79 474.35 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
226.79 470.83 229.79 474.35 R
7 X
0 0 0 1 0 0 0 K
V
226.79 472.18 228.97 474.35 R
0 X
V
0.01 H
0 Z
N
31.64 -121.5 823.64 490.5 C
59.89 236.19 358.61 462.24 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
338.42 228.11 358.61 233.05 R
7 X
V
1 4.04 Q
0 X
( Slide 1) 343.2 230.1 T
(1) 356.36 230.1 T
59.89 227.22 96.22 232.15 R
7 X
V
0 X
(Douglas Ghormley) 59.89 229.46 T
197.14 227.22 225.4 232.15 R
7 X
V
0 X
(Jan 1) 199.75 229.46 T
(1, 1995) 209.32 229.46 T
1 1 0 0 0 0 1 K
2 16.15 Q
1 1 0 0 0 0 1 K
(Enabling T) 131.71 443.18 T
(echnologies) 207.85 443.18 T
0 0 0 1 0 0 0 K
4 10.76 Q
0 0 0 1 0 0 0 K
(Software-based fault isolation \050SFI\051:) 88.15 414.47 T
3 7.18 Q
(\245) 104.3 390.25 T
4 10.76 Q
(Hardware-style address space protection in) 112.37 390.25 T
(software) 112.37 378.14 T
3 7.18 Q
(-) 120.44 362 T
4 10.76 Q
-0.17 (Prevents LOAD/ST) 128.52 362 P
-0.17 (ORE/BRANCH outside of) 213.36 362 P
(protected region) 128.52 349.89 T
3 7.18 Q
(-) 120.44 333.74 T
4 10.76 Q
(Optimizations minimize overhead) 128.52 333.74 T
3 7.18 Q
(\245) 104.3 317.59 T
4 10.76 Q
(Overhead:  3-7%) 112.37 317.59 T
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(SFI protects library code from application) 118.81 257.04 T
0 0 0 1 0 0 0 K
396.14 -121.5 1188.14 490.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.59 Q
0 X
0 0 0 1 0 0 0 K
1.79 (GLUNIX) 561.59 471.66 S
553.21 470.83 556.21 474.35 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
553.21 470.83 556.21 474.35 R
7 X
0 0 0 1 0 0 0 K
V
553.21 472.18 555.38 474.35 R
0 X
V
0.01 H
0 Z
N
396.14 -121.5 1188.14 490.5 C
591.29 470.83 594.29 474.35 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
591.29 470.83 594.29 474.35 R
7 X
0 0 0 1 0 0 0 K
V
591.29 472.18 593.46 474.35 R
0 X
V
0.01 H
0 Z
N
396.14 -121.5 1188.14 490.5 C
424.39 236.19 723.11 462.24 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
702.92 228.11 723.11 233.05 R
7 X
V
1 4.04 Q
0 X
( Slide 12) 707.4 230.1 T
424.39 227.22 460.72 232.15 R
7 X
V
0 X
(Douglas Ghormley) 424.39 229.46 T
561.64 227.22 589.9 232.15 R
7 X
V
0 X
(Jan 1) 564.25 229.46 T
(1, 1995) 573.82 229.46 T
1 1 0 0 0 0 1 K
2 16.15 Q
1 1 0 0 0 0 1 K
(Enabling T) 496.21 443.18 T
(echnologies) 572.35 443.18 T
0 0 0 1 0 0 0 K
4 10.76 Q
0 0 0 1 0 0 0 K
(Binary translation:) 452.65 406.4 T
3 7.18 Q
(\245) 468.8 382.18 T
4 10.76 Q
(Change system calls from kernel traps to library) 476.87 382.18 T
(procedure calls) 476.87 370.07 T
3 7.18 Q
(\245) 468.8 353.92 T
4 10.76 Q
(Link virtual OS into existing object) 476.87 353.92 T
3 7.18 Q
(\245) 468.8 337.78 T
4 10.76 Q
(Enforce SFI check on binary objects) 476.87 337.78 T
1 0 1 0 0 1 0 K
1 0 1 0 0 1 0 K
(V) 479.44 257.04 T
(irtual OS works with existing applications) 486.56 257.04 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 3
%%Page: "mini" 4
612 792 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
31.64 153 823.64 765 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.59 Q
0 X
0 0 0 1 0 0 0 K
1.79 (GLUNIX) 197.09 746.16 S
188.71 745.33 191.71 748.85 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
188.71 745.33 191.71 748.85 R
7 X
0 0 0 1 0 0 0 K
V
188.71 746.68 190.88 748.85 R
0 X
V
0.01 H
0 Z
N
31.64 153 823.64 765 C
226.79 745.33 229.79 748.85 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
226.79 745.33 229.79 748.85 R
7 X
0 0 0 1 0 0 0 K
V
226.79 746.68 228.97 748.85 R
0 X
V
0.01 H
0 Z
N
31.64 153 823.64 765 C
59.89 510.69 358.61 736.74 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
338.42 502.61 358.61 507.55 R
7 X
V
1 4.04 Q
0 X
( Slide 13) 342.9 504.61 T
59.89 501.72 96.22 506.65 R
7 X
V
0 X
(Douglas Ghormley) 59.89 503.96 T
197.14 501.72 225.4 506.65 R
7 X
V
0 X
(Jan 1) 199.75 503.96 T
(1, 1995) 209.32 503.96 T
1 1 0 0 0 0 1 K
2 16.15 Q
1 1 0 0 0 0 1 K
(Physical Organization A) 124.92 717.68 T
0 0 0 1 0 0 0 K
88.15 518.76 330.35 728.44 C
94.96 533.11 323.54 712.3 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
J
103.04 623.49 316.98 623.49 316.98 599.27 103.04 599.27 4 Y
J
103.04 621.81 103.04 623.49 104.72 623.49 3 L
0.22 H
2 Z
0 X
0 1 1 0 1 0 0 K
N
[7.516 6.514] 7.516 I
104.72 623.49 315.29 623.49 2 L
N
J
315.29 623.49 316.98 623.49 316.98 621.81 3 L
N
[7.191 6.232] 7.191 I
316.98 621.81 316.98 600.95 2 L
N
J
316.98 600.95 316.98 599.27 315.3 599.27 3 L
N
[7.516 6.514] 7.516 I
315.3 599.27 104.72 599.27 2 L
N
J
104.72 599.27 103.04 599.27 103.04 600.95 3 L
N
[7.191 6.232] 7.191 I
103.04 600.95 103.04 621.81 2 L
N
0 0 0 1 0 0 0 K
J
110.1 550.16 311.93 582.45 R
7 X
0 0 0 1 0 0 0 K
V
0 X
N
2 10.76 Q
(Native OS) 190.83 564.53 T
240.28 599.27 304.87 675.97 R
7 X
V
0 X
N
(Application) 247 645.93 T
J
115.15 599.27 179.73 675.97 R
7 X
V
0 X
N
(Application) 121.86 645.93 T
0 1 1 0 1 0 0 K
4 8.07 Q
0 1 1 0 1 0 0 K
(Protection) 191.4 649.46 T
(Boundaries) 191.4 641.39 T
J
246.29 630.68 252.39 623.49 243.41 626.36 244.85 628.52 4 Y
V
228.17 639.64 244.86 628.51 2 L
1.35 H
N
176.59 626.35 167.62 623.49 173.71 630.67 175.15 628.51 4 Y
V
191.84 639.64 175.15 628.51 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Shared Memory) 183.77 592.95 T
2 10.76 Q
(V) 167.62 608.2 T
(irtual OS  Layer) 175 608.2 T
1 1 0 0 0 0 1 K
J
141.86 617.23 140.38 612.05 138.89 617.23 140.38 617.23 4 Y
1 1 0 0 0 0 1 K
V
140.38 632.24 140.38 617.23 2 L
0.45 H
N
140.38 612.05 152.49 612.05 2 L
N
151 627.06 152.49 632.24 153.97 627.06 152.49 627.06 4 Y
V
152.49 612.05 152.49 627.06 2 L
N
265.98 616.55 264.5 611.38 263.02 616.55 264.5 616.55 4 Y
V
264.5 631.56 264.5 616.55 2 L
N
265.98 580.22 264.5 575.05 263.02 580.22 264.5 580.22 4 Y
V
264.5 611.38 264.5 580.22 2 L
N
264.5 575.05 276.61 575.05 2 L
N
275.13 610.24 276.61 615.42 278.1 610.24 276.61 610.24 4 Y
V
276.61 575.05 276.61 610.24 2 L
N
275.13 626.39 276.61 631.56 278.1 626.39 276.61 626.39 4 Y
V
276.61 615.42 276.61 626.39 2 L
N
0 1 1 0 1 0 0 K
J
304.87 623.49 240.28 623.49 2 L
J
304.87 623.49 303.75 623.49 2 L
1.35 H
0 1 1 0 1 0 0 K
N
[5.148 9.267] 5.148 I
303.75 623.49 241.4 623.49 2 L
N
J
241.4 623.49 240.28 623.49 2 L
N
J
115.15 623.49 179.73 623.49 2 L
J
115.15 623.49 116.27 623.49 2 L
N
[5.148 9.267] 5.148 I
116.27 623.49 178.61 623.49 2 L
N
J
178.61 623.49 179.73 623.49 2 L
N
4 8.07 Q
(SFI) 201.71 655.66 T
0 0 0 1 0 0 0 K
J
88.15 518.76 330.35 728.44 C
31.64 153 823.64 765 C
396.14 153 1188.14 765 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.59 Q
0 X
0 0 0 1 0 0 0 K
1.79 (GLUNIX) 561.59 746.16 S
553.21 745.33 556.21 748.85 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
553.21 745.33 556.21 748.85 R
7 X
0 0 0 1 0 0 0 K
V
553.21 746.68 555.38 748.85 R
0 X
V
0.01 H
0 Z
N
396.14 153 1188.14 765 C
591.29 745.33 594.29 748.85 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
591.29 745.33 594.29 748.85 R
7 X
0 0 0 1 0 0 0 K
V
591.29 746.68 593.46 748.85 R
0 X
V
0.01 H
0 Z
N
396.14 153 1188.14 765 C
424.39 510.69 723.11 736.74 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
702.92 502.61 723.11 507.55 R
7 X
V
1 4.04 Q
0 X
( Slide 14) 707.4 504.61 T
424.39 501.72 460.72 506.65 R
7 X
V
0 X
(Douglas Ghormley) 424.39 503.96 T
561.64 501.72 589.9 506.65 R
7 X
V
0 X
(Jan 1) 564.25 503.96 T
(1, 1995) 573.82 503.96 T
1 1 0 0 0 0 1 K
2 16.15 Q
1 1 0 0 0 0 1 K
(Making It W) 517.23 717.68 T
(ork) 606.05 717.68 T
0 0 0 1 0 0 0 K
452.65 518.76 694.85 728.44 C
462.99 526.83 684.5 712.3 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 8.07 Q
0 X
0 0 0 1 0 0 0 K
(optimize) 523.54 633.26 T
(Intermediate) 499.32 654.41 T
479.14 538.72 668.86 595.23 R
0.45 H
2 Z
N
2 10.76 Q
(GLUnix) 551.8 528.87 T
495.29 688.08 547.76 704.22 8.07 RR
N
2 8.07 Q
(Sour) 500.15 693.81 T
(ce Code) 516.6 693.81 T
495.29 643.67 547.76 671.93 8.07 RR
N
(Fault Isolated) 499.32 662.48 T
(Code) 510.98 646.34 T
520.99 677.1 519.51 671.93 518.02 677.1 519.51 677.1 4 Y
V
519.51 688.08 519.51 677.1 2 L
N
(gcc\325) 523.54 678.63 T
520.99 632.7 519.51 627.53 518.02 632.7 519.51 632.7 4 Y
V
519.51 643.67 519.51 632.7 2 L
N
495.29 603.31 547.76 627.53 8.07 RR
N
(Fault Isolated) 499.32 618.08 T
(Object) 508.3 610.01 T
520.99 572.15 519.51 566.98 518.02 572.15 519.51 572.15 4 Y
V
519.51 603.31 519.51 572.15 2 L
N
(execute) 559.87 544.45 T
(verify) 511.44 561.57 T
551.66 550.2 555.84 546.8 550.5 547.47 551.08 548.84 4 Y
V
527.58 558.9 551.08 548.83 2 L
N
604.28 603.31 652.72 627.53 8.07 RR
N
(Standard) 612.35 618.08 T
(Object) 616.39 610.01 T
628.64 588.3 627.16 583.12 625.67 588.3 627.16 588.3 4 Y
V
627.16 603.31 627.16 588.3 2 L
N
(binary xlate) 582.08 588.03 T
593.51 547.03 588.13 546.8 592.57 549.84 593.04 548.43 4 Y
V
624.46 558.9 593.04 548.43 2 L
N
600.24 558.9 656.75 583.12 8.07 RR
N
(Fault Isolated) 604.59 573.68 T
(Object) 614.26 565.6 T
(optimize) 631.19 588.41 T
J
452.65 518.76 694.85 728.44 C
396.14 153 1188.14 765 C
31.64 -121.5 823.64 490.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.59 Q
0 X
0 0 0 1 0 0 0 K
1.79 (GLUNIX) 197.09 471.66 S
188.71 470.83 191.71 474.35 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
188.71 470.83 191.71 474.35 R
7 X
0 0 0 1 0 0 0 K
V
188.71 472.18 190.88 474.35 R
0 X
V
0.01 H
0 Z
N
31.64 -121.5 823.64 490.5 C
226.79 470.83 229.79 474.35 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
226.79 470.83 229.79 474.35 R
7 X
0 0 0 1 0 0 0 K
V
226.79 472.18 228.97 474.35 R
0 X
V
0.01 H
0 Z
N
31.64 -121.5 823.64 490.5 C
59.89 236.19 358.61 462.24 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
338.42 228.11 358.61 233.05 R
7 X
V
1 4.04 Q
0 X
( Slide 15) 342.9 230.1 T
59.89 227.22 96.22 232.15 R
7 X
V
0 X
(Douglas Ghormley) 59.89 229.46 T
197.14 227.22 225.4 232.15 R
7 X
V
0 X
(Jan 1) 199.75 229.46 T
(1, 1995) 209.32 229.46 T
1 1 0 0 0 0 1 K
2 16.15 Q
1 1 0 0 0 0 1 K
(T) 136.65 443.18 T
(echnical Challenges) 145.94 443.18 T
0 0 0 1 0 0 0 K
3 7.18 Q
0 0 0 1 0 0 0 K
(\245) 104.3 406.4 T
4 10.76 Q
(Not all code can be translated statically) 112.37 406.4 T
3 7.18 Q
(\245) 104.3 390.25 T
4 10.76 Q
(Dynamic libraries) 112.37 390.25 T
3 7.18 Q
(\245) 104.3 374.11 T
4 10.76 Q
(W) 112.37 374.11 T
(ork with debugging) 121.67 374.11 T
3 7.18 Q
(\245) 104.3 357.96 T
4 10.76 Q
(Dif) 112.37 357.96 T
(\336cult to optimize binary code) 126.53 357.96 T
3 7.18 Q
(\245) 104.3 341.81 T
4 10.76 Q
(Composing layers) 112.37 341.81 T
3 7.18 Q
(-) 120.44 325.67 T
4 10.76 Q
(Example:) 128.52 325.67 T
(one virtual OS adds migration;) 176.96 325.67 T
(second OS adds parallel job control) 176.96 313.56 T
396.14 -121.5 1188.14 490.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.59 Q
0 X
0 0 0 1 0 0 0 K
1.79 (GLUNIX) 561.59 471.66 S
553.21 470.83 556.21 474.35 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
553.21 470.83 556.21 474.35 R
7 X
0 0 0 1 0 0 0 K
V
553.21 472.18 555.38 474.35 R
0 X
V
0.01 H
0 Z
N
396.14 -121.5 1188.14 490.5 C
591.29 470.83 594.29 474.35 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
591.29 470.83 594.29 474.35 R
7 X
0 0 0 1 0 0 0 K
V
591.29 472.18 593.46 474.35 R
0 X
V
0.01 H
0 Z
N
396.14 -121.5 1188.14 490.5 C
424.39 236.19 723.11 462.24 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
702.92 228.11 723.11 233.05 R
7 X
V
1 4.04 Q
0 X
( Slide 16) 707.4 230.1 T
424.39 227.22 460.72 232.15 R
7 X
V
0 X
(Douglas Ghormley) 424.39 229.46 T
561.64 227.22 589.9 232.15 R
7 X
V
0 X
(Jan 1) 564.25 229.46 T
(1, 1995) 573.82 229.46 T
1 1 0 0 0 0 1 K
2 16.15 Q
1 1 0 0 0 0 1 K
(Physical Organization B) 489.87 443.18 T
0 0 0 1 0 0 0 K
452.65 244.26 694.85 453.94 C
458.64 251.44 688.86 437.8 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10.76 Q
0 X
0 0 0 1 0 0 0 K
(Native OS) 548.95 285.04 T
J
470.75 304.36 672.59 304.36 2 L
J
470.75 304.36 472.43 304.36 2 L
0.22 H
2 Z
N
[7.534 6.529] 7.534 I
472.43 304.36 670.9 304.36 2 L
N
J
670.9 304.36 672.59 304.36 2 L
N
J
599.92 348.77 664.51 401.47 R
7 X
V
0 X
N
(Application) 606.64 371.43 T
J
478.83 348.77 543.41 401.47 R
7 X
V
0 X
N
(Application) 485.54 371.43 T
(V) 527.27 314.7 T
(irtual OS  Layer) 534.64 314.7 T
1 1 0 0 0 0 1 K
J
504.47 325.68 502.98 320.51 501.5 325.68 502.98 325.68 4 Y
1 1 0 0 0 0 1 K
V
502.98 348.77 502.98 325.68 2 L
0.45 H
N
502.98 320.51 515.09 320.51 2 L
N
513.61 343.59 515.09 348.77 516.58 343.59 515.09 343.59 4 Y
V
515.09 320.51 515.09 343.59 2 L
N
629.66 321.65 628.18 316.47 626.7 321.65 628.18 321.65 4 Y
V
628.18 348.77 628.18 321.65 2 L
N
629.66 293.39 628.18 288.21 626.7 293.39 628.18 293.39 4 Y
V
628.18 316.47 628.18 293.39 2 L
N
628.18 288.21 640.29 288.21 2 L
N
638.81 315.33 640.29 320.51 641.78 315.33 640.29 315.33 4 Y
V
640.29 288.21 640.29 315.33 2 L
N
638.81 343.59 640.29 348.77 641.78 343.59 640.29 343.59 4 Y
V
640.29 320.51 640.29 343.59 2 L
N
0 0 0 1 0 0 0 K
672.59 328.58 672.59 268.03 2 L
0.22 H
0 0 0 1 0 0 0 K
N
672.59 268.03 470.75 268.03 2 L
N
470.75 268.03 470.75 328.58 2 L
N
0 1 1 0 1 0 0 K
J
470.75 328.58 672.59 328.58 2 L
J
470.75 328.58 471.87 328.58 2 L
1.35 H
0 1 1 0 1 0 0 K
N
[5.023 9.041] 5.023 I
471.87 328.58 671.46 328.58 2 L
N
J
671.46 328.58 672.59 328.58 2 L
N
4 8.07 Q
(Kernel) 560.01 367.7 T
(Protection) 555.52 359.63 T
(Boundary) 556.42 351.56 T
0 0 0 1 0 0 0 K
J
0 1 1 0 1 0 0 K
574.27 337.86 571.67 328.81 569.07 337.86 571.67 337.86 4 Y
V
571.67 348.99 571.67 337.86 2 L
N
0 0 0 1 0 0 0 K
452.65 244.26 694.85 453.94 C
396.14 -121.5 1188.14 490.5 C
FMENDPAGE
%%EndPage: "mini" 4
%%Page: "mini" 5
612 792 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
31.64 153 823.64 765 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.59 Q
0 X
0 0 0 1 0 0 0 K
1.79 (GLUNIX) 197.09 746.16 S
188.71 745.33 191.71 748.85 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
188.71 745.33 191.71 748.85 R
7 X
0 0 0 1 0 0 0 K
V
188.71 746.68 190.88 748.85 R
0 X
V
0.01 H
0 Z
N
31.64 153 823.64 765 C
226.79 745.33 229.79 748.85 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
226.79 745.33 229.79 748.85 R
7 X
0 0 0 1 0 0 0 K
V
226.79 746.68 228.97 748.85 R
0 X
V
0.01 H
0 Z
N
31.64 153 823.64 765 C
59.89 510.69 358.61 736.74 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
338.42 502.61 358.61 507.55 R
7 X
V
1 4.04 Q
0 X
( Slide 17) 342.9 504.61 T
59.89 501.72 96.22 506.65 R
7 X
V
0 X
(Douglas Ghormley) 59.89 503.96 T
197.14 501.72 225.4 506.65 R
7 X
V
0 X
(Jan 1) 199.75 503.96 T
(1, 1995) 209.32 503.96 T
1 1 0 0 0 0 1 K
2 16.15 Q
1 1 0 0 0 0 1 K
(T) 136.65 717.68 T
(echnical Challenges) 145.94 717.68 T
0 0 0 1 0 0 0 K
3 7.18 Q
0 0 0 1 0 0 0 K
(\245) 104.3 680.9 T
4 10.76 Q
(Use binary translation to patch new OS code into) 112.37 680.9 T
(existing kernel binary) 112.37 668.79 T
3 7.18 Q
(\245) 104.3 652.64 T
4 10.76 Q
(Rerouting system calls to new OS layer) 112.37 652.64 T
3 7.18 Q
(\245) 104.3 636.5 T
4 10.76 Q
(Interface glue) 112.37 636.5 T
3 7.18 Q
(\245) 104.3 620.35 T
4 10.76 Q
(Composing layers) 112.37 620.35 T
396.14 153 1188.14 765 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.59 Q
0 X
0 0 0 1 0 0 0 K
1.79 (GLUNIX) 561.59 746.16 S
553.21 745.33 556.21 748.85 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
553.21 745.33 556.21 748.85 R
7 X
0 0 0 1 0 0 0 K
V
553.21 746.68 555.38 748.85 R
0 X
V
0.01 H
0 Z
N
396.14 153 1188.14 765 C
591.29 745.33 594.29 748.85 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
591.29 745.33 594.29 748.85 R
7 X
0 0 0 1 0 0 0 K
V
591.29 746.68 593.46 748.85 R
0 X
V
0.01 H
0 Z
N
396.14 153 1188.14 765 C
424.39 510.69 723.11 736.74 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
702.92 502.61 723.11 507.55 R
7 X
V
1 4.04 Q
0 X
( Slide 18) 707.4 504.61 T
424.39 501.72 460.72 506.65 R
7 X
V
0 X
(Douglas Ghormley) 424.39 503.96 T
561.64 501.72 589.9 506.65 R
7 X
V
0 X
(Jan 1) 564.25 503.96 T
(1, 1995) 573.82 503.96 T
1 1 0 0 0 0 1 K
2 16.15 Q
1 1 0 0 0 0 1 K
(Relative Comparison) 500.87 717.68 T
0 0 0 1 0 0 0 K
2 10.76 Q
0 0 0 1 0 0 0 K
(Organization A) 475.45 671.48 T
(Organization B) 596.84 671.48 T
6 F
(+) 458.03 644.57 T
4 F
( no kernel hacking) 464.49 644.57 T
6 F
(+) 458.03 628.42 T
4 F
( portable) 464.49 628.42 T
6 F
(-) 458.03 612.28 T
4 F
( SFI overhead) 464.49 612.28 T
6 F
(+) 458.03 596.13 T
4 F
( understand pieces) 464.49 596.13 T
6 F
(-) 575.1 644.57 T
4 F
( wedging into kernel) 581.55 644.57 T
6 F
(-) 575.1 628.42 T
4 F
( not as portable) 581.55 628.42 T
6 F
(+) 575.1 612.28 T
4 F
( small overhead) 581.55 612.28 T
6 F
(-) 575.1 596.13 T
4 F
( lar) 581.55 596.13 T
(gely unknown) 595.41 596.13 T
452.65 687.63 452.65 585.37 2 L
V
0.9 H
N
569.71 688.52 569.71 584.47 2 L
V
0.22 H
N
694.85 687.63 694.85 585.37 2 L
V
0.9 H
N
452.2 688.08 695.3 688.08 2 L
V
N
453.1 660.83 694.4 660.83 2 L
V
0.22 H
N
453.1 659.71 694.4 659.71 2 L
V
N
452.2 584.92 695.3 584.92 2 L
V
0.9 H
N
31.64 -121.5 823.64 490.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.59 Q
0 X
0 0 0 1 0 0 0 K
1.79 (GLUNIX) 197.09 471.66 S
188.71 470.83 191.71 474.35 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
188.71 470.83 191.71 474.35 R
7 X
0 0 0 1 0 0 0 K
V
188.71 472.18 190.88 474.35 R
0 X
V
0.01 H
0 Z
N
31.64 -121.5 823.64 490.5 C
226.79 470.83 229.79 474.35 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
226.79 470.83 229.79 474.35 R
7 X
0 0 0 1 0 0 0 K
V
226.79 472.18 228.97 474.35 R
0 X
V
0.01 H
0 Z
N
31.64 -121.5 823.64 490.5 C
59.89 236.19 358.61 462.24 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
338.42 228.11 358.61 233.05 R
7 X
V
1 4.04 Q
0 X
( Slide 19) 342.9 230.1 T
59.89 227.22 96.22 232.15 R
7 X
V
0 X
(Douglas Ghormley) 59.89 229.46 T
197.14 227.22 225.4 232.15 R
7 X
V
0 X
(Jan 1) 199.75 229.46 T
(1, 1995) 209.32 229.46 T
1 1 0 0 0 0 1 K
2 16.15 Q
1 1 0 0 0 0 1 K
(Overall Advantages) 140.85 443.18 T
0 0 0 1 0 0 0 K
4 10.76 Q
0 0 0 1 0 0 0 K
(Advantages over previous solutions:) 88.15 406.4 T
3 7.18 Q
(\245) 120.44 382.18 T
4 10.76 Q
(Portability) 128.52 382.18 T
3 7.18 Q
(\245) 120.44 366.03 T
4 10.76 Q
(Leverage existing OS features) 128.52 366.03 T
3 7.18 Q
(\245) 120.44 349.89 T
4 10.76 Q
(Debugging) 128.52 349.89 T
3 7.18 Q
(\245) 120.44 333.74 T
4 10.76 Q
(Minimal impact on OS) 128.52 333.74 T
3 7.18 Q
(\245) 120.44 317.59 T
4 10.76 Q
(Rapid development time) 128.52 317.59 T
3 7.18 Q
(\245) 120.44 301.45 T
4 10.76 Q
(Performance) 128.52 301.45 T
3 7.18 Q
(\245) 120.44 285.3 T
4 10.76 Q
(Richer functionality) 128.52 285.3 T
396.14 -121.5 1188.14 490.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.59 Q
0 X
0 0 0 1 0 0 0 K
1.79 (GLUNIX) 561.59 471.66 S
553.21 470.83 556.21 474.35 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
553.21 470.83 556.21 474.35 R
7 X
0 0 0 1 0 0 0 K
V
553.21 472.18 555.38 474.35 R
0 X
V
0.01 H
0 Z
N
396.14 -121.5 1188.14 490.5 C
591.29 470.83 594.29 474.35 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
591.29 470.83 594.29 474.35 R
7 X
0 0 0 1 0 0 0 K
V
591.29 472.18 593.46 474.35 R
0 X
V
0.01 H
0 Z
N
396.14 -121.5 1188.14 490.5 C
424.39 236.19 723.11 462.24 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
702.92 228.11 723.11 233.05 R
7 X
V
1 4.04 Q
0 X
( Slide 20) 707.4 230.1 T
424.39 227.22 460.72 232.15 R
7 X
V
0 X
(Douglas Ghormley) 424.39 229.46 T
561.64 227.22 589.9 232.15 R
7 X
V
0 X
(Jan 1) 564.25 229.46 T
(1, 1995) 573.82 229.46 T
1 1 0 0 0 0 1 K
2 16.15 Q
1 1 0 0 0 0 1 K
(Disadvantages) 523.96 443.18 T
0 0 0 1 0 0 0 K
3 7.18 Q
0 0 0 1 0 0 0 K
(\245) 468.8 398.33 T
4 10.76 Q
(Fault isolation overheads) 476.87 398.33 T
3 7.18 Q
(\245) 468.8 382.18 T
4 10.76 Q
(State management overhead) 476.87 382.18 T
3 7.18 Q
(\245) 468.8 366.03 T
4 10.76 Q
(Not possible to control everything) 476.87 366.03 T
3 7.18 Q
(-) 501.09 349.89 T
4 10.76 Q
(Disk layout) 509.16 349.89 T
3 7.18 Q
(-) 501.09 333.74 T
4 10.76 Q
(Fine grained scheduling) 509.16 333.74 T
3 7.18 Q
(-) 501.09 317.59 T
4 10.76 Q
(V) 509.16 317.59 T
(irtual memory) 516.29 317.59 T
FMENDPAGE
%%EndPage: "mini" 5
%%Page: "mini" 6
612 792 1 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
31.64 153 823.64 765 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.59 Q
0 X
0 0 0 1 0 0 0 K
1.79 (GLUNIX) 197.09 746.16 S
188.71 745.33 191.71 748.85 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
188.71 745.33 191.71 748.85 R
7 X
0 0 0 1 0 0 0 K
V
188.71 746.68 190.88 748.85 R
0 X
V
0.01 H
0 Z
N
31.64 153 823.64 765 C
226.79 745.33 229.79 748.85 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
226.79 745.33 229.79 748.85 R
7 X
0 0 0 1 0 0 0 K
V
226.79 746.68 228.97 748.85 R
0 X
V
0.01 H
0 Z
N
31.64 153 823.64 765 C
59.89 510.69 358.61 736.74 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
338.42 502.61 358.61 507.55 R
7 X
V
1 4.04 Q
0 X
( Slide 21) 342.9 504.61 T
59.89 501.72 96.22 506.65 R
7 X
V
0 X
(Douglas Ghormley) 59.89 503.96 T
197.14 501.72 225.4 506.65 R
7 X
V
0 X
(Jan 1) 199.75 503.96 T
(1, 1995) 209.32 503.96 T
1 1 0 0 0 0 1 K
2 16.15 Q
1 1 0 0 0 0 1 K
(Conclusion) 170.67 717.68 T
0 0 0 1 0 0 0 K
4 10.76 Q
0 0 0 1 0 0 0 K
(A new way to extend OS functionality:) 88.15 680.9 T
3 7.18 Q
(-) 136.59 664.75 T
4 10.76 Q
(Quickly) 144.66 664.75 T
(, Portably) 178.65 664.75 T
(, Ef) 219.81 664.75 T
(\336ciently) 235.16 664.75 T
(, Robustly) 269.75 664.75 T
3 7.18 Q
(\245) 104.3 640.53 T
4 10.76 Q
(Allow vendors to provide portable \322value-added\323) 112.37 640.53 T
(OS extensions) 112.37 628.42 T
3 7.18 Q
(-) 136.59 612.28 T
4 10.76 Q
(OS can compete on functionality) 144.66 612.28 T
3 7.18 Q
(-) 136.59 596.13 T
4 10.76 Q
(Competition bene\336ts end user) 144.66 596.13 T
3 7.18 Q
(\245) 104.3 571.91 T
4 10.76 Q
(Decouple OS choice from hardware) 112.37 571.91 T
396.14 153 1188.14 765 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.59 Q
0 X
0 0 0 1 0 0 0 K
1.79 (GLUNIX) 561.59 746.16 S
553.21 745.33 556.21 748.85 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
553.21 745.33 556.21 748.85 R
7 X
0 0 0 1 0 0 0 K
V
553.21 746.68 555.38 748.85 R
0 X
V
0.01 H
0 Z
N
396.14 153 1188.14 765 C
591.29 745.33 594.29 748.85 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
591.29 745.33 594.29 748.85 R
7 X
0 0 0 1 0 0 0 K
V
591.29 746.68 593.46 748.85 R
0 X
V
0.01 H
0 Z
N
396.14 153 1188.14 765 C
424.39 510.69 723.11 736.74 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
702.92 502.61 723.11 507.55 R
7 X
V
1 4.04 Q
0 X
( Slide 22) 707.4 504.61 T
424.39 501.72 460.72 506.65 R
7 X
V
0 X
(Douglas Ghormley) 424.39 503.96 T
561.64 501.72 589.9 506.65 R
7 X
V
0 X
(Jan 1) 564.25 503.96 T
(1, 1995) 573.82 503.96 T
1 1 0 0 0 0 1 K
2 16.15 Q
1 1 0 0 0 0 1 K
(Plan) 558.05 717.68 T
0 0 0 1 0 0 0 K
3 7.18 Q
0 0 0 1 0 0 0 K
(\245) 468.8 672.83 T
4 10.76 Q
(Pursue underlying technology for Plan A) 476.87 672.83 T
3 7.18 Q
(\245) 468.8 656.68 T
4 10.76 Q
(Demonstrate it with a small example, e.g. ACL) 476.87 656.68 T
3 7.18 Q
(\245) 468.8 640.53 T
4 10.76 Q
(Implement full GLUnix as a protected user) 476.87 640.53 T
(-level) 662.01 640.53 T
(library) 476.87 628.42 T
31.64 -121.5 823.64 490.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 3.59 Q
0 X
0 0 0 1 0 0 0 K
1.79 (GLUNIX) 197.09 471.66 S
188.71 470.83 191.71 474.35 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
188.71 470.83 191.71 474.35 R
7 X
0 0 0 1 0 0 0 K
V
188.71 472.18 190.88 474.35 R
0 X
V
0.01 H
0 Z
N
31.64 -121.5 823.64 490.5 C
226.79 470.83 229.79 474.35 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
226.79 470.83 229.79 474.35 R
7 X
0 0 0 1 0 0 0 K
V
226.79 472.18 228.97 474.35 R
0 X
V
0.01 H
0 Z
N
31.64 -121.5 823.64 490.5 C
59.89 236.19 358.61 462.24 R
0.11 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
338.42 228.11 358.61 233.05 R
7 X
V
1 4.04 Q
0 X
( Slide 23) 342.9 230.1 T
59.89 227.22 96.22 232.15 R
7 X
V
0 X
(Douglas Ghormley) 59.89 229.46 T
197.14 227.22 225.4 232.15 R
7 X
V
0 X
(Jan 1) 199.75 229.46 T
(1, 1995) 209.32 229.46 T
1 1 0 0 0 0 1 K
2 16.15 Q
1 1 0 0 0 0 1 K
(Example: ACL) 157 443.18 T
0 0 0 1 0 0 0 K
3 7.18 Q
0 0 0 1 0 0 0 K
(\245) 104.3 406.4 T
4 10.76 Q
(Use binary translation to:) 112.37 406.4 T
3 7.18 Q
(-) 136.59 390.25 T
4 10.76 Q
(fault isolate executables) 144.66 390.25 T
3 7.18 Q
(-) 136.59 374.11 T
4 10.76 Q
(link applications to our library) 144.66 374.11 T
3 7.18 Q
(-) 136.59 357.96 T
4 10.76 Q
(redirect \336le system calls to library) 144.66 357.96 T
3 7.18 Q
(\245) 104.3 333.74 T
4 10.76 Q
(Store access control information in a \336le) 112.37 333.74 T
3 7.18 Q
(\245) 104.3 309.52 T
4 10.76 Q
(Check access control list on \336le system operations) 112.37 309.52 T
3 7.18 Q
(\245) 104.3 285.3 T
4 10.76 Q
(Hide control \336le from applications by:) 112.37 285.3 T
3 7.18 Q
(-) 120.44 269.15 T
4 10.76 Q
(hide \336le from directory lookup) 128.52 269.15 T
FMENDPAGE
%%EndPage: "mini" 6
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 6
%%DocumentFonts: Helvetica-Bold
%%+ Helvetica
%%+ Times-Bold
%%+ Courier-Bold
%%+ Times-Roman
%%+ Times-Italic
%%+ Courier
%%EOF
