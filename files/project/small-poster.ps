%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
0.23 0.23 0 0 612 792 0 1 12 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
2 0 /Courier FMFONTDEFINE
3 0 /Times-Italic FMFONTDEFINE
4 0 /Courier-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 88 Q
0 X
0 1 1 0 1 0 0 K
(Fast Sockets for Fast Networks) 749.19 2830.21 T
0 0 0 1 0 0 0 K
1 40 Q
0 0 0 1 0 0 0 K
(Steven H. Rodrigues, Thomas E. Anderson, David E. Culler) 851.67 2756.21 T
(NOW Project, University of California - Berkeley) 932.81 2708.21 T
2 F
(http://now.cs.berkeley.edu/Fastcomm/fastcomm.html) 745.29 2660.21 T
1 1 0 0 0 0 1 K
106.46 497.71 2563.46 2945.71 R
15 H
2 Z
1 1 0 0 0 0 1 K
N
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 48 Q
(Motivation) 611.08 2590.71 T
0 0 0 1 0 0 0 K
1 36 Q
0 0 0 1 0 0 0 K
(\245  Application performance isn\325) 190.37 2522.71 T
(t scaling with network hardware) 644.22 2522.71 T
(performance) 226.37 2479.71 T
(\245) 190.37 2436.71 T
3 F
(Packet pr) 220.96 2436.71 T
(ocessing over) 358.59 2436.71 T
(head) 554.9 2436.71 T
1 F
(is the problem:) 633.89 2436.71 T
(\245 0.5-0.75 ms processing time per packet) 262.36 2393.71 T
(\245 Most packets are small: can\325) 262.36 2350.71 T
(t hide cost) 695.23 2350.71 T
(\245  Research software gives lower overhead...) 190.37 2307.71 T
(\245 Active Messages \050Berkeley\051) 262.36 2264.71 T
(\245 Fast Messages \050Illinois\051) 262.36 2221.71 T
(\245 Remote Queues \050MIT/Berkeley\051) 262.36 2178.71 T
(\245  ...at the cost of compatibility) 190.37 2135.71 T
(\245 New APIs and programming models) 262.36 2092.71 T
(\245  W) 190.37 2049.71 T
(ant low-overhead) 252.07 2049.71 T
3 F
(and) 511.99 2049.71 T
1 F
( compatibility) 565.99 2049.71 T
0 1 1 0 1 0 0 K
0 44 Q
0 1 1 0 1 0 0 K
(Answer: Fast Sockets) 522.78 1958.37 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 48 Q
1 1 0 0 0 0 1 K
(Building Fast Sockets) 1715.98 2589.71 T
0 0 0 1 0 0 0 K
1 36 Q
0 0 0 1 0 0 0 K
(How can we build a Sockets layer for high performance?) 1402.46 2521.71 T
(Simplify) 1402.46 2435.71 T
(, simplify) 1526.16 2435.71 T
(, simplify:) 1661.84 2435.71 T
(\245  Simple, Low-Overhead T) 1402.46 2392.71 T
(ransport) 1800.73 2392.71 T
(\245 Network traditionally hidden by  OS abstractions) 1474.46 2349.71 T
(\245 Use Active Messages instead) 1474.46 2306.71 T
(\245  Simple, Low-Overhead Protocol) 1402.46 2263.71 T
(\245 T) 1474.46 2220.71 T
(raditional protocols built for wide-area, not local-area) 1516.8 2220.71 T
(\245 Exploit characteristics of the local-area environment) 1474.46 2177.71 T
(\245  Simple, Low-Overhead Memory Management) 1402.46 2134.71 T
(\245 Usually built to be general-purpose, not fast) 1474.46 2091.71 T
(\245 Focus on simplicity and speed \336rst) 1474.46 2048.71 T
1330.46 2612.71 1330.46 1946.71 2 L
4 H
N
142.46 1919.71 2518.46 1919.71 2 L
N
1 1 0 0 0 0 1 K
0 F
1 1 0 0 0 0 1 K
(Low-Overhead T) 341.39 1845.68 T
(ransport:) 603.72 1845.68 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Active Messages) 420.08 1802.68 T
0 0 0 1 0 0 0 K
1 F
0 0 0 1 0 0 0 K
(\245  Provides low-overhead network access) 149.54 1759.68 T
(\245  Runs on commercial hardware) 149.54 1716.68 T
(\245 Myrinet) 221.54 1673.68 T
(\245 HP Medusa FDDI) 221.54 1630.68 T
(\245  Provides \322message handler\323 abstraction) 149.54 1587.68 T
(\245 Easy protocol programming) 221.54 1544.68 T
(\245 Easy to separate packet data and metadata) 221.54 1501.68 T
1 1 0 0 0 0 1 K
0 40 Q
1 1 0 0 0 0 1 K
(Low-Overhead Memory Management) 213.23 879.23 T
0 0 0 1 0 0 0 K
1 36 Q
0 0 0 1 0 0 0 K
(\245  No send-side buf) 147.85 817.9 T
(fering) 423.75 817.9 T
(\245 Active Messages is reliable) 219.85 774.9 T
(\245  Single copy on receive side) 147.85 731.9 T
(\245  Incoming data stored in circular buf) 147.85 688.9 T
(fer) 694.68 688.9 T
(\245 One per socket) 219.85 645.9 T
-1.45 (\245 In pageable virtual memory) 219.85 602.9 P
-1.45 (, not scarce physical) 632.23 602.9 P
(memory) 255.85 559.9 T
1 1 0 0 0 0 1 K
0 40 Q
1 1 0 0 0 0 1 K
(Low-Overhead Pr) 323.95 1433.64 T
(otocol) 633.19 1433.64 T
0 0 0 1 0 0 0 K
1 36 Q
0 0 0 1 0 0 0 K
(\245  Minimal packet headers) 133.67 1372.31 T
(\245 Hardware CRC for error detection) 205.67 1329.31 T
(\245 Carry only local-area information:) 205.67 1286.31 T
(\245 No routing information) 241.67 1243.31 T
(\245 Use implicit information:) 205.67 1200.31 T
(\245 Endpoint type encodes protocol) 241.67 1157.31 T
(\245 Connection identi\336er instead of full) 241.67 1114.31 T
(connection tuple) 277.67 1071.31 T
(\245  Combine protocol and interface layers) 133.67 1028.31 T
(\245 Eliminate layering costs) 205.67 985.31 T
1 1 0 0 0 0 1 K
0 48 Q
1 1 0 0 0 0 1 K
(Performance) 1949.22 1837.68 T
0 0 0 1 0 0 0 K
1692.73 565.74 2486.43 1132.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1806.59 632.94 2442.28 632.94 2 L
1 H
2 Z
5 X
0 0 0 1 0 0 0 K
N
1807.36 632.79 1807.36 1066.52 2 L
N
1806.59 632.94 2442.28 632.94 2 L
N
1806.59 632.94 1809.8 632.94 2 L
0 X
N
2442.28 632.94 2439.06 632.94 2 L
N
0 0 0 1 0 0 0 K
1 24 Q
(0) 1786.94 631.33 T
0 0 0 1 0 0 0 K
1806.59 719.68 2442.28 719.68 2 L
5 X
N
1806.59 719.68 1809.8 719.68 2 L
0 X
N
2442.28 719.68 2439.06 719.68 2 L
N
0 0 0 1 0 0 0 K
(5000) 1750.94 718.08 T
0 0 0 1 0 0 0 K
1806.59 806.38 2442.28 806.38 2 L
5 X
N
1806.59 806.38 1809.8 806.38 2 L
0 X
N
2442.28 806.38 2439.06 806.38 2 L
N
0 0 0 1 0 0 0 K
(10000) 1738.94 804.78 T
0 0 0 1 0 0 0 K
1806.59 893.08 2442.28 893.08 2 L
5 X
N
1806.59 893.08 1809.8 893.08 2 L
0 X
N
2442.28 893.08 2439.06 893.08 2 L
N
0 0 0 1 0 0 0 K
(15000) 1738.94 891.47 T
0 0 0 1 0 0 0 K
1806.59 979.82 2442.28 979.82 2 L
5 X
N
1806.59 979.82 1809.8 979.82 2 L
0 X
N
2442.28 979.82 2439.06 979.82 2 L
N
0 0 0 1 0 0 0 K
(20000) 1738.94 978.22 T
0 0 0 1 0 0 0 K
1806.59 1066.52 2442.28 1066.52 2 L
5 X
N
1806.59 1066.52 1809.8 1066.52 2 L
0 X
N
2442.28 1066.52 2439.06 1066.52 2 L
N
0 0 0 1 0 0 0 K
(25000) 1738.94 1064.92 T
0 0 0 1 0 0 0 K
1807.36 632.79 1807.36 1066.52 2 L
5 X
N
1807.36 632.79 1807.36 636.07 2 L
0 X
N
1807.36 1066.52 1807.36 1063.23 2 L
N
0 0 0 1 0 0 0 K
(0) 1803.36 615.15 T
0 0 0 1 0 0 0 K
1884.87 632.79 1884.87 1066.52 2 L
5 X
N
1884.87 632.79 1884.87 636.07 2 L
0 X
N
1884.87 1066.52 1884.87 1063.23 2 L
N
0 0 0 1 0 0 0 K
(1000) 1860.87 615.15 T
0 0 0 1 0 0 0 K
1962.37 632.79 1962.37 1066.52 2 L
5 X
N
1962.37 632.79 1962.37 636.07 2 L
0 X
N
1962.37 1066.52 1962.37 1063.23 2 L
N
0 0 0 1 0 0 0 K
(2000) 1938.37 615.15 T
0 0 0 1 0 0 0 K
2039.87 632.79 2039.87 1066.52 2 L
5 X
N
2039.87 632.79 2039.87 636.07 2 L
0 X
N
2039.87 1066.52 2039.87 1063.23 2 L
N
0 0 0 1 0 0 0 K
(3000) 2015.87 615.15 T
0 0 0 1 0 0 0 K
2117.37 632.79 2117.37 1066.52 2 L
5 X
N
2117.37 632.79 2117.37 636.07 2 L
0 X
N
2117.37 1066.52 2117.37 1063.23 2 L
N
0 0 0 1 0 0 0 K
(4000) 2093.37 615.15 T
0 0 0 1 0 0 0 K
2194.87 632.79 2194.87 1066.52 2 L
5 X
N
2194.87 632.79 2194.87 636.07 2 L
0 X
N
2194.87 1066.52 2194.87 1063.23 2 L
N
0 0 0 1 0 0 0 K
(5000) 2170.87 615.15 T
0 0 0 1 0 0 0 K
2272.37 632.79 2272.37 1066.52 2 L
5 X
N
2272.37 632.79 2272.37 636.07 2 L
0 X
N
2272.37 1066.52 2272.37 1063.23 2 L
N
0 0 0 1 0 0 0 K
(6000) 2248.37 615.15 T
0 0 0 1 0 0 0 K
2349.87 632.79 2349.87 1066.52 2 L
5 X
N
2349.87 632.79 2349.87 636.07 2 L
0 X
N
2349.87 1066.52 2349.87 1063.23 2 L
N
0 0 0 1 0 0 0 K
(7000) 2325.87 615.15 T
0 0 0 1 0 0 0 K
2427.42 632.79 2427.42 1066.52 2 L
5 X
N
2427.42 632.79 2427.42 636.07 2 L
0 X
N
2427.42 1066.52 2427.42 1063.23 2 L
N
0 0 0 1 0 0 0 K
(8000) 2403.42 615.15 T
0 0 0 1 0 0 0 K
1806.59 632.79 2442.28 632.79 2442.28 1066.52 1806.59 1066.52 1806.59 632.79 5 L
N
0 0 0 1 0 0 0 K
(Kilobytes/second) 0 -270 1717.79 765.39 TF
(Packet Size) 2068.78 581.78 T
(Measured Bandwidth) 2021.45 1080.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Active Messages) 2186.57 726.74 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
2357.52 728.35 2380.46 728.35 2 L
3 H
0 1 1 0 1 0 0 K
N
1807.46 634.53 1807.46 634.53 1808 645.34 1808.58 657.09 1809.85 679.35 1812.33 718.64 1817.3 776.85
 1827.19 853.89 1847.07 930.57 1886.72 987.79 1966.07 1040.33 2045.47 1050.73 2124.82 1049.19 2204.17 925.69 2283.52 973.55
 2442.28 1022.45 2442.28 1022.45 17 L
N
2363.56 728.35 2365.17 726.71 2366.77 728.35 2365.17 729.99 2363.56 728.35 5 L
0.5 H
N
2365.17 728.35 2365.17 728.35 2 L
N
1805.85 634.53 1807.46 632.89 1809.07 634.53 1807.46 636.17 1805.85 634.53 5 L
N
1807.46 634.53 1807.46 634.53 2 L
N
1806.39 645.34 1808 643.69 1809.61 645.34 1808 646.98 1806.39 645.34 5 L
N
1808 645.34 1808 645.34 2 L
N
1806.98 657.09 1808.58 655.45 1810.19 657.09 1808.58 658.73 1806.98 657.09 5 L
N
1808.58 657.09 1808.58 657.09 2 L
N
1808.24 679.35 1809.85 677.71 1811.46 679.35 1809.85 680.99 1808.24 679.35 5 L
N
1809.85 679.35 1809.85 679.35 2 L
N
1810.73 718.64 1812.33 716.99 1813.94 718.64 1812.33 720.28 1810.73 718.64 5 L
N
1812.33 718.64 1812.33 718.64 2 L
N
1815.69 776.85 1817.3 775.21 1818.91 776.85 1817.3 778.49 1815.69 776.85 5 L
N
1817.3 776.85 1817.3 776.85 2 L
N
1825.58 853.89 1827.19 852.24 1828.8 853.89 1827.19 855.53 1825.58 853.89 5 L
N
1827.19 853.89 1827.19 853.89 2 L
N
1845.46 930.57 1847.07 928.93 1848.67 930.57 1847.07 932.22 1845.46 930.57 5 L
N
1847.07 930.57 1847.07 930.57 2 L
N
1885.11 987.79 1886.72 986.15 1888.32 987.79 1886.72 989.43 1885.11 987.79 5 L
N
1886.72 987.79 1886.72 987.79 2 L
N
1964.46 1040.33 1966.07 1038.68 1967.68 1040.33 1966.07 1041.97 1964.46 1040.33 5 L
N
1966.07 1040.33 1966.07 1040.33 2 L
N
2043.86 1050.73 2045.47 1049.09 2047.08 1050.73 2045.47 1052.38 2043.86 1050.73 5 L
N
2045.47 1050.73 2045.47 1050.73 2 L
N
2123.21 1049.19 2124.82 1047.55 2126.43 1049.19 2124.82 1050.83 2123.21 1049.19 5 L
N
2124.82 1049.19 2124.82 1049.19 2 L
N
2202.56 925.69 2204.17 924.05 2205.78 925.69 2204.17 927.34 2202.56 925.69 5 L
N
2204.17 925.69 2204.17 925.69 2 L
N
2281.92 973.55 2283.52 971.91 2285.13 973.55 2283.52 975.19 2281.92 973.55 5 L
N
2283.52 973.55 2283.52 973.55 2 L
N
2440.67 1022.45 2442.28 1020.81 2443.91 1022.45 2442.28 1024.09 2440.67 1022.45 5 L
N
2442.28 1022.45 2442.28 1022.45 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Fast Sockets) 2231.2 700.71 T
1 0 1 0 0 1 0 K
2356.19 705.65 2379.13 705.65 2 L
3 H
1 X
1 0 1 0 0 1 0 K
N
1807.46 633.68 1807.46 633.68 1808 638.51 1808.58 644.29 1809.85 655.15 1812.33 673.87 1817.3 702.55
 1827.19 740.1 1847.07 774.71 1886.72 814.2 1966.07 844.72 2045.47 841.09 2124.82 845.22 2204.17 837.4 2283.52 834.32
 2442.28 842.78 2442.28 842.78 17 L
N
0 1 1 0 1 0 0 K
1805.85 633.68 1805.85 633.68 1809.07 633.68 3 L
0.5 H
0 X
0 1 1 0 1 0 0 K
N
1807.46 632.04 1807.46 632.04 1807.46 635.33 3 L
N
1806.39 638.51 1806.39 638.51 1809.61 638.51 3 L
N
1808 636.87 1808 636.87 1808 640.16 3 L
N
1806.98 644.29 1806.98 644.29 1810.19 644.29 3 L
N
1808.58 642.65 1808.58 642.65 1808.58 645.93 3 L
N
1808.24 655.15 1808.24 655.15 1811.46 655.15 3 L
N
1809.85 653.5 1809.85 653.5 1809.85 656.79 3 L
N
1810.73 673.87 1810.73 673.87 1813.94 673.87 3 L
N
1812.33 672.23 1812.33 672.23 1812.33 675.51 3 L
N
1815.69 702.55 1815.69 702.55 1818.91 702.55 3 L
N
1817.3 700.91 1817.3 700.91 1817.3 704.2 3 L
N
1825.58 740.1 1825.58 740.1 1828.8 740.1 3 L
N
1827.19 738.46 1827.19 738.46 1827.19 741.74 3 L
N
1845.46 774.71 1845.46 774.71 1848.67 774.71 3 L
N
1847.07 773.07 1847.07 773.07 1847.07 776.35 3 L
N
1885.11 814.2 1885.11 814.2 1888.32 814.2 3 L
N
1886.72 812.56 1886.72 812.56 1886.72 815.84 3 L
N
1964.46 844.72 1964.46 844.72 1967.68 844.72 3 L
N
1966.07 843.08 1966.07 843.08 1966.07 846.37 3 L
N
2043.86 841.09 2043.86 841.09 2047.08 841.09 3 L
N
2045.47 839.45 2045.47 839.45 2045.47 842.73 3 L
N
2123.21 845.22 2123.21 845.22 2126.43 845.22 3 L
N
2124.82 843.58 2124.82 843.58 2124.82 846.87 3 L
N
2202.56 837.4 2202.56 837.4 2205.78 837.4 3 L
N
2204.17 835.76 2204.17 835.76 2204.17 839.05 3 L
N
2281.92 834.32 2281.92 834.32 2285.13 834.32 3 L
N
2283.52 832.67 2283.52 832.67 2283.52 835.96 3 L
N
2440.67 842.78 2440.67 842.78 2443.91 842.78 3 L
N
2442.28 841.14 2442.28 841.14 2442.28 844.43 3 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Fast Sockets, no Receive Posting) 2034.54 674.01 T
1 1 0 0 0 0 1 K
2356.85 678.95 2379.79 678.95 2 L
3 H
2 X
1 1 0 0 0 0 1 K
N
1807.46 633.78 1807.46 633.78 1808 639.21 1808.58 645.74 1809.85 658.28 1812.33 680.39 1817.3 709.38
 1827.19 749.16 1847.07 790.35 1886.72 828.39 1966.07 850.25 2045.47 850.1 2124.82 853.04 2204.17 846.82 2283.52 844.38
 2442.28 849.21 16 L
N
0 1 1 0 1 0 0 K
1805.85 632.14 1805.85 632.14 1809.07 632.14 1809.07 635.43 1805.85 635.43 1805.85 632.14 6 L
0.5 H
0 X
0 1 1 0 1 0 0 K
N
1807.46 633.78 1807.46 633.78 2 L
N
1806.39 637.57 1806.39 637.57 1809.61 637.57 1809.61 640.86 1806.39 640.86 1806.39 637.57 6 L
N
1808 639.21 1808 639.21 2 L
N
1806.98 644.09 1806.98 644.09 1810.19 644.09 1810.19 647.38 1806.98 647.38 1806.98 644.09 6 L
N
1808.58 645.74 1808.58 645.74 2 L
N
1808.24 656.64 1808.24 656.64 1811.46 656.64 1811.46 659.93 1808.24 659.93 1808.24 656.64 6 L
N
1809.85 658.28 1809.85 658.28 2 L
N
1810.73 678.75 1810.73 678.75 1813.94 678.75 1813.94 682.04 1810.73 682.04 1810.73 678.75 6 L
N
1812.33 680.39 1812.33 680.39 2 L
N
1815.69 707.73 1815.69 707.73 1818.91 707.73 1818.91 711.02 1815.69 711.02 1815.69 707.73 6 L
N
1817.3 709.38 1817.3 709.38 2 L
N
1825.58 747.52 1825.58 747.52 1828.8 747.52 1828.8 750.81 1825.58 750.81 1825.58 747.52 6 L
N
1827.19 749.16 1827.19 749.16 2 L
N
1845.46 788.7 1845.46 788.7 1848.67 788.7 1848.67 791.99 1845.46 791.99 1845.46 788.7 6 L
N
1847.07 790.35 1847.07 790.35 2 L
N
1885.11 826.75 1885.11 826.75 1888.32 826.75 1888.32 830.03 1885.11 830.03 1885.11 826.75 6 L
N
1886.72 828.39 1886.72 828.39 2 L
N
1964.46 848.61 1964.46 848.61 1967.68 848.61 1967.68 851.89 1964.46 851.89 1964.46 848.61 6 L
N
1966.07 850.25 1966.07 850.25 2 L
N
2043.86 848.46 2043.86 848.46 2047.08 848.46 2047.08 851.75 2043.86 851.75 2043.86 848.46 6 L
N
2045.47 850.1 2045.47 850.1 2 L
N
2123.21 851.4 2123.21 851.4 2126.43 851.4 2126.43 854.68 2123.21 854.68 2123.21 851.4 6 L
N
2124.82 853.04 2124.82 853.04 2 L
N
2202.56 845.17 2202.56 845.17 2205.78 845.17 2205.78 848.46 2202.56 848.46 2202.56 845.17 6 L
N
2204.17 846.82 2204.17 846.82 2 L
N
2281.92 842.73 2281.92 842.73 2285.13 842.73 2285.13 846.02 2281.92 846.02 2281.92 842.73 6 L
N
2283.52 844.38 2283.52 844.38 2 L
N
2440.67 847.56 2440.67 847.56 2443.91 847.56 2443.91 850.85 2440.67 850.85 2440.67 847.56 6 L
N
2442.28 849.21 2442.28 849.21 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Myrinet TCP) 2221.86 646.64 T
1 0 0 0 0 1 1 K
2355.52 653.58 2378.46 653.58 2 L
3 H
3 X
1 0 0 0 0 1 1 K
N
1807.46 632.99 1807.46 632.99 1808 633.29 1808.58 633.63 1809.85 634.28 1812.33 635.28 1817.3 637.82
 1827.19 644.39 1847.07 658.48 1886.72 685.42 1966.07 715.3 2045.47 728.1 2124.82 744.78 2204.17 752 2283.52 767.64
 2442.28 787.96 2442.28 787.96 17 L
N
0 1 1 0 1 0 0 K
1805.85 631.34 1805.85 631.34 1809.07 634.63 3 L
0.5 H
0 X
0 1 1 0 1 0 0 K
N
1805.85 634.63 1805.85 634.63 1809.07 631.34 3 L
N
1806.39 631.64 1806.39 631.64 1809.61 634.93 3 L
N
1806.39 634.93 1806.39 634.93 1809.61 631.64 3 L
N
1806.98 631.99 1806.98 631.99 1810.19 635.28 3 L
N
1806.98 635.28 1806.98 635.28 1810.19 631.99 3 L
N
1808.24 632.64 1808.24 632.64 1811.46 635.93 3 L
N
1808.24 635.93 1808.24 635.93 1811.46 632.64 3 L
N
1810.73 633.63 1810.73 633.63 1813.94 636.92 3 L
N
1810.73 636.92 1810.73 636.92 1813.94 633.63 3 L
N
1815.69 636.17 1815.69 636.17 1818.91 639.46 3 L
N
1815.69 639.46 1815.69 639.46 1818.91 636.17 3 L
N
1825.58 642.75 1825.58 642.75 1828.8 646.03 3 L
N
1825.58 646.03 1825.58 646.03 1828.8 642.75 3 L
N
1845.46 656.84 1845.46 656.84 1848.67 660.13 3 L
N
1845.46 660.13 1845.46 660.13 1848.67 656.84 3 L
N
1885.11 683.78 1885.11 683.78 1888.32 687.07 3 L
N
1885.11 687.07 1885.11 687.07 1888.32 683.78 3 L
N
1964.46 713.66 1964.46 713.66 1967.68 716.95 3 L
N
1964.46 716.95 1964.46 716.95 1967.68 713.66 3 L
N
2043.86 726.46 2043.86 726.46 2047.08 729.74 3 L
N
2043.86 729.74 2043.86 729.74 2047.08 726.46 3 L
N
2123.21 743.14 2123.21 743.14 2126.43 746.42 3 L
N
2123.21 746.42 2123.21 746.42 2126.43 743.14 3 L
N
2202.56 750.36 2202.56 750.36 2205.78 753.65 3 L
N
2202.56 753.65 2202.56 753.65 2205.78 750.36 3 L
N
2281.92 765.99 2281.92 765.99 2285.13 769.28 3 L
N
2281.92 769.28 2281.92 769.28 2285.13 765.99 3 L
N
2440.67 786.31 2440.67 786.31 2443.91 789.6 3 L
N
2440.67 789.6 2440.67 789.6 2443.91 786.31 3 L
N
0 0 0 1 0 0 0 K
34.46 425.71 2626.46 3017.71 C
1692.73 1203.54 2486.43 1770.46 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1808.01 1285.71 2456.39 1285.71 2 L
1 H
2 Z
5 X
0 0 0 1 0 0 0 K
N
1808.81 1284.76 1808.81 1718.49 2 L
N
1808.01 1285.71 2456.39 1285.71 2 L
N
1808.01 1285.71 1811.29 1285.71 2 L
0 X
N
2456.39 1285.71 2453.11 1285.71 2 L
N
0 0 0 1 0 0 0 K
1 24 Q
(0) 1788.21 1284.11 T
0 0 0 1 0 0 0 K
1808.01 1333.81 2456.39 1333.81 2 L
5 X
N
1808.01 1333.81 1811.29 1333.81 2 L
0 X
N
2456.39 1333.81 2453.11 1333.81 2 L
N
0 0 0 1 0 0 0 K
(500) 1764.21 1332.21 T
0 0 0 1 0 0 0 K
1808.01 1381.92 2456.39 1381.92 2 L
5 X
N
1808.01 1381.92 1811.29 1381.92 2 L
0 X
N
2456.39 1381.92 2453.11 1381.92 2 L
N
0 0 0 1 0 0 0 K
(1000) 1752.21 1380.31 T
0 0 0 1 0 0 0 K
1808.01 1429.97 2456.39 1429.97 2 L
5 X
N
1808.01 1429.97 1811.29 1429.97 2 L
0 X
N
2456.39 1429.97 2453.11 1429.97 2 L
N
0 0 0 1 0 0 0 K
(1500) 1752.21 1428.37 T
0 0 0 1 0 0 0 K
1808.01 1478.07 2456.39 1478.07 2 L
5 X
N
1808.01 1478.07 1811.29 1478.07 2 L
0 X
N
2456.39 1478.07 2453.11 1478.07 2 L
N
0 0 0 1 0 0 0 K
(2000) 1752.21 1476.47 T
0 0 0 1 0 0 0 K
1808.01 1526.13 2456.39 1526.13 2 L
5 X
N
1808.01 1526.13 1811.29 1526.13 2 L
0 X
N
2456.39 1526.13 2453.11 1526.13 2 L
N
0 0 0 1 0 0 0 K
(2500) 1752.21 1524.52 T
0 0 0 1 0 0 0 K
1808.01 1574.23 2456.39 1574.23 2 L
5 X
N
1808.01 1574.23 1811.29 1574.23 2 L
0 X
N
2456.39 1574.23 2453.11 1574.23 2 L
N
0 0 0 1 0 0 0 K
(3000) 1752.21 1572.62 T
0 0 0 1 0 0 0 K
1808.01 1622.33 2456.39 1622.33 2 L
5 X
N
1808.01 1622.33 1811.29 1622.33 2 L
0 X
N
2456.39 1622.33 2453.11 1622.33 2 L
N
0 0 0 1 0 0 0 K
(3500) 1752.21 1620.73 T
0 0 0 1 0 0 0 K
1808.01 1670.38 2456.39 1670.38 2 L
5 X
N
1808.01 1670.38 1811.29 1670.38 2 L
0 X
N
2456.39 1670.38 2453.11 1670.38 2 L
N
0 0 0 1 0 0 0 K
(4000) 1752.21 1668.78 T
0 0 0 1 0 0 0 K
1808.01 1718.49 2456.39 1718.49 2 L
5 X
N
1808.01 1718.49 1811.29 1718.49 2 L
0 X
N
2456.39 1718.49 2453.11 1718.49 2 L
N
0 0 0 1 0 0 0 K
(4500) 1752.21 1716.88 T
0 0 0 1 0 0 0 K
1808.81 1284.76 1808.81 1718.49 2 L
5 X
N
1808.81 1284.76 1808.81 1288.05 2 L
0 X
N
1808.81 1718.49 1808.81 1715.2 2 L
N
0 0 0 1 0 0 0 K
(0) 1802.81 1267.13 T
0 0 0 1 0 0 0 K
1887.85 1284.76 1887.85 1718.49 2 L
5 X
N
1887.85 1284.76 1887.85 1288.05 2 L
0 X
N
1887.85 1718.49 1887.85 1715.2 2 L
N
0 0 0 1 0 0 0 K
(1000) 1863.85 1267.13 T
0 0 0 1 0 0 0 K
1966.9 1284.76 1966.9 1718.49 2 L
5 X
N
1966.9 1284.76 1966.9 1288.05 2 L
0 X
N
1966.9 1718.49 1966.9 1715.2 2 L
N
0 0 0 1 0 0 0 K
(2000) 1942.9 1267.13 T
0 0 0 1 0 0 0 K
2045.95 1284.76 2045.95 1718.49 2 L
5 X
N
2045.95 1284.76 2045.95 1288.05 2 L
0 X
N
2045.95 1718.49 2045.95 1715.2 2 L
N
0 0 0 1 0 0 0 K
(3000) 2021.95 1267.13 T
0 0 0 1 0 0 0 K
2125 1284.76 2125 1718.49 2 L
5 X
N
2125 1284.76 2125 1288.05 2 L
0 X
N
2125 1718.49 2125 1715.2 2 L
N
0 0 0 1 0 0 0 K
(4000) 2101 1267.13 T
0 0 0 1 0 0 0 K
2204.04 1284.76 2204.04 1718.49 2 L
5 X
N
2204.04 1284.76 2204.04 1288.05 2 L
0 X
N
2204.04 1718.49 2204.04 1715.2 2 L
N
0 0 0 1 0 0 0 K
(5000) 2180.04 1267.13 T
0 0 0 1 0 0 0 K
2283.09 1284.76 2283.09 1718.49 2 L
5 X
N
2283.09 1284.76 2283.09 1288.05 2 L
0 X
N
2283.09 1718.49 2283.09 1715.2 2 L
N
0 0 0 1 0 0 0 K
(6000) 2259.09 1267.13 T
0 0 0 1 0 0 0 K
2362.14 1284.76 2362.14 1718.49 2 L
5 X
N
2362.14 1284.76 2362.14 1288.05 2 L
0 X
N
2362.14 1718.49 2362.14 1715.2 2 L
N
0 0 0 1 0 0 0 K
(7000) 2338.14 1267.13 T
0 0 0 1 0 0 0 K
2441.24 1284.76 2441.24 1718.49 2 L
5 X
N
2441.24 1284.76 2441.24 1288.05 2 L
0 X
N
2441.24 1718.49 2441.24 1715.2 2 L
N
0 0 0 1 0 0 0 K
(8000) 2417.24 1267.13 T
0 0 0 1 0 0 0 K
1808.01 1284.76 2456.39 1284.76 2456.39 1718.49 1808.01 1718.49 1808.01 1284.76 5 L
N
0 0 0 1 0 0 0 K
(Microseconds) 0 -270 1728 1433.37 TF
(Packet Size) 2076.54 1240.42 T
(Round Trip Times) 2044.2 1732.92 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Active Messages) 1888.41 1680.03 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
1835.89 1681.85 1859.29 1681.85 2 L
3 H
0 1 1 0 1 0 0 K
N
1808.9 1290.94 1808.9 1290.94 1809.45 1291.29 1810.05 1291.04 1811.34 1291.29 1813.87 1292.08 1818.94 1293.13
 1829.03 1296.42 1849.3 1302.64 1889.74 1314.79 1970.68 1339.19 2051.66 1364.89 2132.6 1390.83 2213.53 1402.88 2294.47 1413.24
 2456.39 1436.79 16 L
N
2316.35 1515.35 2316.35 1515.35 2 L
0.5 H
N
1807.27 1290.94 1808.9 1289.3 1810.54 1290.94 1808.9 1292.58 1807.27 1290.94 5 L
N
1808.9 1290.94 1808.9 1290.94 2 L
N
1807.81 1291.29 1809.45 1289.64 1811.09 1291.29 1809.45 1292.93 1807.81 1291.29 5 L
N
1809.45 1291.29 1809.45 1291.29 2 L
N
1808.41 1291.04 1810.05 1289.39 1811.69 1291.04 1810.05 1292.68 1808.41 1291.04 5 L
N
1810.05 1291.04 1810.05 1291.04 2 L
N
1809.7 1291.29 1811.34 1289.64 1812.98 1291.29 1811.34 1292.93 1809.7 1291.29 5 L
N
1811.34 1291.29 1811.34 1291.29 2 L
N
1812.23 1292.08 1813.87 1290.44 1815.51 1292.08 1813.87 1293.73 1812.23 1292.08 5 L
N
1813.87 1292.08 1813.87 1292.08 2 L
N
1817.3 1293.13 1818.94 1291.49 1820.58 1293.13 1818.94 1294.77 1817.3 1293.13 5 L
N
1818.94 1293.13 1818.94 1293.13 2 L
N
1827.39 1296.42 1829.03 1294.77 1830.67 1296.42 1829.03 1298.06 1827.39 1296.42 5 L
N
1829.03 1296.42 1829.03 1296.42 2 L
N
1847.66 1302.64 1849.3 1301 1850.94 1302.64 1849.3 1304.28 1847.66 1302.64 5 L
N
1849.3 1302.64 1849.3 1302.64 2 L
N
1888.1 1314.79 1889.74 1313.15 1891.38 1314.79 1889.74 1316.43 1888.1 1314.79 5 L
N
1889.74 1314.79 1889.74 1314.79 2 L
N
1969.04 1339.19 1970.68 1337.55 1972.32 1339.19 1970.68 1340.83 1969.04 1339.19 5 L
N
1970.68 1339.19 1970.68 1339.19 2 L
N
2050.02 1364.89 2051.66 1363.24 2053.3 1364.89 2051.66 1366.53 2050.02 1364.89 5 L
N
2051.66 1364.89 2051.66 1364.89 2 L
N
2130.96 1390.83 2132.6 1389.19 2134.24 1390.83 2132.6 1392.47 2130.96 1390.83 5 L
N
2132.6 1390.83 2132.6 1390.83 2 L
N
2211.9 1402.88 2213.53 1401.24 2215.17 1402.88 2213.53 1404.52 2211.9 1402.88 5 L
N
2213.53 1402.88 2213.53 1402.88 2 L
N
2292.83 1413.24 2294.47 1411.59 2296.11 1413.24 2294.47 1414.88 2292.83 1413.24 5 L
N
2294.47 1413.24 2294.47 1413.24 2 L
N
2454.75 1436.79 2456.39 1435.15 2458.08 1436.79 2456.39 1438.43 2454.75 1436.79 5 L
N
2456.39 1436.79 2456.39 1436.79 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Fast Sockets) 1890.29 1650.97 T
1 0 1 0 0 1 0 K
1837.31 1655.65 1860.72 1655.65 2 L
4 H
1 X
1 0 1 0 0 1 0 K
N
1808.9 1293.53 1808.9 1293.53 1809.45 1293.98 1810.05 1293.88 1811.34 1293.98 1813.87 1294.87 1818.94 1296.52
 1829.03 1300.25 1849.3 1306.03 1889.74 1317.93 1970.68 1341.98 2051.66 1367.18 2132.6 1393.22 2213.53 1379.68 2294.47 1399.69
 2456.39 1442.67 16 L
N
0 1 1 0 1 0 0 K
1807.27 1293.53 1807.27 1293.53 1810.54 1293.53 3 L
0.5 H
0 X
0 1 1 0 1 0 0 K
N
1808.9 1291.88 1808.9 1291.88 1808.9 1295.17 3 L
N
1807.81 1293.98 1807.81 1293.98 1811.09 1293.98 3 L
N
1809.45 1292.33 1809.45 1292.33 1809.45 1295.62 3 L
N
1808.41 1293.88 1808.41 1293.88 1811.69 1293.88 3 L
N
1810.05 1292.23 1810.05 1292.23 1810.05 1295.52 3 L
N
1809.7 1293.98 1809.7 1293.98 1812.98 1293.98 3 L
N
1811.34 1292.33 1811.34 1292.33 1811.34 1295.62 3 L
N
1812.23 1294.87 1812.23 1294.87 1815.51 1294.87 3 L
N
1813.87 1293.23 1813.87 1293.23 1813.87 1296.52 3 L
N
1817.3 1296.52 1817.3 1296.52 1820.58 1296.52 3 L
N
1818.94 1294.87 1818.94 1294.87 1818.94 1298.16 3 L
N
1827.39 1300.25 1827.39 1300.25 1830.67 1300.25 3 L
N
1829.03 1298.61 1829.03 1298.61 1829.03 1301.89 3 L
N
1847.66 1306.03 1847.66 1306.03 1850.94 1306.03 3 L
N
1849.3 1304.38 1849.3 1304.38 1849.3 1307.67 3 L
N
1888.1 1317.93 1888.1 1317.93 1891.38 1317.93 3 L
N
1889.74 1316.28 1889.74 1316.28 1889.74 1319.57 3 L
N
1969.04 1341.98 1969.04 1341.98 1972.32 1341.98 3 L
N
1970.68 1340.34 1970.68 1340.34 1970.68 1343.62 3 L
N
2050.02 1367.18 2050.02 1367.18 2053.3 1367.18 3 L
N
2051.66 1365.53 2051.66 1365.53 2051.66 1368.82 3 L
N
2130.96 1393.22 2130.96 1393.22 2134.24 1393.22 3 L
N
2132.6 1391.58 2132.6 1391.58 2132.6 1394.86 3 L
N
2211.9 1379.68 2211.9 1379.68 2215.17 1379.68 3 L
N
2213.53 1378.03 2213.53 1378.03 2213.53 1381.32 3 L
N
2292.83 1399.69 2292.83 1399.69 2296.11 1399.69 3 L
N
2294.47 1398.05 2294.47 1398.05 2294.47 1401.34 3 L
N
2454.75 1442.67 2454.75 1442.67 2458.08 1442.67 3 L
N
2456.39 1441.02 2456.39 1441.02 2456.39 1444.31 3 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Fast Sockets, no Receive Posting) 1891.39 1625.82 T
1 1 0 0 0 0 1 K
1835.89 1630.87 1859.29 1630.87 2 L
3 H
2 X
1 1 0 0 0 0 1 K
N
1808.9 1293.13 1808.9 1293.13 1809.45 1293.43 1810.05 1293.23 1811.34 1293.73 1813.87 1294.67 1818.94 1296.32
 1829.03 1299.65 1849.3 1306.57 1889.74 1320.52 1970.68 1349.8 2051.66 1379.28 2132.6 1413.24 2213.53 1408.36 2294.47 1432.31
 2456.39 1483.35 16 L
N
0 1 1 0 1 0 0 K
1807.27 1291.49 1807.27 1291.49 1810.54 1291.49 1810.54 1294.77 1807.27 1294.77 1807.27 1291.49 6 L
0.5 H
0 X
0 1 1 0 1 0 0 K
N
1808.9 1293.13 1808.9 1293.13 2 L
N
1807.81 1291.79 1807.81 1291.79 1811.09 1291.79 1811.09 1295.07 1807.81 1295.07 1807.81 1291.79 6 L
N
1809.45 1293.43 1809.45 1293.43 2 L
N
1808.41 1291.59 1808.41 1291.59 1811.69 1291.59 1811.69 1294.87 1808.41 1294.87 1808.41 1291.59 6 L
N
1810.05 1293.23 1810.05 1293.23 2 L
N
1809.7 1292.08 1809.7 1292.08 1812.98 1292.08 1812.98 1295.37 1809.7 1295.37 1809.7 1292.08 6 L
N
1811.34 1293.73 1811.34 1293.73 2 L
N
1812.23 1293.03 1812.23 1293.03 1815.51 1293.03 1815.51 1296.32 1812.23 1296.32 1812.23 1293.03 6 L
N
1813.87 1294.67 1813.87 1294.67 2 L
N
1817.3 1294.67 1817.3 1294.67 1820.58 1294.67 1820.58 1297.96 1817.3 1297.96 1817.3 1294.67 6 L
N
1818.94 1296.32 1818.94 1296.32 2 L
N
1827.39 1298.01 1827.39 1298.01 1830.67 1298.01 1830.67 1301.3 1827.39 1301.3 1827.39 1298.01 6 L
N
1829.03 1299.65 1829.03 1299.65 2 L
N
1847.66 1304.93 1847.66 1304.93 1850.94 1304.93 1850.94 1308.22 1847.66 1308.22 1847.66 1304.93 6 L
N
1849.3 1306.57 1849.3 1306.57 2 L
N
1888.1 1318.87 1888.1 1318.87 1891.38 1318.87 1891.38 1322.16 1888.1 1322.16 1888.1 1318.87 6 L
N
1889.74 1320.52 1889.74 1320.52 2 L
N
1969.04 1348.15 1969.04 1348.15 1972.32 1348.15 1972.32 1351.44 1969.04 1351.44 1969.04 1348.15 6 L
N
1970.68 1349.8 1970.68 1349.8 2 L
N
2050.02 1377.63 2050.02 1377.63 2053.3 1377.63 2053.3 1380.92 2050.02 1380.92 2050.02 1377.63 6 L
N
2051.66 1379.28 2051.66 1379.28 2 L
N
2130.96 1411.59 2130.96 1411.59 2134.24 1411.59 2134.24 1414.88 2130.96 1414.88 2130.96 1411.59 6 L
N
2132.6 1413.24 2132.6 1413.24 2 L
N
2211.9 1406.71 2211.9 1406.71 2215.17 1406.71 2215.17 1410 2211.9 1410 2211.9 1406.71 6 L
N
2213.53 1408.36 2213.53 1408.36 2 L
N
2292.83 1430.67 2292.83 1430.67 2296.11 1430.67 2296.11 1433.95 2292.83 1433.95 2292.83 1430.67 6 L
N
2294.47 1432.31 2294.47 1432.31 2 L
N
2454.75 1481.71 2454.75 1481.71 2458.08 1481.71 2458.08 1484.99 2454.75 1484.99 2454.75 1481.71 6 L
N
2456.39 1483.35 2456.39 1483.35 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Myrinet TCP) 1892.8 1596.05 T
1 0 0 0 0 1 1 K
1835.17 1601.1 1858.57 1601.1 2 L
3 H
3 X
1 0 0 0 0 1 1 K
N
1808.9 1422.1 1808.9 1422.1 1809.45 1425.09 1810.05 1423.35 1811.34 1417.57 1813.87 1425.54 1818.94 1428.53
 1829.03 1433.36 1849.3 1450.49 1889.74 1468.06 1970.68 1494.41 2051.66 1525.88 2132.6 1545.6 2213.53 1578.76 2294.47 1618.45
 2456.39 1680.59 16 L
N
0 1 1 0 1 0 0 K
1807.27 1420.46 1807.27 1420.46 1810.54 1423.74 3 L
0.5 H
0 X
0 1 1 0 1 0 0 K
N
1807.27 1423.74 1807.27 1423.74 1810.54 1420.46 3 L
N
1807.81 1423.45 1807.81 1423.45 1811.09 1426.73 3 L
N
1807.81 1426.73 1807.81 1426.73 1811.09 1423.45 3 L
N
1808.41 1421.7 1808.41 1421.7 1811.69 1424.99 3 L
N
1808.41 1424.99 1808.41 1424.99 1811.69 1421.7 3 L
N
1809.7 1415.93 1809.7 1415.93 1812.98 1419.21 3 L
N
1809.7 1419.21 1809.7 1419.21 1812.98 1415.93 3 L
N
1812.23 1423.89 1812.23 1423.89 1815.51 1427.18 3 L
N
1812.23 1427.18 1812.23 1427.18 1815.51 1423.89 3 L
N
1817.3 1426.88 1817.3 1426.88 1820.58 1430.17 3 L
N
1817.3 1430.17 1817.3 1430.17 1820.58 1426.88 3 L
N
1827.39 1431.71 1827.39 1431.71 1830.67 1435 3 L
N
1827.39 1435 1827.39 1435 1830.67 1431.71 3 L
N
1847.66 1448.84 1847.66 1448.84 1850.94 1452.13 3 L
N
1847.66 1452.13 1847.66 1452.13 1854.22 1448.84 3 L
N
1888.1 1466.42 1888.1 1466.42 1891.38 1469.71 3 L
N
1888.1 1469.71 1888.1 1469.71 1891.38 1466.42 3 L
N
1969.04 1492.76 1969.04 1492.76 1972.32 1496.05 3 L
N
1969.04 1496.05 1969.04 1496.05 1972.32 1492.76 3 L
N
2050.02 1524.23 2050.02 1524.23 2053.3 1527.52 3 L
N
2050.02 1527.52 2050.02 1527.52 2053.3 1524.23 3 L
N
2130.96 1543.95 2130.96 1543.95 2134.24 1547.24 3 L
N
2130.96 1547.24 2130.96 1547.24 2134.24 1543.95 3 L
N
2211.9 1577.12 2211.9 1577.12 2215.17 1580.4 3 L
N
2211.9 1580.4 2211.9 1580.4 2215.17 1577.12 3 L
N
2292.83 1616.8 2292.83 1616.8 2296.11 1620.09 3 L
N
2292.83 1620.09 2292.83 1620.09 2296.11 1616.8 3 L
N
2454.75 1678.95 2454.75 1678.95 2458.08 1682.24 3 L
N
2454.75 1682.24 2454.75 1682.24 2458.08 1678.95 3 L
N
0 0 0 1 0 0 0 K
34.46 425.71 2626.46 3017.71 C
1 1 0 0 0 0 1 K
0 40 Q
0 X
1 1 0 0 0 0 1 K
(Faster Than a BSD) 1065.23 1843.01 T
4 F
(mbuf) 1403.03 1843.01 T
0 F
(:) 1499.03 1843.01 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(Data T) 1035.85 1795.01 T
(ransfer in Fast Sockets) 1151.77 1795.01 T
0 0 0 1 0 0 0 K
1 36 Q
0 0 0 1 0 0 0 K
(\245  Lower latency through:) 955.72 1731.68 T
(\245 Immediate transmission) 1027.72 1688.68 T
(\245 Minimal data copying) 1027.72 1645.68 T
955.72 1260.23 1210.84 1586.21 R
4 H
2 Z
N
1366.74 1260.23 1621.86 1586.21 R
N
0 0 1 0 1 1 0 K
969.89 1444.48 1040.76 1515.35 R
2 X
0 0 1 0 1 1 0 K
V
0 X
N
0 0 0 1 0 0 0 K
1 24 Q
0 0 0 1 0 0 0 K
(User Buf) 969.89 1529.52 T
(fer) 1056.77 1529.52 T
0 0 1 0 1 1 0 K
1480.13 1316.92 1550.99 1387.79 R
2 X
0 0 1 0 1 1 0 K
V
0 X
N
1395.09 1444.48 1465.95 1515.35 R
8 X
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Socket Buf) 1395.09 1529.52 T
(fer) 1501.98 1529.52 T
1357.84 1493.62 1380.92 1487 1357.84 1480.38 1357.84 1487 4 Y
V
1069.1 1487 1357.84 1487 2 L
N
3 F
(send\050\051) 1097.45 1458.65 T
1 F
(User Buf) 1480.13 1288.57 T
(fer) 1567.01 1288.57 T
1541.41 1427.02 1536.8 1401.98 1527.44 1425.66 1534.43 1426.34 4 Y
V
16.65 90 56.69 85.04 1480.13 1401.96 A
3 F
(r) 1536.82 1458.65 T
(ecv\050\051) 1545.27 1458.65 T
1 36 Q
(\245  If) 955.72 1165.36 T
3 F
(r) 1019.29 1165.36 T
(ecv\050\051) 1031.97 1165.36 T
1 F
( has been made, can optimize) 1103.9 1165.36 T
(transfer \050) 991.72 1122.36 T
3 F
(Receive Posting) 1122.65 1122.36 T
1 F
(\051) 1353.59 1122.36 T
(\245 Protocol exploits knowledge from API) 1027.72 1079.36 T
0 F
(\245 Zer) 1027.72 1036.36 T
(o-copy) 1104.65 1036.36 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
941.54 537.39 1636.03 976.76 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
941.54 537.39 1636.03 976.76 R
7 X
0 0 0 1 0 0 0 K
V
955.72 622.43 1210.84 948.42 R
4 H
2 Z
0 X
N
1366.74 622.43 1621.86 948.42 R
N
0 0 1 0 1 1 0 K
969.89 806.69 1040.76 877.55 R
2 X
0 0 1 0 1 1 0 K
V
0 X
N
0 0 0 1 0 0 0 K
1 24 Q
0 0 0 1 0 0 0 K
(User Buf) 969.89 891.72 T
(fer) 1056.77 891.72 T
0 0 1 0 1 1 0 K
1480.13 792.51 1550.99 863.38 R
2 X
0 0 1 0 1 1 0 K
V
0 X
N
1522.65 679.13 1593.51 749.99 R
8 X
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Socket Buf) 1474.15 641.81 T
(fer) 1581.05 641.81 T
1442.88 827.47 1465.95 820.86 1442.88 814.24 1442.88 820.86 4 Y
V
1069.1 820.86 1442.88 820.86 2 L
N
3 F
(send\050\051) 1111.62 846.96 T
1 F
(User Buf) 1479.99 882.76 T
(fer) 1566.87 882.76 T
3 F
(r) 1409.56 917.83 T
(ecv\050\051) 1418 917.83 T
J
1131.81 900.11 1111.62 905.9 1131.81 911.69 1131.81 905.9 4 Y
V
J
1423.44 905.9 1131.81 905.9 2 L
J
1423.44 905.9 1420.94 905.9 2 L
3 H
N
[4.959 8.926] 4.959 I
1420.94 905.9 1134.31 905.9 2 L
N
J
1134.31 905.9 1131.81 905.9 2 L
N
J
34.46 425.71 2626.46 3017.71 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Trailer
%%BoundingBox: 0 0 2660.87 3443.48
%%PageOrder: Descend
%%Pages: 1
%%DocumentFonts: Times-Bold
%%+ Times-Roman
%%+ Courier
%%+ Times-Italic
%%+ Courier-Bold
%%EOF
