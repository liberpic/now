%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 30 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
2 0 /Times-Italic FMFONTDEFINE
3 0 /Helvetica FMFONTDEFINE
4 0 /Helvetica-Bold FMFONTDEFINE
5 0 /Courier FMFONTDEFINE
6 0 /Helvetica-Oblique FMFONTDEFINE
7 0 /Helvetica-BoldOblique FMFONTDEFINE
8 0 /Times-BoldItalic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 16 Q
0 X
0 0 0 1 0 0 0 K
(Active Message Applications Pr) 125.29 639.33 T
(ogramming Interface) 341.42 639.33 T
(and Communication Subsystem Organization) 150.21 617.33 T
0 14 Q
(Alan Mainwaring and David Culler) 199.43 557.67 T
({alanm, culler}@cs.berkeley) 209.2 538.67 T
(.edu) 377.52 538.67 T
(Draft T) 236.66 519.67 T
(echnical Report) 280.86 519.67 T
(Computer Science Division) 225.12 500.67 T
(University of California at Berkeley) 199.07 481.67 T
0 12 Q
(ABSTRACT) 273.33 432 T
1 11 Q
0.39 (High-performance network hardware is advancing, with multi-gigabit link bandwidths and sub-microsec-) 72 398.67 P
0.49 (ond switch latencies. Network-interface hardware also continues to evolve, although the design space re-) 72 383.67 P
0.12 (mains lar) 72 368.67 P
0.12 (ge and diverse. One critical abstraction, a simple, portable, and general-purpose communications) 112.55 368.67 P
0.34 (interface, is required to make ef) 72 353.67 P
0.34 (fective use of these increasingly high-performance networks and their ca-) 213.42 353.67 P
-0.23 (pable interfaces. W) 72 338.67 P
-0.23 (ithout a new interface, the software overheads of existing ones will dominate communi-) 156.31 338.67 P
(cation costs, and many applications may not bene\336t from the advancements in network hardware.) 72 323.67 T
-0.26 (This document speci\336es a new active message communications interface for these networks. Its primitives,) 72 301.67 P
0.67 (in essence an instruction set for communications, map ef) 72 286.67 P
0.67 (\336ciently onto underlying network hardware and) 326.77 286.67 P
0.48 (compose ef) 72 271.67 P
0.48 (fectively into higher) 122.69 271.67 P
0.48 (-level protocols and applications. For high-performance implementations,) 212.64 271.67 P
1 (the interface enables direct application) 72 256.67 P
1 12 Q
1.09 (-n) 245.85 256.67 P
1 11 Q
1 (etwork interface interactions. In the common case, for applica-) 255.84 256.67 P
0.59 (tions exhibiting locality in communication, these interactions bypass the operating system. T) 72 241.67 P
0.59 (o enable the) 485.66 241.67 P
1.06 (construction of lar) 72 226.67 P
1.06 (ge-scale, general-purpose systems, the interface supports the protected multiprogram-) 154.57 226.67 P
0.89 (ming of many users onto \336nite network resources.This document also describes a prototype system that) 72 211.67 P
0.34 (uses the virtual-memory facilities of the Solaris operating system to implement) 72 196.67 P
2 F
0.34 ( virtual networks) 423.13 196.67 P
1 F
0.34 (that sup-) 501.46 196.67 P
-0.16 (port protected, network multiprogramming. The system caches the active communication endpoints in net-) 72 181.67 P
(work-interface memory and demand-pages them between the host and network-interface memories.) 72 166.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "i" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 45 558 58.62 R
7 X
0 0 0 1 0 0 0 K
V
1 12 Q
0 X
(i) 297 52.62 T
54 730.57 558 760.14 R
7 X
V
0 18 Q
0 X
(T) 238.33 748.14 T
(able of Contents) 248.68 748.14 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 72 558 720 R
7 X
V
0 0 0 1 0 0 0 K
0 12 Q
0 X
(Section 1.) 54 712 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(Introduction) 162 712 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(...........................................................................................) 222 712 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1) 497.83 712 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1.1) 97.2 698 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The elusive communication abstraction) 180 698 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(..........................................) 369 698 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3) 497.83 698 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1.2) 97.2 684 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A new active message interface) 180 684 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(......................................................) 333 684 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3) 497.83 684 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1.3) 97.2 670 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Notational conventions and document organization) 180 670 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.......................) 426 670 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5) 497.83 670 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(Section 2.) 54 656 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(Active Message API: Endpoints and Bundles) 162 656 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(......................................) 381 656 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5) 497.83 656 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.1) 97.2 642 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Communication endpoints) 180 642 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(..............................................................) 309 642 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6) 497.83 642 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.2) 97.2 628 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Components of communication endpoints) 180 628 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(......................................) 381 628 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(7) 497.83 628 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.3) 97.2 614 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Communication endpoint bundles) 180 614 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(..................................................) 345 614 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8) 497.83 614 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.4) 97.2 600 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Components of communication endpoint bundles) 180 600 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(..........................) 417 600 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(8) 497.83 600 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.5) 97.2 586 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Communication endpoint naming) 180 586 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(...................................................) 342 586 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9) 497.83 586 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.6) 97.2 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Communication endpoint protection) 180 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.............................................) 354 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10) 491.83 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.7) 97.2 558 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Managing endpoints names and tags) 180 558 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(............................................) 357 558 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12) 491.83 558 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(Section 3.) 54 544 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(Active Message API: Concurrency and Synchronization) 162 544 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(...................) 432 544 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12) 491.83 544 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.1) 97.2 530 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Scenario 1: one thread and one endpoint) 180 530 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(......................................) 375 530 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(14) 491.83 530 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.1.1) 97.2 516 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Explanation) 198 516 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.............................................................................) 258 516 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(14) 491.83 516 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.1.2) 97.2 502 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Implications) 198 502 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.............................................................................) 258 502 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(14) 491.83 502 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.1.3) 97.2 488 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Handler semantics) 198 488 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(...................................................................) 288 488 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(14) 491.83 488 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.2) 97.2 474 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Scenario 2: independent instances of scenario 1) 180 474 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(...........................) 408 474 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15) 491.83 474 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.2.1) 97.2 460 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Explanation) 198 460 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.............................................................................) 258 460 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15) 491.83 460 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.2.2) 97.2 446 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Implications) 198 446 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.............................................................................) 258 446 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15) 491.83 446 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.2.3) 97.2 432 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Handler semantics) 198 432 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(...................................................................) 288 432 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15) 491.83 432 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.3) 97.2 418 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Scenario 3: one thread with multiple endpoints) 180 418 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(............................) 405 418 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 491.83 418 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.3.1) 97.2 404 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Explanation) 198 404 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.............................................................................) 258 404 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 491.83 404 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.3.2) 97.2 390 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Implications) 198 390 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.............................................................................) 258 390 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 491.83 390 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.3.3) 97.2 376 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Handler semantics) 198 376 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(...................................................................) 288 376 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16) 491.83 376 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.4) 97.2 362 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Scenario 4: multiple threads with one endpoint) 180 362 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(............................) 405 362 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(17) 491.83 362 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.4.1) 97.2 348 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Explanation) 198 348 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.............................................................................) 258 348 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(17) 491.83 348 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.4.2) 97.2 334 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Handler semantics) 198 334 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(...................................................................) 288 334 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(17) 491.83 334 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(Section 4.) 54 320 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(Active Message API: Transport Operations) 162 320 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.......................................) 372 320 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(17) 491.83 320 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.1) 97.2 306 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Active message semantics) 180 306 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.............................................................) 306 306 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(18) 491.83 306 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.2) 97.2 292 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Bulk request and reply operations) 180 292 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.................................................) 342 292 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 491.83 292 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.3) 97.2 278 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Message delivery and error model) 180 278 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(................................................) 345 278 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(19) 491.83 278 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.3.1) 97.2 264 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Error model as a signal-detection experiment) 198 264 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(........................) 417 264 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(20) 491.83 264 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.3.2) 97.2 250 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Synchronous and asynchronous error detection) 198 250 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.....................) 426 250 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 491.83 250 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.4) 97.2 236 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Managing congestion at destination endpoints) 180 236 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.............................) 402 236 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(21) 491.83 236 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(Section 5.) 54 222 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(Endpoint Management with Solaris/Myrinet) 162 222 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(......................................) 375 222 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(22) 491.83 222 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.1) 97.2 208 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Solaris address space management) 180 208 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(...............................................) 348 208 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(22) 491.83 208 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.2) 97.2 194 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Managing communication endpoint segments) 180 194 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(..............................) 399 194 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(23) 491.83 194 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.3) 97.2 180 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Endpoint segment mechanisms and policies) 180 180 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.................................) 390 180 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(24) 491.83 180 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.4) 97.2 166 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Initial experiences with Solaris segment drivers) 180 166 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(..........................) 411 166 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 491.83 166 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(Section 6.) 54 152 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(Related Work) 162 152 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(......................................................................................) 231 152 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 491.83 152 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6.1) 97.2 138 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Princeton\325s SHRIMP multicomputer) 180 138 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(............................................) 357 138 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(25) 491.83 138 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6.2) 97.2 124 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The Arizona Osiris project) 180 124 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(............................................................) 309 124 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(26) 491.83 124 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6.3) 97.2 110 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Hewlett Packard\325s Hamlyn project) 180 110 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(...............................................) 348 110 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(27) 491.83 110 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6.4) 97.2 96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(SUNMOS) 180 96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(......................................................................................) 231 96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 491.83 96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6.5) 97.2 82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(NORMA IPC) 180 82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(................................................................................) 249 82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(28) 491.83 82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "i" 2
%%Page: "ii" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 72 558 720 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
1 12 Q
0 X
(6.6) 97.2 712 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Summary) 180 712 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.......................................................................................) 228 712 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 491.83 712 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(Section 7.) 54 698 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(Summary) 162 698 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.............................................................................................) 210 698 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(29) 491.83 698 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(7.1) 97.2 684 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Current status) 180 684 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(................................................................................) 249 684 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(30) 491.83 684 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(7.2) 97.2 670 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Future work) 180 670 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(...................................................................................) 240 670 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(31) 491.83 670 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(Section 8.) 54 656 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(Acknowledgments) 162 656 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(...............................................................................) 252 656 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 491.83 656 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(Section 9.) 54 642 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(References) 162 642 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(...........................................................................................) 216 642 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(32) 491.83 642 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(Appendix A) 54 628 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(Active Message API) 162 628 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(...........................................................................) 264 628 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 491.83 628 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A.1) 105.84 614 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Data types and constants) 162 614 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(....................................................................) 285 614 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(35) 491.83 614 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A.2) 105.84 600 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_Init) 162 600 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.............................................................................) 258 600 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(36) 491.83 600 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A.3) 105.84 586 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_Terminate) 162 586 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(..................................................................) 291 586 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(36) 491.83 586 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A.4) 105.84 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_RequestM) 162 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(..................................................................) 291 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(36) 491.83 572 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A.5) 105.84 558 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_RequestIM) 162 558 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.................................................................) 294 558 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 491.83 558 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A.6) 105.84 544 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_RequestXferM) 162 544 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(...........................................................) 312 544 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 491.83 544 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A.7) 105.84 530 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_RequestXferAsyncM) 162 530 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.................................................) 342 530 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(37) 491.83 530 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A.8) 105.84 516 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_ReplyM) 162 516 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(......................................................................) 279 516 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(38) 491.83 516 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A.9) 105.84 502 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_ReplyIM) 162 502 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(....................................................................) 285 502 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(38) 491.83 502 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A.10) 105.84 488 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_ReplyXferM) 162 488 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(..............................................................) 303 488 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(38) 491.83 488 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A.11) 105.84 474 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_GetXferM) 162 474 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(..................................................................) 291 474 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 491.83 474 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A.12) 105.84 460 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_Poll) 162 460 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(............................................................................) 261 460 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 491.83 460 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A.13) 105.84 446 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_MaxShort) 162 446 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(...................................................................) 288 446 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 491.83 446 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A.14) 105.84 432 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_MaxMedium) 162 432 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(..............................................................) 303 432 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(39) 491.83 432 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A.15) 105.84 418 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_MaxLong) 162 418 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(...................................................................) 288 418 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 491.83 418 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(Appendix B) 54 404 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(Endpoint and Bundle API) 162 404 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(...................................................................) 288 404 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 491.83 404 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B.1) 105.84 390 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_AllocateBundle) 162 390 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(..........................................................) 315 390 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 491.83 390 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B.2) 105.84 376 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_AllocateEndpoint) 162 376 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.......................................................) 324 376 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 491.83 376 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B.3) 105.84 362 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_Map) 162 362 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(...........................................................................) 264 362 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 491.83 362 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B.4) 105.84 348 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_MapAny) 162 348 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.....................................................................) 282 348 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 491.83 348 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B.5) 105.84 334 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_Unmap) 162 334 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.......................................................................) 276 334 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(41) 491.83 334 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B.6) 105.84 320 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_FreeEndpoint) 162 320 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.............................................................) 306 320 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(41) 491.83 320 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B.7) 105.84 306 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_FreeBundle) 162 306 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(................................................................) 297 306 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(41) 491.83 306 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B.8) 105.84 292 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_MoveEndpoint) 162 292 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(...........................................................) 312 292 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(41) 491.83 292 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B.9) 105.84 278 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_SetExpectedResources) 162 278 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(..............................................) 351 278 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(41) 491.83 278 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B.10) 105.84 264 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_SetTag) 162 264 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.......................................................................) 276 264 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(41) 491.83 264 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B.11) 105.84 250 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_GetTag) 162 250 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.......................................................................) 276 250 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 491.83 250 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B.12) 105.84 236 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_GetTranslationName) 162 236 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.................................................) 342 236 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 491.83 236 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B.13) 105.84 222 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_GetTranslationTag) 162 222 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.....................................................) 330 222 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 491.83 222 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B.14) 105.84 208 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_GetTranslationInuse) 162 208 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(..................................................) 339 208 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 491.83 208 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B.15) 105.84 194 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_MaxNumTranslations) 162 194 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(................................................) 345 194 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 491.83 194 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B.16) 105.84 180 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_GetNumTranslations) 162 180 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.................................................) 342 180 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 491.83 180 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B.17) 105.84 166 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_SetNumTranslations) 162 166 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(..................................................) 339 166 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(42) 491.83 166 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B.18) 105.84 152 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_GetSourceEndpoint) 162 152 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(...................................................) 336 152 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(43) 491.83 152 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B.19) 105.84 138 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_GetDestEndpoint) 162 138 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.......................................................) 324 138 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(43) 491.83 138 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B.20) 105.84 124 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_GetMsgTag) 162 124 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(................................................................) 297 124 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(43) 491.83 124 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B.21) 105.84 110 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_SetHandler) 162 110 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.................................................................) 294 110 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(43) 491.83 110 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B.22) 105.84 96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_SetHandlerAny) 162 96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(..........................................................) 315 96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(43) 491.83 96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B.23) 105.84 82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_GetNumHandlers) 162 82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.......................................................) 324 82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(43) 491.83 82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "ii" 3
%%Page: "iii" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 45 558 58.62 R
7 X
0 0 0 1 0 0 0 K
V
1 12 Q
0 X
(iii) 297 52.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 72 558 720 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(B.24) 105.84 712 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_SetNumHandlers) 162 712 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.......................................................) 324 712 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(43) 491.83 712 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B.25) 105.84 698 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_MaxNumHandlers) 162 698 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.....................................................) 330 698 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(44) 491.83 698 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B.26) 105.84 684 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_SetSeg) 162 684 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(........................................................................) 273 684 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(44) 491.83 684 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B.27) 105.84 670 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_GetSeg) 162 670 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(.......................................................................) 276 670 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(44) 491.83 670 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B.28) 105.84 656 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_MaxSegLength) 162 656 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(..........................................................) 315 656 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(44) 491.83 656 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B.29) 105.84 642 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_GetEventMask) 162 642 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(...........................................................) 312 642 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(44) 491.83 642 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B.30) 105.84 628 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_SetEventMask) 162 628 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(...........................................................) 312 628 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(44) 491.83 628 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(B.31) 105.84 614 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Function: AM_WaitSema) 162 614 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(..................................................................) 291 614 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(45) 491.83 614 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "iii" 4
%%Page: "iv" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 730.57 558 760.14 R
7 X
0 0 0 1 0 0 0 K
V
0 18 Q
0 X
(List of Figur) 250.16 748.14 T
(es) 346.84 748.14 T
54 45 558 58.62 R
7 X
V
1 12 Q
0 X
(iv) 297 52.62 T
0 0 0 1 0 0 0 K
(Figure  1) 72 712 T
(A common contemporary network interface organization) 144 712 T
(..........................) 420 712 T
(2) 498 712 T
(Figure  2) 72 698 T
(One possible organization of a communication subsystem) 144 698 T
(.........................) 423 698 T
(3) 498 698 T
(Figure  3) 72 684 T
(Building software using active messages) 144 684 T
(....................................................) 342 684 T
(4) 498 684 T
(Figure  4) 72 670 T
(Anatomy of an endpoint) 144 670 T
(...............................................................................) 261 670 T
(7) 498 670 T
(Figure  5) 72 656 T
(Anatomy of a bundle) 144 656 T
(....................................................................................) 246 656 T
(9) 498 656 T
(Figure  6) 72 642 T
(A single-threaded program with a single endpoint) 144 642 T
(....................................) 384 642 T
(14) 492 642 T
(Figure  7) 72 628 T
(Multi-threaded program with multiple, independent endpoints) 144 628 T
(................) 444 628 T
(15) 492 628 T
(Figure  8) 72 614 T
(A single-threaded program with multiple endpoints) 144 614 T
(.................................) 393 614 T
(16) 492 614 T
(Figure  9) 72 600 T
(Multi-threaded program with one, shared endpoint) 144 600 T
(...................................) 387 600 T
(17) 492 600 T
(Figure  10) 72 586 T
(Status constants for undeliverable messages and their descriptions) 144 586 T
(..........) 462 586 T
(19) 492 586 T
(Figure  11) 72 572 T
(Semantics of EUNREACHABLE) 144 572 T
(..............................................................) 306 572 T
(20) 492 572 T
(Figure  12) 72 558 T
(Organization and management of Solaris address spaces) 144 558 T
(..........................) 414 558 T
(23) 492 558 T
(Figure  13) 72 544 T
(The problem of endpoint caching) 144 544 T
(..............................................................) 306 544 T
(24) 492 544 T
(Figure  14) 72 530 T
(Interface data types and their descriptions) 144 530 T
(.................................................) 345 530 T
(35) 492 530 T
(Figure  15) 72 516 T
(Interface constants and their descriptions) 144 516 T
(..................................................) 342 516 T
(35) 492 516 T
(Figure  16) 72 502 T
(Function return values and their descriptions) 144 502 T
(............................................) 360 502 T
(35) 492 502 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "iv" 5
%%Page: "1" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
531.63 729 63 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(1) 63 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Introduction) 279.75 741.53 T
549 729 63 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
63 703.17 549 708 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 -208 1000 792 C
4 12 Q
0 X
0 0 0 1 0 0 0 K
(1) 63 712 T
(Introduction) 76.34 712 T
1 11 Q
1.19 (Switched network hardware is advancing, with increasing link bandwidths and decreasing switch latencies.) 63 682.83 P
0.26 (Network interface hardware is also developing, although the design space remains lar) 63 669.83 P
0.26 (ge and diverse. A grow-) 441.98 669.83 P
-0.02 (ing class of networks, such as Myrinet [9] and TNet [10], combine features of local area networks \050LANs\051 and) 63 656.83 P
0.96 (massively parallel processor \050MPPs\051 interconnects. The new networks take raw performance and scalability) 63 643.83 P
0.95 (from MPPs and add the \337exible topologies and administrative properties of LANs, allowing them to be de-) 63 630.83 P
0.54 (ployed beyond backplanes and machine rooms. These networks \336ll a technological niche between traditional) 63 617.83 P
0.12 (MPPs and LANs) 63 604.83 P
5 12 Q
0.3 (-) 140.65 604.83 P
1 11 Q
0.12 ( they tightly connect the components of a single but physically distributed system. Myrinet) 147.85 604.83 P
-0.17 (and TNet, for example, are described as) 63 591.83 P
2 F
-0.17 (campus ar) 239.86 591.83 P
-0.17 (ea) 285.41 591.83 P
1 F
-0.17 ( and) 295.79 591.83 P
2 F
-0.17 (system ar) 316.83 591.83 P
-0.17 (ea) 358.1 591.83 P
1 F
-0.17 ( networks, respectively) 368.48 591.83 P
-0.17 (, characterizations) 469.15 591.83 P
-0.08 (that emphasize their geographic scale and function. Others describe them as) 63 578.83 P
2 F
-0.08 (trusted ar) 398.8 578.83 P
-0.08 (ea) 441.4 578.83 P
1 F
-0.08 (networks and empha-) 454.45 578.83 P
(size the potential hardware and software optimizations within a single protection domain.) 63 565.83 T
-0.21 (But without low-overhead communication primitives, many applications cannot bene\336t from these advances in) 63 545.83 P
0.13 (hardware. The increasing bandwidths of network links and the decreasing latencies of network switches cause) 63 532.83 P
0.67 (software overheads to dominate communication costs. This issue has been studied in the context of message) 63 519.83 P
0.16 (passing libraries and their alternatives for MPPs [2] and in the context of TCP/IP performance for LANs [30].) 63 506.83 P
0.43 (In both of these domains, small messages are common, and software overhead determines their performance.) 63 493.83 P
0.06 (T) 63 480.83 P
0.06 (o the extent that small messages are necessary) 68.95 480.83 P
0.06 (, overhead in communication software determines network uti-) 271.8 480.83 P
-0.24 (lization and performance. For example, a TCP/IP implementation with 100 microseconds of software overhead) 63 467.83 P
0.57 (per message on a 1Gb/s network must send ~13KB messages for the data transfer time to equal the software) 63 454.83 P
0.79 (overhead. This ef) 63 441.83 P
0.79 (fect grows more severe with higher link bandwidths. Moreover) 141.04 441.83 P
0.79 (, the performance of round-) 424.59 441.83 P
0.37 (trip communication is sensitive to process scheduling: short messages bene\336t when both applications execute) 63 428.83 P
-0.11 (concurrently) 63 415.83 P
-0.11 (, and similarly) 117.88 415.83 P
-0.11 (, zero-copy transfers of lar) 180.19 415.83 P
-0.11 (ge messages bene\336t when the necessary memory resourc-) 295.92 415.83 P
(es are scheduled concurrently) 63 402.83 T
(.) 192.71 402.83 T
0.9 (As networks improve, their interfaces, resources, or) 63 382.83 P
0.9 (ganization, and integration into their host computers be-) 295.81 382.83 P
0.62 (comes increasingly important. Figure 1 shows a common, contemporary network interface or) 63 369.83 P
0.62 (ganization. The) 479.95 369.83 P
0.62 (key or) 63 356.83 P
0.62 (ganizational feature is the capacity of applications to interact directly with the network interface using) 91.22 356.83 P
-0.17 (load and store instructions, thus avoiding the increasingly expensive operating system interactions and keeping) 63 343.83 P
-0.17 (the critical, common-case paths simple and fast. The component that enables this is an embedded message pro-) 63 330.83 P
(cessor \050or controller\051 on the network interface. These processors can execute instructions from either on-board) 63 317.83 T
0.71 (or host memory) 63 304.83 P
0.71 (. T) 133.38 304.83 P
0.71 (o varying degrees, these embedded processors operate independently from their hosts, de-) 145.54 304.83 P
0.34 (pending upon their computational power) 63 291.83 P
0.34 (, memory capacities, and I/O facilities. Equipping network interfaces) 242.95 291.83 P
0.72 (with embedded processors or controllers in this fashion permits communication and computation to overlap.) 63 278.83 P
-0.12 (The Meiko CS-2 [31], Myricom LANai [9], and Fore A) 63 265.83 P
-0.12 (TM SBA-200 [32] network interfaces exhibit this or) 305.97 265.83 P
-0.12 (ga-) 534.95 265.83 P
0.63 (nization.) 63 252.83 P
1 8.8 Q
0.5 (1) 101.19 257.23 P
1 11 Q
0.63 ( The interfaces operate autonomously) 105.59 252.83 P
0.63 (, continually attending to the network and processing arriving) 272.97 252.83 P
63 123 549 141 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
64 132.94 306 132.94 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 -208 1000 792 C
1 11 Q
0 X
0 0 0 1 0 0 0 K
(1. The Intel Paragon [4] illustrates a variation where the on-board SRAM is removed and a complete i860 mi-) 63 115.67 T
(croprocessor on the main memory bus is used as a dedicated message processor) 63 103.67 T
(. The key distinctions are the) 413.1 103.67 T
(complete operating system on the message processor and that sending or receiving messages involves one or) 63 91.67 T
(more main memory bus transactions.) 63 79.67 T
FMENDPAGE
%%EndPage: "1" 6
%%Page: "2" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
80.36 729 549 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(2) 542.88 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Introduction) 279.75 741.53 T
63 729 549 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
1 11 Q
0 X
0.55 (messages. These interfaces can also delegate infrequently used functionality to the host to optimize the com-) 63 712.67 P
(mon case.) 63 699.67 T
-0.2 (The network interface hardware and \336rmware together with the host support software realize an) 63 560.53 P
2 F
-0.2 (active commu-) 484.75 560.53 P
0.43 (nication agent) 63 547.53 P
1 F
0.43 (. The network is best understood as a shared, physical resource arbitrated by these agents at its) 126.68 547.53 P
-0.11 (physical endpoints. W) 63 534.53 P
-0.11 (ithin the network, translation of message addresses, authentication, and routing is sought) 160.41 534.53 P
-0.14 (to be done) 63 521.53 P
2 F
-0.14 (quickly) 111.16 521.53 P
5 12 Q
-0.37 (-) 145.53 521.53 P
1 11 Q
-0.14 ( in tens to hundreds of machine cycles. Because the agents form a trusting and cooperative) 152.73 521.53 P
0.33 (group, they can condition network traf) 63 508.53 P
0.33 (\336c in a variety of ways. For example, they can prevent traf) 233.68 508.53 P
0.33 (\336c from one) 494.58 508.53 P
0.11 (process from deadlocking traf) 63 495.53 P
0.11 (\336c of unrelated processes. Agents can also route messages around switch or link) 194.8 495.53 P
0.11 (failures when necessary) 63 482.53 P
0.11 (, and detect and return undeliverable messages to their senders. In addition, agents can) 167.57 482.53 P
0.51 (automatically adapt and recon\336gure the network as hosts, switches, and links are added or removed from the) 63 469.53 P
-0.02 (system; network topology can change dynamically as a result of hardware errors or hardware maintenance. Fi-) 63 456.53 P
0.45 (nally) 63 443.53 P
0.45 (, agents can schedule and multiplex access of applications to the shared network, avoiding deadlock and) 84.29 443.53 P
(providing protection between independent processes.) 63 430.53 T
-0.17 (Figure 2 shows one possible or) 63 410.53 P
-0.17 (ganization of a communication subsystem. The quadrants represent the user) 198.55 410.53 P
-0.17 (, the) 530.22 410.53 P
0.76 (kernel, the network interface, and the network components. The arrows show the relationships among them.) 63 397.53 P
-0 (The kernel mediates some operations, such as managing the memory mappings for DMA transfers. The physi-) 63 384.53 P
0.27 (cal security of these emer) 63 371.53 P
0.27 (ging networks is higher than in conventional ones. Ultimately) 176.29 371.53 P
0.27 (, however) 449.35 371.53 P
0.27 (, their physi-) 492.55 371.53 P
0.95 (cal security is at worst an assumption and at best constructed with hardware and software. Several research) 63 358.53 P
0.04 (projects studied the construction of physically secure networks and distributed systems using secure coproces-) 63 345.53 P
0.1 (sors [1) 63 332.53 P
0.1 (1, 12]. Their principal conclusion is that the physical security of the network is inseparable from that of) 92.33 332.53 P
0.55 (its hosts and their operating systems. In their systems, tamper) 63 319.53 P
0.55 (-proof, physically-secure coprocessors enable a) 338.16 319.53 P
1.22 (variety of techniques for guaranteeing the authenticity of the host operating systems, for authenticating the) 63 306.53 P
0.16 (identity of remote workstations, and authenticating applications, such as remote \336le servers. The coprocessors) 63 293.53 P
1.83 (store cryptographic checksums and authentication puzzles used in zero-knowledge authentication, key-ex-) 63 280.53 P
(change, and key-agreement protocols. The keys are used to encrypting traf) 63 267.53 T
(\336c with private-key encryption.) 390.88 267.53 T
63 72 549 720 C
63 576.86 549 696 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
454.24 621.3 517.9 662.22 R
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
325.72 617.62 416.39 659.37 R
N
1 9 Q
(Embedded Processor) 333.19 646.77 T
(Network DMA Engines) 328.06 624.48 T
(Host DMA Engines) 206.79 624.68 T
(On-board SRAM) 339.93 636.18 T
1 14 Q
(Network Interface) 266.05 665.28 T
0 10 Q
(NETWORK) 459.39 638.27 T
193.09 617.51 291.99 659.52 R
N
1 9 Q
(HOST INTERF) 205.25 646.94 T
(ACE) 261.83 646.94 T
(\050I/O or Memory Bus\051) 203.92 636.1 T
426.55 637.92 415.02 641.23 426.55 644.54 426.55 641.23 4 Y
0 Z
N
442.4 644.54 453.94 641.23 442.4 637.92 442.4 641.23 4 Y
N
426.55 641.23 442.4 641.23 2 L
N
J
304.29 637.91 292.76 641.22 304.29 644.53 304.29 641.22 4 Y
N
J
314.19 644.53 325.72 641.22 314.19 637.91 314.19 641.22 4 Y
N
J
304.29 641.22 314.19 641.22 2 L
J
304.29 641.22 304.79 641.22 2 L
2 Z
N
[0.809 4.045] 0.809 I
304.79 641.22 313.69 641.22 2 L
N
J
313.69 641.22 314.19 641.22 2 L
N
J
89.6 619.67 154.47 660.6 R
N
0 10 Q
(HOST) 108.14 637.15 T
169.93 634.14 159.54 640.14 169.93 646.14 3 L
4 H
0 Z
N
178.54 646.14 188.93 640.14 178.54 634.14 3 L
N
161.54 640.14 186.93 640.14 2 L
N
173.09 605.64 434.86 677.64 R
1 H
N
63 580.17 549 598.17 R
7 X
V
4 9 Q
0 X
(Figure  1) 63 591.5 T
0 10 Q
(A common contemporary network interface organization) 108 591.5 T
J
J
63 72 549 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "2" 7
%%Page: "3" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
531.63 729 63 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(3) 63 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Introduction) 279.75 741.53 T
549 729 63 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
4 10 Q
0 X
(1.1  The elusive communication abstraction) 63 446.33 T
1 11 Q
0.16 (One critical abstraction, a simple and general-purpose communications interface, remains elusive. Such an in-) 63 423.67 P
-0.22 (terface should provide primitives that form a portable instruction set for communication. The primitives should) 63 410.67 P
-0.03 (map ef) 63 397.67 P
-0.03 (\336ciently onto lower) 93.01 397.67 P
-0.03 (-level network hardware) 178.88 397.67 P
2 F
-0.03 (and) 289.05 397.67 P
1 F
-0.03 ( compose ef) 305.55 397.67 P
-0.03 (\336ciently into higher) 358.44 397.67 P
-0.03 (-level protocols and ap-) 444.93 397.67 P
0.29 (plications. The crucial aspect of such interfaces is their integration into an operating system. T) 63 384.67 P
0.29 (o promote con-) 481.2 384.67 P
1.12 (struction of lar) 63 371.67 P
1.12 (ge-scale, general-purpose systems, they must support protected multiprogramming of a lar) 129.82 371.67 P
1.12 (ge) 538.62 371.67 P
0.39 (number of users using \336nite network resources. The communications API de\336nes the contract between appli-) 63 358.67 P
0.53 (cations and the communications subsystem. A good API not only walks the \336ne line between portability and) 63 345.67 P
0.36 (generality) 63 332.67 P
0.36 (, but also allows for specialization and optimization by implementations. T) 106.27 332.67 P
0.36 (o do so, the API\325) 438.44 332.67 P
0.36 (s primi-) 514.11 332.67 P
-0.15 (tives must be ef) 63 319.67 P
-0.15 (\336ciently implementable on the underlying hardware, with support from the kernel as necessary) 131.72 319.67 P
-0.15 (.) 546.25 319.67 P
-0.24 (The interface should also support a broad spectrum of potentially fault-tolerant or highly-available applications) 63 306.67 P
1.32 (such as \336le systems, operating systems, client/server programs, peer/peer programs, and parallel programs.) 63 293.67 P
-0.2 (And \336nally) 63 280.67 P
-0.2 (, the applications, libraries, and protocols using the primitives must bene\336t in terms of performance,) 111.89 280.67 P
0.01 (simplicity) 63 267.67 P
0.01 (, and maintainability) 106.3 267.67 P
0.01 (. Much of the current network, network interface, and workstation technology is) 196.35 267.67 P
0.51 (capable of providing at least circa 1992 MPP performance of about 15 microsecond one-way times for small) 63 254.67 P
0.99 (messages and roughly 20-50) 63 241.67 P
0.99 (MB/s bandwidths for lar) 194.51 241.67 P
0.99 (ge messages. This performance should track improve-) 305.12 241.67 P
(ments in networks, network interface, and processor technologies.) 63 228.67 T
4 10 Q
(1.2  A new active message interface) 63 204.33 T
1 11 Q
0.28 (Active messages are a proven and powerful paradigm for constructing high-performance communication pro-) 63 185.67 P
-0.21 (tocols, run-time environments, and message passing libraries on massively parallel processors. Active message) 63 172.67 P
1.07 (interfaces of the past were near) 63 159.67 P
1.07 (-misses with respect to supporting the broader application spectrum that are) 205.28 159.67 P
0.22 (now of interest. Readers unfamiliar with previous active message interfaces and systems can consult a variety) 63 146.67 P
0.39 (of references [1, 2, 3, 4, 5, 6, 7]. Given the increasing presence of high-performance networks, such as Myri-) 63 133.67 P
0.69 (net, TNet, and A) 63 120.67 P
0.69 (TM, the time is right to generalize active message technology and to bring it into the main-) 137.46 120.67 P
1.09 (stream of networked computing. T) 63 107.67 P
1.09 (o achieve this goal requires innovation in four areas: \0501\051 overhauling the) 219.03 107.67 P
-0.17 (active message naming and protection models on which higher) 63 94.67 P
-0.17 (-level and system-speci\336c models are construct-) 338.17 94.67 P
0.44 (ed, \0502\051 developing communication error and fault models to support fault-tolerant and highly-available appli-) 63 81.67 P
63 72 549 720 C
139.5 467 472.5 709 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
J
310.5 683.41 310.5 528.55 2 L
J
310.5 683.41 310.5 681.91 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
[3.058 5.096] 3.058 I
310.5 681.91 310.5 530.05 2 L
N
J
310.5 530.05 310.5 528.55 2 L
N
J
157.5 613.72 454.5 613.72 2 L
J
157.5 613.72 159 613.72 2 L
N
[3.01 5.017] 3.01 I
159 613.72 453 613.72 2 L
N
J
453 613.72 454.5 613.72 2 L
N
J
336.12 526.83 454.5 598.04 R
N
334.71 632 454.5 685.71 R
N
390.85 621.24 394 632.82 397.47 621.34 394.16 621.29 4 Y
V
397.64 608.98 394.5 597.4 391.03 608.88 394.33 608.93 4 Y
V
394.16 621.29 394.34 608.93 2 L
0 Z
N
0 10 Q
(Network Interface) 355.32 655.66 T
(Network) 376.7 559.04 T
152.82 526.83 283.5 602.6 R
2 Z
N
(Kernel Components) 175.5 512.83 T
1 F
(Network Interface) 181.65 590.21 T
(Driver) 205.11 581.57 T
(Network Interface) 181.65 568.52 T
( Segment Driver) 185.11 559.88 T
(Network Scheduling,) 175.66 542.59 T
( Management Modules) 172.05 533.23 T
154.83 630.21 282.12 684.42 R
N
(Applications) 192.92 670.96 T
(Comm. Libraries) 184.31 655.61 T
(The Communications API) 165.98 640.26 T
0 F
(User Level Components) 169.45 690.13 T
293.12 654.2 281.5 657.2 292.94 660.82 293.03 657.51 4 Y
V
323.21 661.63 334.83 658.63 323.39 655.02 323.3 658.32 4 Y
V
293.03 657.51 323.3 658.32 2 L
0 Z
N
322.47 629.38 334.05 632.51 325.89 623.71 324.18 626.55 4 Y
V
293.92 604.41 282.33 601.28 290.49 610.07 292.2 607.24 4 Y
V
324.18 626.54 292.21 607.24 2 L
N
216.63 616.16 219.94 627.69 223.24 616.16 219.94 616.16 4 Y
V
223.24 614.96 219.94 603.42 216.63 614.96 219.94 614.96 4 Y
V
219.94 616.16 219.94 614.96 2 L
N
139.5 466.33 472.5 484.33 R
7 X
V
4 9 Q
0 X
(Figure  2) 139.5 477.67 T
0 10 Q
(One possible organization of a communication subsystem) 184.5 477.67 T
J
J
63 72 549 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "3" 8
%%Page: "4" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
80.36 729 549 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(4) 542.88 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Introduction) 279.75 741.53 T
63 729 549 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
1 11 Q
0 X
-0.22 (cations, \0503\051 integrating active message operations, communication events, and threads in a simple and cohesive) 63 532.67 P
-0.16 (model, and \0504\051 supporting the protected multiprogramming of a lar) 63 519.67 P
-0.16 (ge number of users with \336nite, physical-net-) 355.32 519.67 P
0.63 (work resources. The resulting API discussed in Sections 2, 3, and 4 addresses these requirements. The inter-) 63 506.67 P
-0.25 (face is portable, and allows optimizations for systems with high degrees of trust or versatile network interfaces.) 63 493.67 P
0.19 (A key implementation issue for the new) 63 473.67 P
0.19 (, extended, active message interface is multiplexing a lar) 239.39 473.67 P
0.19 (ge number of) 489.97 473.67 P
0.42 (protected endpoint objects onto each physical network interface. Section 5 examines this problem in the con-) 63 460.67 P
1.69 (text of the Solaris operating system and Myricom network interface. Given this network interface and its) 63 447.67 P
-0.15 (128KB to 512KB of on-board SRAM, we present a prototype system that dynamically) 63 434.67 P
2 F
-0.15 (page) 444.81 434.67 P
1 F
-0.15 (s endpoint backing) 466.19 434.67 P
0.21 (storage between host and interface memory) 63 421.67 P
0.21 (. When) 254.87 421.67 P
2 F
0.21 (cached) 289.81 421.67 P
1 F
0.21 ( in the interface memory) 320.96 421.67 P
0.21 (, the memory-mapped end-) 429.23 421.67 P
-0.09 (point objects allow direct interaction between the network and applications that bypass the operating system in) 63 408.67 P
0.68 (common cases. This keeps latency-sensitive, critical paths simple and fast. The embedded processor handles) 63 395.67 P
1.27 (messages for endpoints in the network-interface memory more ef) 63 382.67 P
1.27 (\336ciently than either it or the host handles) 360.13 382.67 P
0.19 (messages for those residing in main memory) 63 369.67 P
0.19 (. The host processor assists with handling messages for uncached) 260.15 369.67 P
0.48 (endpoints. The Solaris segment drivers that manage address spaces provide all the necessary mechanisms for) 63 356.67 P
2 F
0.43 (caching) 63 343.67 P
1 F
0.43 (endpoints in the network interface\325) 101 343.67 P
0.43 (s SRAM and) 256.08 343.67 P
2 F
0.43 (demand-paging) 316.96 343.67 P
1 F
0.43 ( them between the network-interface) 386 343.67 P
-0.06 (and host memories. V) 63 330.67 P
-0.06 (irtual networks lead to several intriguing research questions. For example, what are good) 158.7 330.67 P
0.89 (endpoint cache-management and endpoint-paging policies in a general-purpose system running a mix of se-) 63 317.67 P
(quential and parallel programs?) 63 304.67 T
0.7 (T) 63 284.67 P
0.7 (o put the active message API in perspective, it is helpful to consider the layers of user and kernel software) 68.95 284.67 P
0.08 (that use it. At user) 63 271.67 P
0.08 (-level, the primitives should ef) 143.46 271.67 P
0.08 (\336ciently compose into communication intrinsics, such as bar-) 278.33 271.67 P
-0.27 (riers or parallel-pre\336x operations, as well as standard RPC, socket, and message passing libraries. In the kernel,) 63 258.67 P
-0.1 (the primitives should support emulation of Ethernet devices, as well as kernel modules, such as distributed vir-) 63 245.67 P
-0.23 (tual memory systems, distributed \336le systems, and distributed page caches. Figure 3 shows depicts several pos-) 63 232.67 P
0.15 (sible layers of communication software layered on top of the active message interface. Each layer draws upon) 63 219.67 P
0.22 (the services of any lower one, directly or indirectly) 63 206.67 P
0.22 (, as well as the communication services of the base operat-) 288.61 206.67 P
0.31 (ing system. Note that the user) 63 193.67 P
0.31 (-level communication primitives coexist with and are orthogonal to those of the) 195.12 193.67 P
(base operating system.) 63 180.67 T
0.08 (Figure 3 also shows possible layers of kernel communication software. For example, a network virtual memo-) 63 160.67 P
-0.26 (ry system or distributed \336le system can make use of any communication facilities built using an active message) 63 147.67 P
0.05 (interface, directly or indirectly) 63 134.67 P
0.05 (, as well as the standard kernel communication facilities. A common implemen-) 196.84 134.67 P
0.11 (tation strategy is to build an IEEE802.3-compliant network-interface driver for the \322fast\323 network. This driver) 63 121.67 P
0.01 (looks like a standard Ethernet device to the higher layers of the TCP/IP protocol stack but uses active message) 63 108.67 P
-0.17 (transport operations to transport data. For example, this approach allows the standard protocol stacks to use ac-) 63 95.67 P
0.2 (tive messages transparently to communicate between hosts on the fast network. Communication with external) 63 82.67 P
63 72 549 720 C
67.72 540 544.28 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(Active message interface) 96.05 588.52 T
(Communication intrinsics) 96.05 602.92 T
(User) 96.05 617.32 T
(-level RPC package) 114.73 617.32 T
(User) 96.05 631.72 T
(-level sockets package) 114.73 631.72 T
(MPI/PVM message passing libraries) 96.05 646.11 T
(Compiler run-time libraries / environments) 96.05 660.52 T
(Applications) 96.05 674.91 T
(User) 0 -270 82.95 585.67 TF
(-level comm. facilities) 0 -270 82.95 604.35 TF
86.57 685.66 89.87 697.2 93.18 685.66 89.87 685.66 4 Y
V
89.87 587.2 89.87 685.66 2 L
1 H
2 Z
N
(Communication intrinsics) 330.09 606.04 T
(IEEE 802.X compliant device or streams interfaces) 330.76 621.23 T
(Standard Internetworking protocols \050TCP) 330.76 635.64 T
(, UDP) 496.02 635.64 T
(, IP\051) 519.91 635.64 T
(Network virtual-memory and network \336le systems) 330.76 650.03 T
(Base OS comm. facilities) 0 -270 319.6 588.2 TF
322.31 686.5 325.61 698.03 328.92 686.5 325.61 686.5 4 Y
V
325.61 588.03 325.61 686.5 2 L
N
(Active message interface) 332.39 589.94 T
67.72 548 490.72 566 R
7 X
V
4 9 Q
0 X
(Figure  3) 67.72 559.33 T
0 10 Q
(Building softwar) 112.72 559.33 T
(e using active messages) 183.94 559.33 T
J
J
63 72 549 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "4" 9
%%Page: "5" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
531.63 729 63 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(5) 63 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Active Message API: Endpoints and Bundles) 210.48 741.53 T
549 729 63 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
1 11 Q
0 X
0.2 (hosts uses IP routing and gateway facilities and either traverse the fast network to a gateway or use a local in-) 63 712.67 P
0.53 (terface connected to other subnets. Another possible implementation strategy for networks with independent,) 63 699.67 P
0.94 (virtual-communication channels is to allocate a percentage of them for active message communications and) 63 686.67 P
(the remainder for TCP/IP) 63 673.67 T
(.) 173.9 673.67 T
4 10 Q
(1.3  Notational conventions and document organization) 63 649.33 T
1 11 Q
(The following conventions are used throughout the document:) 63 626.67 T
(\245) 63 606.67 T
(Functions are denoted by italicized names followed by parentheses, such as) 72 606.67 T
2 F
(AM_Poll\050\051) 406.83 606.67 T
1 F
(.) 453.88 606.67 T
(\245) 63 590.67 T
-0.2 (Compile-time constants are typeset in capitalized strings, in a small font, with an) 72 590.67 P
1 9 Q
-0.16 (AM) 427.84 590.67 P
1 11 Q
-0.2 (pre\336x \050) 444.43 590.67 P
1 9 Q
-0.16 (AM_CONST) 476.31 590.67 P
-0.16 (ANT) 524.09 590.67 P
1 11 Q
-0.2 (\051.) 542.59 590.67 P
0.16 (These constants are used and de\336ned throughout the document. A consolidated list of them appears on page) 72 577.67 P
(35.) 72 564.67 T
1.27 (The remainder of the document is or) 63 549.67 P
1.27 (ganized as follows. Section 2 discusses communication endpoints and) 231.14 549.67 P
0.61 (bundles and their associated naming and protection model. Section 3 explains the relationships among trans-) 63 536.67 P
-0.07 (port operations, active message handlers, endpoints, bundles, threads, and events. Section 4 de\336nes the seman-) 63 523.67 P
0.5 (tics of the active message transport, delivery and error handling. Section 5 presents the design of a prototype) 63 510.67 P
0.11 (system for the dynamic management of endpoints, which caches active endpoints in network-interface memo-) 63 497.67 P
0.4 (ry) 63 484.67 P
0.4 (. Section 6 presents related work on network interfaces, communication abstractions, and operating support) 71.45 484.67 P
0.14 (for high-performance communications. Section 7 presents conclusions, the current status of the prototype sys-) 63 471.67 P
0.65 (tem, and plans for future implementations. Section 8 acknowledges the many contributors to the active mes-) 63 458.67 P
1.48 (sage speci\336cation, and other noteworthy contributors. Appendix A de\336nes the Active Message API, while) 63 445.67 P
(Appendix B de\336nes the Endpoint and Bundle API.) 63 432.67 T
63 398.17 549 403 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
4 12 Q
0 X
0 0 0 1 0 0 0 K
(2  Active Message API: Endpoints and Bundles) 63 407 T
1 11 Q
-0.08 (This section begins the speci\336cation of the new active message API. It generalizes previous active message in-) 63 377.83 P
0.13 (terfaces to address the requirements and constraints of a broader spectrum of mainstream applications, includ-) 63 364.83 P
2.3 (ing client/server programs, operating systems, parallel programs, distributed servers, and parallel clients.) 63 351.83 P
0.79 (Accommodating this diverse application space requires innovations in four areas: \0501\051 naming and protection) 63 338.83 P
0.08 (models, \0502\051 error and fault models, \0503\051 integration of transport operations, communication events, and threads,) 63 325.83 P
0.44 (and \0504\051 supporting protected multiprogramming of a lar) 63 312.83 P
0.44 (ge number of users with \336nite network resources. Al-) 310.58 312.83 P
-0.16 (though many issues in\337uence the new interface, it retains the simplicity that made previous active message im-) 63 299.83 P
(plementations ef) 63 286.83 T
(\336cient.) 135.82 286.83 T
1.33 (The limitations of previous interfaces and implementations become clear when examined in the context of) 63 266.83 P
0.14 (more general applications. The naming models, for example, in previous active message interfaces were suf) 63 253.83 P
0.14 (\336-) 539.22 253.83 P
1.52 (cient only for single-program multiple-data \050SPMD\051 parallel programs. This is because all active message) 63 240.83 P
-0.22 (communication was constrained within individual parallel processes. Each member of a P-process parallel pro-) 63 227.83 P
-0.23 (gram had one network port with a unique network address between 0 and P-1. Moreover) 63 214.83 P
-0.23 (, instances of a parallel) 448.82 214.83 P
1.26 (process were mutually trusting and executed inside of a single, externally-managed protection domain. Al-) 63 201.83 P
0.48 (though simple and elegant, these implementations were incapable of supporting client/server applications, let) 63 188.83 P
(alone more general communication.) 63 175.83 T
0.41 (The error and fault models in previous interfaces were suf) 63 155.83 P
0.41 (\336cient for applications that were satis\336ed with fail-) 321.57 155.83 P
0.05 (stop semantics, meaning that any application error that caused the entire process to hang or to abort. The hosts) 63 142.83 P
0.45 (and the interconnect were assumed to be reliable but failures caused the system or system partitions to crash.) 63 129.84 P
0.44 (Though fail-stop semantics are sometimes tolerable for scienti\336c applications, they fail to support fault-toler-) 63 116.84 P
-0.25 (ant and highly-available applications. Some systems, however) 63 103.84 P
-0.25 (, provided application checkpoint and restart, but) 334.81 103.84 P
(none of the active message implementations were compatible with them.) 63 90.84 T
FMENDPAGE
%%EndPage: "5" 10
%%Page: "6" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
80.36 729 549 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(6) 542.88 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Active Message API: Endpoints and Bundles) 210.48 741.53 T
63 729 549 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
1 11 Q
0 X
0.48 (Previous active message interfaces supported only single-threaded applications, but determined programmers) 63 712.67 P
0.1 (with suf) 63 699.67 P
0.1 (\336cient knowledge of implementation details used active messages in multi-threaded applications in ad) 98.65 699.67 P
0.71 (hoc manners. Another limitation of previous systems was that asynchronous, communication-event handling) 63 686.67 P
0.78 (was unsupported or was supported using nonstandard interrupt facilities. Processes were required to poll for) 63 673.67 P
0.68 (messages on systems where message interrupts or signals were unavailable. Some systems provided special-) 63 660.67 P
-0.09 (ized, i.e., nonstandard, message interrupt facilities, which were frequently dif) 63 647.67 P
-0.09 (\336cult or expensive to use. For ex-) 401.99 647.67 P
0.14 (ample, some interfaces imposed arbitrary time limits on the execution of active message handlers or restricted) 63 634.67 P
(handler computations.) 63 621.67 T
0.25 (The new interface, fortunately) 63 601.67 P
0.25 (, is a superset of its predecessors. That is, it permits sequential and parallel pro-) 196.23 601.67 P
0.05 (cesses to create multiple communication endpoints. Endpoints bear some resemblance to conventional sockets) 63 588.67 P
0.33 (or ports, but there are important dif) 63 575.67 P
0.33 (ferences. Any endpoint can name and send messages to any endpoint sub-) 219.69 575.67 P
0.62 (ject to a protection mechanism using endpoint tags. Endpoint tags and endpoint names form capabilities that) 63 562.67 P
-0.14 (control communication among endpoints. Although hosts and the interconnect are nearly reliable,) 63 549.67 P
-0.14 (when faults) 498.12 549.67 P
0.41 (or errors do occur some active messages can become undeliverable and are returned to their senders. This al-) 63 536.67 P
0.84 (lows application-speci\336c recovery procedures to deal with returned messages. In addition, the new interface) 63 523.67 P
1.79 (supports multi-threaded applications. Asynchronous events use thread-synchronization variables and event) 63 510.67 P
(masks that select which communication events post the synchronization variables.) 63 497.67 T
1.14 (But broadening the appeal of active messages to mainstream applications and continuing high-performance) 63 477.67 P
0.68 (implementations are often con\337icting goals. T) 63 464.67 P
0.68 (o minimize this con\337ict, the new active message interface was) 268.52 464.67 P
0.34 (formulated with an eye towards how its or) 63 451.67 P
0.34 (ganization and functionality impact high-performance implementa-) 251.26 451.67 P
0.53 (tions. Although the restrictions and limitations of previous interfaces made their implementations simple and) 63 438.67 P
0.4 (ef) 63 425.67 P
0.4 (\336cient, the same restrictions and limitations prevent them from supporting the broader spectrum of applica-) 71.35 425.67 P
0.02 (tions now required. The new interface, however) 63 412.67 P
0.02 (, makes the necessary and suf) 273.46 412.67 P
0.02 (\336cient generalizations in order to) 403.49 412.67 P
-0.08 (satisfy the requirements of the new applications. Future revisions to the new interface will address changes de-) 63 399.67 P
0.4 (rived from experiences with initial implementations; then, features initially postponed and other functionality) 63 386.67 P
-0.03 (will be considered. \050Section 7.2 on page 31 discusses features and communication models currently postponed) 63 373.67 P
(and omitted from the interface.\051) 63 360.67 T
4 10 Q
(2.1  Communication endpoints) 63 336.33 T
1 11 Q
0.79 (The active message interface allows applications to communicate among objects called) 63 313.67 P
2 F
0.79 (communication end-) 458.09 313.67 P
-0 (points) 63 300.67 P
1 F
-0 (. Each endpoint contains all state associated with an independent, user or kernel network \322port.\323 The ag-) 89.89 300.67 P
0.52 (gregation of these related resources into a single object enables simple naming, protection, and management.) 63 287.67 P
0.04 (Furthermore, any two endpoints can communicate, although this is contingent upon protection and authentica-) 63 274.67 P
1.04 (tion checks. This means, among other things, that active message communication can now cross traditional) 63 261.67 P
-0.18 (protection boundaries and domains; it is no longer restricted to use among the members of individual, user) 63 248.67 P
-0.18 (-lev-) 528.23 248.67 P
1.21 (el parallel processes. T) 63 235.67 P
1.21 (wo examples show the new interface\325) 166.66 235.67 P
1.21 (s \337exibility: a kernel, \336le-system endpoint can) 337.96 235.67 P
-0.03 (communicate with a user) 63 222.67 P
-0.03 (-level, client endpoint, and an endpoint in a sequential process can communicate with) 172.98 222.67 P
(an endpoint in a parallel process.) 63 209.67 T
0.08 (Endpoint components are easily understood by their use in active message functions, which are two-phase, re-) 63 189.67 P
-0.2 (quest and reply operations between pairs of endpoints. As shown in Figure 5, an endpoint has a) 63 176.67 P
2 F
-0.2 (send pool) 481.57 176.67 P
1 F
-0.2 (, a) 523.84 176.67 P
2 F
-0.2 (r) 536.58 176.67 P
-0.2 (e-) 540.45 176.67 P
-0.11 (ceive pool) 63 163.67 P
1 F
-0.11 (, a) 107.8 163.67 P
2 F
-0.11 (handler table) 120.72 163.67 P
1 F
-0.11 (, a) 179.58 163.67 P
2 F
-0.11 (virtual-memory segment) 192.51 163.67 P
1 F
-0.11 (, a) 299.63 163.67 P
2 F
-0.11 (translation tabl) 312.55 163.67 P
1 F
-0.11 (e, and a) 380.6 163.67 P
2 F
-0.11 (tag) 416.93 163.67 P
1 F
-0.11 (. An active message is sent) 430.99 163.67 P
0.15 (from an endpoint send pool to an endpoint receive pool. It carries an index into a handler table that selects the) 63 150.67 P
-0.04 (handler function for the message. Upon receipt of a request, a request-handler function is invoked with a small) 63 137.67 P
0.75 (number of ar) 63 124.67 P
0.75 (guments; likewise, when a reply is received, the reply-handler function is invoked with a small) 121.12 124.67 P
0.37 (number of ar) 63 111.67 P
0.37 (guments. The bulk data transfer functions copy memory from a sender) 120.35 111.67 P
0.37 (\325) 434.5 111.67 P
0.37 (s virtual address space to) 437.56 111.67 P
1.41 (the receiving endpoint\325) 63 98.67 P
1.41 (s receive pool or virtual-memory segment and deliver an associated active message) 167.24 98.67 P
0.77 (when the transfer is complete. Although endpoints have globally unique names, it is convenient for applica-) 63 85.67 P
FMENDPAGE
%%EndPage: "6" 11
%%Page: "7" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
531.63 729 63 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(7) 63 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Active Message API: Endpoints and Bundles) 210.48 741.53 T
549 729 63 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
1 11 Q
0 X
-0.15 (tions to have compact, local names for remote endpoints. An endpoint\325) 63 712.67 P
-0.15 (s translation table associates small, inte-) 373.15 712.67 P
1.43 (ger indices with the names of destination endpoints and their tags. A translation-table index is a compact,) 63 699.67 P
-0.17 (relative name for a destination endpoint and its tag. Each tag is a 64-bit integer) 63 686.67 P
-0.17 (. An endpoint can send an active) 406.75 686.67 P
-0.18 (message to another endpoint if and only if the tag in the sender) 63 673.67 P
-0.18 (\325) 338.05 673.67 P
-0.18 (s translation-table entry for the destination end-) 341.11 673.67 P
-0.22 (point matches the destination endpoint\325) 63 660.67 P
-0.22 (s tag at the time the message is delivered or if the destination endpoint\325) 235.05 660.67 P
-0.22 (s) 544.72 660.67 P
(tag is a wild card \050a special value that matches all tags\051.) 63 647.67 T
4 10 Q
(2.2  Components of communication endpoints) 63 317.33 T
1 11 Q
-0.05 (Each communication endpoint has the following components, whose numbers below correspond to the ones in) 63 294.67 P
(Figure 5.) 63 281.67 T
4 9 Q
(Component #1:) 63 261.67 T
1 11 Q
(A send pool for sending messages from the endpoint.) 128.5 261.67 T
-0.16 (This is the buf) 72 245.67 P
-0.16 (fer and control state for sending messages. Send pools are not directly exposed to applications.) 134.56 245.67 P
2.24 (Because libraries or a communications system may randomly access send-pool entries, send pools are) 72 232.67 P
(\322pools\323 instead of) 72 219.67 T
1 9 Q
(FIFOs) 154.18 219.67 T
1 11 Q
(.) 177.18 219.67 T
4 9 Q
(Component #2:) 63 203.67 T
1 11 Q
(A receive pool for receiving messages into the endpoint.) 128.5 203.67 T
-0.14 (This is the buf) 72 187.67 P
-0.14 (fer and control state for receiving messages. Receive pools are not directly exposed to applica-) 134.62 187.67 P
0.5 (tions. Because libraries or a system may randomly access receive-pool entries, receive pool are \322pools\323 in-) 72 174.67 P
(stead of) 72 161.67 T
1 9 Q
(FIFOs) 109.27 161.67 T
1 11 Q
(.) 132.27 161.67 T
4 9 Q
(Component #3:) 63 145.67 T
1 11 Q
(A handler table for translating handler indices into functions.) 128.5 145.67 T
0.14 (Active messages carry indices into handler tables, a form of indirection that af) 72 129.67 P
0.14 (fords a level of protection be-) 417.83 129.67 P
-0.22 (tween senders and receivers, and eliminates the requirement that senders know) 72 116.67 P
2 F
-0.22 (a priori) 419.1 116.67 P
1 F
-0.22 ( addresses of handlers) 452.81 116.67 P
(in other processes.) 72 103.67 T
4 9 Q
(Component #4:) 63 87.67 T
1 11 Q
(A virtual-memory segment) 128.5 87.67 T
(that receives memory transfers.) 250.4 87.67 T
63 72 549 720 C
90 338 522 644 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 X
0 0 0 1 0 0 0 K
90 450 10 100.1 140.88 502.67 G
0.5 H
2 Z
0 X
90 450 10 100.1 140.88 502.67 A
6 12 Q
(Network) 0 -270 144.77 489.02 TF
153.33 384 463.11 633 18 RR
7 X
V
0 X
N
(Process) 0 -270 452.08 490.88 TF
408.98 480.54 432.17 509.14 R
5 X
V
0 X
N
408.98 520.13 432.17 548.73 R
5 X
V
0 X
N
182.53 523.49 177.34 526.49 182.53 529.49 182.53 526.49 4 Y
V
417.99 526.49 182.53 526.49 2 L
N
0 7 Q
(Bulk Data Sour) 194.66 527.91 T
(ce) 241.21 527.91 T
323.94 540.79 362.59 562.24 R
5 X
V
0 X
N
362.59 562.24 370.32 562.24 2 L
N
362.59 540.79 370.32 540.79 2 L
N
354.86 562.24 354.86 540.79 2 L
N
347.13 562.24 347.13 540.79 2 L
N
339.4 562.24 339.4 540.79 2 L
N
331.67 562.24 331.67 540.79 2 L
N
375.54 550.4 369.6 551.25 373.31 555.97 374.42 553.18 4 Y
V
415.85 569.73 374.43 553.18 2 L
N
0 9 Q
(Send Pool) 327.09 565.22 T
183.68 548.86 178.48 551.86 183.68 554.86 183.68 551.86 4 Y
V
324.22 551.86 183.68 551.86 2 L
N
0 7 Q
(Active Message Arguments) 193.23 553.94 T
277.55 565.82 308.47 601.57 R
5 X
V
0 X
N
277.55 594.42 308.47 594.42 2 L
N
277.55 587.27 308.47 587.27 2 L
N
277.55 580.11 308.47 580.11 2 L
N
277.55 572.96 308.47 572.96 2 L
N
4 F
(T) 276.12 612.43 T
(ranslation) 280.01 612.43 T
(T) 276.12 605.28 T
(able) 279.88 605.28 T
316.2 551.51 316.2 590.92 2 L
N
313.67 587.75 308.48 590.75 313.67 593.75 313.67 590.75 4 Y
V
316.53 590.75 313.67 590.75 2 L
N
(T) 321.9 586.77 T
(ranslation) 325.79 586.77 T
(T) 321.9 579.62 T
(able Index) 325.66 579.62 T
183.1 587.75 177.91 590.75 183.1 593.75 183.1 590.75 4 Y
V
277.34 590.75 183.1 590.75 2 L
N
(Route T) 179.41 597.53 T
(o Destination) 204.95 597.53 T
(Endpoint Name+T) 179.41 581.17 T
(ag) 238.6 581.17 T
286.28 469.55 309.48 498.15 R
5 X
V
0 X
N
J
408.69 508.16 309.19 497.57 2 L
J
408.69 508.16 406.95 507.98 2 L
N
[3.363 4.324] 3.363 I
406.95 507.98 310.93 497.76 2 L
N
J
310.93 497.76 309.19 497.57 2 L
N
J
408.69 481.02 309.91 469.1 2 L
J
408.69 481.02 406.95 480.81 2 L
N
[3.632 4.67] 3.632 I
406.95 480.81 311.64 469.31 2 L
N
J
311.64 469.31 309.91 469.1 2 L
N
(VM Segment) 314 481.53 T
J
192.31 451.5 193.41 451.42 194.49 451.2 195.54 450.83 196.54 450.33 197.47 449.69 198.32 448.94
 199.08 448.07 199.73 447.11 200.26 446.07 200.26 445.83 221.31 445.83 223.96 444.88 223.96 442.04 221.31 439.21
 217.8 439.21 216.04 440.15 216.04 439.21 211.65 439.21 211.65 440.15 209.01 440.15 207.25 439.21 205.49 440.15
 203.74 438.26 200.26 438.26 200.26 438.02 199.73 436.98 199.08 436.02 198.32 435.16 197.47 434.4 196.54 433.77
 195.54 433.26 194.49 432.89 193.41 432.67 192.31 432.6 191.21 432.67 190.12 432.89 189.07 433.26 188.07 433.77
 187.14 434.4 186.29 435.16 185.54 436.02 184.89 436.98 184.36 438.02 183.95 439.13 183.68 440.28 183.54 441.45
 183.54 442.64 183.68 443.82 183.95 444.97 184.36 446.07 184.89 447.11 185.54 448.07 186.29 448.94 187.14 449.69
 188.07 450.33 189.07 450.83 190.12 451.2 191.21 451.42 59 Y
3 X
V
0 X
(Endpoint T) 185.83 455.35 T
(ag) 221.87 455.35 T
J
215.7 465.71 215.7 480.01 2 L
J
215.7 465.71 215.7 466.46 2 L
N
[1.164 3.491] 1.164 I
215.7 466.46 215.7 479.26 2 L
N
J
215.7 479.26 215.7 480.01 2 L
N
J
159.05 477.01 153.86 480.01 159.05 483.01 159.05 480.01 4 Y
V
J
215.7 480.01 159.05 480.01 2 L
J
215.7 480.01 214.95 480.01 2 L
N
[1.414 4.242] 1.414 I
214.95 480.01 159.8 480.01 2 L
N
J
159.8 480.01 159.05 480.01 2 L
N
J
286.24 433.14 324.89 454.59 R
5 X
V
0 X
N
286.24 454.59 278.51 454.59 2 L
N
286.24 433.14 278.51 433.14 2 L
N
293.97 454.59 293.97 433.14 2 L
N
301.7 454.59 301.7 433.14 2 L
N
309.43 454.59 309.43 433.14 2 L
N
317.16 454.59 317.16 433.14 2 L
N
(Receive Pool) 286.14 422.31 T
J
272.36 447.26 277.55 444.26 272.36 441.26 272.36 444.26 4 Y
V
232.76 444.26 272.36 444.26 2 L
N
260.28 444.38 260.28 484.55 2 L
N
279.42 487.11 284.62 484.11 279.42 481.11 279.42 484.11 4 Y
V
260.28 484.11 279.42 484.11 2 L
N
J
280.8 430.7 280.8 416.58 2 L
J
280.8 430.7 280.8 429.95 2 L
N
[1.148 3.443] 1.148 I
280.8 429.95 280.8 417.33 2 L
N
J
280.8 417.33 280.8 416.58 2 L
N
J
149.51 414.02 144.32 417.02 149.51 420.02 149.51 417.02 4 Y
V
J
281.27 417.02 149.51 417.02 2 L
J
281.27 417.02 280.52 417.02 2 L
N
[1.497 4.492] 1.497 I
280.52 417.02 150.26 417.02 2 L
N
J
150.26 417.02 149.51 417.02 2 L
N
(\050Returned msg:) 166.27 482.86 T
(\050Returned msg: pool full or bad handler\051) 161.29 409.94 T
J
353.14 423.07 371.18 458.83 R
5 X
V
0 X
N
353.14 451.68 371.18 451.68 2 L
N
353.14 444.53 371.18 444.53 2 L
N
353.14 437.38 371.18 437.38 2 L
N
353.14 430.23 371.18 430.23 2 L
N
347.66 446.5 352.86 443.5 347.66 440.5 347.66 443.5 4 Y
V
326.13 443.5 347.66 443.5 2 L
N
(Handler) 353.81 415.63 T
(T) 353.81 408.48 T
(able) 357.57 408.48 T
338.54 443.5 338.54 462.92 2 L
N
403.02 466.36 408.21 463.36 403.02 460.36 403.02 463.36 4 Y
V
339.02 463.36 403.02 463.36 2 L
N
403.02 446.94 408.21 443.94 403.02 440.94 403.02 443.94 4 Y
V
372.9 443.94 403.02 443.94 2 L
N
(\322Send AM) 414.36 574.53 T
(to EP[3]\323) 417.99 567.38 T
338.65 432.36 342.35 443.73 345.24 432.12 341.94 432.24 4 Y
V
270 346.63 15.03 49.65 327.33 443.72 A
(Active Message Handler Index) 297.65 386.23 T
(handler) 412.27 458.67 T
(arguments) 412.27 451.52 T
(handler) 413.7 437.48 T
(function) 413.7 430.33 T
159.13 397.72 389.62 625.47 R
N
403.93 619.45 392.22 625.35 403.18 632.53 403.56 625.99 4 Y
V
3 H
303.09 360 20.76 3.97 392.23 629.32 A
4 12 Q
(\322EP\323) 416.56 622.73 T
J
345.7 442.4 345.7 417.9 2 L
J
345.7 442.4 345.7 441.65 2 L
0.5 H
N
[1.533 4.599] 1.533 I
345.7 441.65 345.7 418.65 2 L
N
J
345.7 418.65 345.7 417.9 2 L
N
J
285.75 414.46 280.56 417.46 285.75 420.46 285.75 417.46 4 Y
V
J
345.22 417.46 285.75 417.46 2 L
J
345.22 417.46 344.47 417.46 2 L
N
[1.486 4.459] 1.486 I
344.47 417.46 286.51 417.46 2 L
N
J
286.51 417.46 285.75 417.46 2 L
N
J
90 450 6.44 48.05 167.92 563.06 A
7 7 Q
(Network Message) 0 -270 171.71 531.57 TF
J
260.76 484.46 260.76 503 2 L
J
260.76 484.46 260.76 485.21 2 L
N
[1.549 4.647] 1.549 I
260.76 485.21 260.76 502.25 2 L
N
J
260.76 502.25 260.76 503 2 L
N
J
160.01 500.44 154.81 503.44 160.01 506.44 160.01 503.44 4 Y
V
J
261.23 503.44 160.01 503.44 2 L
J
261.23 503.44 260.48 503.44 2 L
N
[1.488 4.465] 1.488 I
260.48 503.44 160.76 503.44 2 L
N
J
160.76 503.44 160.01 503.44 2 L
N
0 F
(\050Returned msg: bad offset or length\051) 166.74 505.57 T
8 F
(\0501234\051) 210.79 448.52 T
J
176.4 457.72 185.49 452.47 176.4 447.22 176.4 452.47 4 Y
V
136.92 452.47 176.4 452.47 2 L
3 H
N
142.77 557.74 133.68 562.99 142.77 568.24 142.77 562.99 4 Y
V
157.75 562.99 142.77 562.99 2 L
N
4 F
( bad tag\051) 170.81 474.23 T
J
0 10 Q
(\0501\051) 339.92 532.1 T
(\0502\051) 271.74 458.28 T
(\0504\051) 270.04 490.87 T
4 F
(\0503\051) 373.16 425.71 T
(\0506\051) 211.23 433.02 T
(\0505\051) 310.95 598.62 T
189.35 396.84 198.21 391.33 187.77 391.3 188.56 394.07 4 Y
V
0.5 H
180 252.84 32.73 61.71 198.22 453.04 A
0 7 Q
(Arriving Message) 208.3 386.93 T
145.12 349 496.12 365 R
7 X
V
4 9 Q
0 X
(Figure  4) 145.12 358.33 T
0 10 Q
(Anatomy of an endpoint) 190.12 358.33 T
J
J
63 72 549 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "7" 12
%%Page: "8" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
80.36 729 549 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(8) 542.88 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Active Message API: Endpoints and Bundles) 210.48 741.53 T
63 729 549 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
1 11 Q
0 X
0.7 (Each endpoint has one application-speci\336ed, virtual-memory segment for receiving bulk transfers. Its base) 72 712.67 P
0.38 (address and byte length specify a window into the receiver) 72 699.67 P
0.38 (\325) 333.98 699.67 P
0.38 (s address space into which endpoints with valid) 337.04 699.67 P
(tags can write.) 72 686.67 T
4 9 Q
(Component #5:) 63 670.67 T
1 11 Q
(A translation table that associates indices with global-endpoint names and tags.) 128.5 670.67 T
-0.22 (The translation table is an array that associates indices with global-endpoint names and their tags. Operations) 72 654.67 P
(on table entries are atomic with respect to their use.) 72 641.67 T
4 9 Q
(Component #6:) 63 625.67 T
1 11 Q
(A tag for authenticating messages arriving at the endpoint.) 128.5 625.67 T
0.98 (T) 72 609.67 P
0.98 (ags are 64-bit integers that authenticate messages arriving at an endpoint. Applications manage tags and) 77.95 609.67 P
0.21 (may change them at any time. All implementations de\336ne special tags to accept all messages \050) 72 596.67 P
1 9 Q
0.17 (AM_ALL) 490 596.67 P
1 11 Q
0.21 (\051 and) 526.49 596.67 P
(to accept no messages \050) 72 583.67 T
1 9 Q
(AM_NONE\051.) 175.86 583.67 T
1 11 Q
0.47 (All endpoint components have default sizes and values when created. The handler and translation tables start) 63 568.67 P
1.09 (with 256 entries, but applications can dynamically resize either table as necessary) 63 555.67 P
1.09 (. All handler) 433.53 555.67 P
1.09 (-table entries) 490.79 555.67 P
0.56 (point to the) 63 542.67 P
2 F
0.56 (abort\050\051) 117.55 542.67 P
1 F
0.56 (function; all translation-table entries are marked as unused. The virtual-memory segment) 152.03 542.67 P
0.15 (base address is set to zero, and its length is zero bytes. The endpoint tag is set to) 63 529.67 P
1 9 Q
0.12 (AM_NONE) 420.64 529.67 P
1 11 Q
0.15 (in order to prevent) 467 529.67 P
(messages from being delivered until the endpoint is readied for use.) 63 516.67 T
0.62 (Preparing an endpoint for use requires initializing handler) 63 496.67 P
0.62 (-table entries, setting the endpoint tag, establishing) 321.62 496.67 P
0.3 (translation-table mappings to destination endpoints, and \050optionally\051 setting the virtual-memory segment base) 63 483.67 P
0.3 (address and length. Applications can dynamically resize the send and receive pools to re\337ect their anticipated) 63 470.67 P
0.89 (resource requirements, although the system accommodates such requests only when resources are available.) 63 457.67 P
0.19 (When they are not, it may return messages due to persistent congestion at particular endpoints. Section 4.4 on) 63 444.67 P
0.5 (page 21 provides complete details about allocating adequate endpoint resources in order to prevent messages) 63 431.67 P
(from being returned due to persistent congestion.) 63 418.67 T
4 10 Q
(2.3  Communication endpoint bundles) 63 394.33 T
1 11 Q
-0.22 (An endpoint bundle is a set of endpoints created by one process. These endpoints are treated as a single unit for) 63 371.67 P
-0.11 (communication, event management, and synchronization. Any process can create multiple endpoints and gath-) 63 358.67 P
0.51 (er related ones into endpoint) 63 345.67 P
2 F
0.51 ( bundles) 190.29 345.67 P
1 F
0.51 (. UNIX processes, for instance, can create multiple sockets and perform) 227.76 345.67 P
0.22 (operations on aggregates of them. Similarly) 63 332.67 P
0.22 (, Mach tasks can create multiple ports and or) 255.89 332.67 P
0.22 (ganize them into port) 454.53 332.67 P
0.12 (sets that share message queues. Active message programs can also create multiple endpoints, gather them into) 63 319.67 P
0.17 (endpoint bundles and succinctly perform operations on the bundles. The motivation for creating multiple end-) 63 306.67 P
0.53 (points is to avoid undesirable interactions that arise when independent software packages use a single shared) 63 293.67 P
0.64 (port. The motivation for bundles is to support the need of single-threaded programs for operations on aggre-) 63 280.67 P
0.3 (gates of endpoints. Section 3.3 shows that endpoint bundles address deadlock issues that arise when multiple,) 63 267.67 P
(independent software packages are composed in a single-threaded application.) 63 254.67 T
4 10 Q
(2.4  Components of communication endpoint bundles) 63 230.33 T
1 11 Q
0.41 (An endpoint bundle has the following components, whose numbers below correspond to the ones in Figure 5) 63 207.67 P
(on page 9.) 63 194.67 T
4 9 Q
(Component #1:) 63 174.67 T
1 11 Q
(A collection of endpoints.) 128.5 174.67 T
1.01 (At any given time, an endpoint is a member of exactly one bundle. Applications can move endpoints be-) 72 158.67 P
(tween bundles.) 72 145.67 T
4 9 Q
(Component #2:) 63 129.67 T
1 11 Q
(A) 128.5 129.67 T
2 F
(thr) 139.19 129.67 T
(ead-synchr) 151.62 129.67 T
(onization variable \050a binary semaphor) 200.09 129.67 T
(e\051.) 369.57 129.67 T
1 F
-0.11 (When any endpoint in a bundle generates an event, the thread-synchronization variable is posted. The identi-) 72 113.67 P
(ty of the speci\336c endpoint in a bundle responsible for generating an event is unavailable to the application.) 72 100.67 T
4 9 Q
(Component #3:) 63 84.67 T
1 11 Q
(An) 128.5 84.67 T
2 F
(event mask) 144.69 84.67 T
1 F
(, which is under the control of the application.) 193.26 84.67 T
FMENDPAGE
%%EndPage: "8" 13
%%Page: "9" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
531.63 729 63 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(9) 63 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Active Message API: Endpoints and Bundles) 210.48 741.53 T
549 729 63 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
1 11 Q
0 X
0.5 (The event mask selects which endpoint states or state transitions generate events and post the synchroniza-) 72 484.67 P
1.15 (tion variable. For example, the mask enables empty receive pools that becomes nonempty to generate an) 72 471.67 P
(event.) 72 458.67 T
4 9 Q
(Component #4:) 63 442.67 T
1 11 Q
(An) 128.5 442.67 T
2 F
(access mode \337ag) 144.69 442.67 T
1 F
( that indicates if concurrent use of the bundle or its endpoints is expected.) 219.23 442.67 T
0.5 (The \337ag informs a system if multiple, application threads will access the bundle or its components concur-) 72 426.67 P
0.34 (rently) 72 413.67 P
0.34 (. By default the system automatically serialize all accesses, but applications that promise serial access) 96.95 413.67 P
(can override the default.) 72 400.67 T
0.66 (All bundle components have default values at the time they are created. The event mask is set to disable the) 63 385.67 P
-0.11 (generation of all events. The access mode \337ag is set to serialize concurrent accesses to a bundle and its compo-) 63 372.67 P
0.44 (nents \050access mode is) 63 359.67 P
1 9 Q
0.36 (AM_P) 162.5 359.67 P
0.36 (AR\051) 185.67 359.67 P
1 11 Q
0.44 (. Applications can set the access mode \337ag to indicate that only sequential ac-) 201.17 359.67 P
1.26 (cesses to the bundle and its components will occur \050access mode is) 63 346.67 P
1 9 Q
1.03 (AM_SEQ\051; t) 375.08 346.67 P
1 11 Q
1.26 (he system then performs no) 422.36 346.67 P
0.94 (automatic serialization or locking. Implementations can optimize performance for sequential access, or they) 63 333.67 P
0.32 (can optimize performance by unconditionally serializing all accesses \050and ignoring the access mode \337ag alto-) 63 320.67 P
(gether\051.) 63 307.67 T
0.31 (T) 63 287.67 P
0.31 (ransport functions that send active messages, for example) 69.34 287.67 P
2 F
0.31 ( AM_Request4\050\051) 325.07 287.67 P
1 F
0.31 (, can receive and handle messages) 397.17 287.67 P
1.38 (arriving at other endpoints in the bundle containing the endpoint sending the message. Similarly) 63 274.67 P
1.38 (, transport) 503.02 274.67 P
0.76 (functions that receive active messages, for example) 63 261.67 P
2 F
0.76 (AM_Poll\050\051) 297.45 261.67 P
1 F
0.76 (, receive and handle messages arriving at any) 344.49 261.67 P
0.36 (endpoints in a speci\336ed bundle. Section 3.2 on page 15 discusses how these semantics facilitate the composi-) 63 248.67 P
(tion of software packages in single-threaded programs.) 63 235.67 T
0.23 (Each bundle has a unique event mask and synchronization variable, which is a) 63 215.67 P
2 F
0.23 (binary semaphor) 413.67 215.67 P
0.23 (e) 488.35 215.67 P
1 F
0.23 (. The bundle) 493.24 215.67 P
1.24 (is the scope of the synchronization variable and the event mask. The event mask is a bit vector that select) 63 202.67 P
-0.18 (which endpoint-state transitions generate events and post the synchronization variable. The endpoints in a bun-) 63 189.67 P
0.21 (dle share a common event mask and synchronization variable; the identity of the endpoint producing an event) 63 176.67 P
(is unavailable.) 63 163.67 T
4 10 Q
(2.5  Communication endpoint naming) 63 139.33 T
1 11 Q
0.3 (Several issues and goals in\337uence the endpoint naming model, the most important of which is to maintain in-) 63 116.67 P
0.47 (dependence between the interface and implementation-speci\336c representations of endpoint names. This sepa-) 63 103.67 P
1.99 (ration allows multiple, higher) 63 90.67 P
1.99 (-level naming systems to be constructed on top of the primitive one in the) 198.92 90.67 P
1.52 (interface. The second most important issue is that it is convenient to assume that endpoints have globally) 63 77.67 P
63 72 549 720 C
90 495 522 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 X
0 0 0 1 0 0 0 K
90 450 9.21 47.95 177.46 660.34 G
0.5 H
2 Z
0 X
90 450 9.21 47.95 177.46 660.34 A
6 12 Q
(Network) 0 -270 181.04 629.28 TF
(Process) 0 -270 435.22 612.5 TF
167.62 508 444.38 522 R
7 X
V
4 9 Q
0 X
(Figure  5) 167.62 515.33 T
0 10 Q
(Anatomy of a bundle) 212.62 515.33 T
J
J
377.41 560.42 407.35 713.15 R
N
261.31 682.81 319.36 700.92 9.05 RR
7 X
V
1 H
0 Z
0 X
N
268.68 677.45 326.73 695.55 9.05 RR
7 X
V
0 X
N
276.05 672.08 334.1 690.19 9.05 RR
7 X
V
0 X
N
283.42 666.72 341.47 684.82 9.05 RR
7 X
V
0 X
N
345.04 679.57 335.94 684.82 345.04 690.07 345.04 684.82 4 Y
V
368.31 690.07 377.41 684.82 368.31 679.57 368.31 684.82 4 Y
V
345.04 684.82 368.31 684.82 2 L
3 H
N
(Endpoints) 294.48 671.99 T
243.93 696.11 253.02 690.86 243.93 685.61 243.93 690.86 4 Y
V
195.77 685.61 186.68 690.86 195.77 696.11 195.77 690.86 4 Y
V
243.93 690.86 195.77 690.86 2 L
N
326.57 597.7 335.22 595.6 335.22 589.3 326.57 590.88 4 Y
V
0.01 H
N
336.41 593.38 336.41 588.13 333.53 588.66 333.53 586.03 338.58 584.98 338.58 592.86 6 Y
V
N
325.85 597.7 325.85 564.12 327.29 564.12 328.01 563.59 330.17 563.07 330.17 562.02 331.61 561.49
 331.61 560.44 319.36 560.44 319.36 561.49 320.8 562.02 320.8 563.07 322.24 563.59 322.96 564.12 324.41 564.12
 324.41 597.7 16 Y
V
N
90 450 1.44 1.05 325.13 599.27 G
90 450 1.44 1.05 325.13 599.27 A
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
345.04 576.97 335.94 582.22 345.04 587.47 345.04 582.22 4 Y
V
368.31 587.47 377.41 582.22 368.31 576.97 368.31 582.22 4 Y
V
345.04 582.22 368.31 582.22 2 L
3 H
N
277.9 636.54 335.94 654.64 R
0.5 H
N
(Semaphor) 282.85 642.59 T
(e) 326.55 642.59 T
277.9 606.36 335.94 624.47 R
14 X
V
0 X
N
(Event Mask) 281.23 612.41 T
345.04 643.36 335.94 648.61 345.04 653.86 345.04 648.61 4 Y
V
368.31 653.86 377.41 648.61 368.31 643.36 368.31 648.61 4 Y
V
345.04 648.61 368.31 648.61 2 L
3 H
N
345.04 613.18 335.94 618.43 345.04 623.68 345.04 618.43 4 Y
V
368.31 623.68 377.41 618.43 368.31 613.18 368.31 618.43 4 Y
V
345.04 618.43 368.31 618.43 2 L
N
244.73 546 443.75 715 18 RR
0.5 H
N
0 18 Q
(Endpoint Bundle) 0 -270 396.52 571.01 TF
251.3 690.74 260.39 685.49 251.3 680.24 251.3 685.49 4 Y
V
203.14 680.24 194.05 685.49 203.14 690.74 203.14 685.49 4 Y
V
251.3 685.49 203.14 685.49 2 L
3 H
N
258.67 685.38 267.76 680.13 258.67 674.88 258.67 680.13 4 Y
V
210.51 674.88 201.42 680.13 210.51 685.38 210.51 680.13 4 Y
V
258.67 680.13 210.51 680.13 2 L
N
266.04 680.01 275.13 674.76 266.04 669.51 266.04 674.76 4 Y
V
217.88 669.51 208.79 674.76 217.88 680.01 217.88 674.76 4 Y
V
266.04 674.76 217.88 674.76 2 L
N
0 10 Q
(\0501\051) 327.65 702.17 T
(\0502\051) 261.31 641.82 T
(\0503\051) 261.31 611.64 T
(\0504\051) 302.77 576.83 T
63 72 549 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "9" 14
%%Page: "10" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
80.36 729 549 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(10) 536.77 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Active Message API: Endpoints and Bundles) 210.48 741.53 T
63 729 549 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
1 11 Q
0 X
0.19 (unique names, while retaining their ability to locally refer to endpoints with small integer values regardless of) 63 712.67 P
0.01 (whatever higher) 63 699.67 P
0.01 (-level naming system is used. The third most important issue is that position-independent end-) 133.96 699.67 P
(point names facilitate building systems that migrate endpoints.) 63 686.67 T
-0.21 (All endpoints have globally unique names within a system, but these names are not necessarily in a form that is) 63 666.67 P
0.47 (convenient or easily manipulated. Rather than de\336ning the speci\336c representation of a global-endpoint name,) 63 653.67 P
0.73 (the interface treats global-endpoint names as an opaque type and manipulates either the named endpoint ob-) 63 640.67 P
-0.15 (jects or indices to the named endpoint objects. The endpoint-translation table accomplishes this through a level) 63 627.67 P
0.22 (of indirection. The interface speci\336cation then remains independent of external name servers and global oper-) 63 614.67 P
1.05 (ating systems, although implementations require that external agent\050s\051 exist to manage mappings of global-) 63 601.67 P
(endpoint names to physical resources.) 63 588.67 T
0.16 (Applications use the translation table to map small, integer indices to arbitrary endpoint names and tags in the) 63 568.67 P
-0.13 (system. This approach preserves the simple naming mechanism of previous active message interfaces in which) 63 555.67 P
-0.26 (a set of nodes were named with small integers from 0 to P-1. A process then maps a destination endpoint, given) 63 542.67 P
0.19 (its globally-unique name, by specifying the address of a local-endpoint object and an index into its translation) 63 529.67 P
(table. Applications can dynamically add and remove translation table mappings.) 63 516.67 T
0.32 (This model allows for the existence of multiple name managers and naming models. For example, it supports) 63 496.67 P
0.49 (group models where endpoints are members of communication groups and members are named with a group) 63 483.67 P
0.47 (name and a member number) 63 470.67 P
0.47 (. Whereas in connection models, endpoints instantiate the ends of a logical com-) 189.54 470.67 P
0.52 (munication channel and channel identi\336ers name the channel\325) 63 457.67 P
0.52 (s endpoints. The best naming model is applica-) 338.22 457.67 P
0.81 (tion- and protocol-speci\336c. For example, using groups [13, 14] to name an aggregate of N endpoints can be) 63 444.67 P
0.29 (more convenient and ef) 63 431.67 P
0.29 (\336cient than using N) 167.22 431.67 P
1 8.8 Q
0.23 (2) 254.55 436.07 P
1 11 Q
0.29 ( connection identi\336ers. Because of these sorts of issues, the inter-) 258.95 431.67 P
0.93 (face provides a primitive naming mechanism on top of which more specialized naming models can be con-) 63 418.67 P
(structed.) 63 405.67 T
1.23 (The management of each endpoint-translation table is local. However) 63 385.67 P
1.23 (, multiple applications can coordinate) 378.8 385.67 P
-0.05 (and manage their translation tables to produce familiar environments. For example, a SPMD parallel library or) 63 372.67 P
0.36 (the system function that initiates the parallel program can arrange that index) 63 359.67 P
2 F
0.36 (i) 405.19 359.67 P
1 F
0.36 ( from every endpoint uniformly) 408.25 359.67 P
-0.15 (names) 63 346.67 P
2 F
-0.15 (virtual pr) 93.71 346.67 P
-0.15 (ocessor i) 135.01 346.67 P
1 F
-0.15 (. This recreates the name space of previous active message systems. But unlike previ-) 174.28 346.67 P
0.01 (ous systems where processes had one endpoint, this interface allows the number of endpoints in the parallel li-) 63 333.67 P
2.58 (brary or software package to grow and to shrink. Adding endpoints and maintaining a uniform) 63 320.67 P
2 F
2.58 (virtual) 519.66 320.67 P
0.77 (pr) 63 307.67 P
0.77 (ocessor) 72.37 307.67 P
1 F
0.77 ( ranking is straightforward. Removing one or more endpoints, however) 105.98 307.67 P
0.77 (, can introduce gaps, which) 425.58 307.67 P
(could initiate a re-ranking of the remaining endpoints into a new) 63 294.67 T
(, contiguous-index range.) 345.8 294.67 T
0.15 (A position-independent endpoint is one that can be migrated between hosts, either with or without the process) 63 274.67 P
0.14 (that created it. Position-independence af) 63 261.67 P
0.14 (fects implementations that support process checkpoint and restart. Al-) 240.24 261.67 P
1.06 (though the translation table provides a level of name translation and indirection, the ability to migrate end-) 63 248.67 P
0.12 (points without leaving residual dependencies and the ability to checkpoint and restart processes depend on the) 63 235.67 P
0.45 (endpoint name server and how it represents global-endpoint names. For example, a name server might repre-) 63 222.67 P
0.15 (sent endpoint names as the triple {IP address, UNIX pid, Endpoint Number}. W) 63 209.67 P
0.15 (ith the support of a global op-) 417.36 209.67 P
-0.12 (erating system layer) 63 196.67 P
-0.12 (, it might represent them as {GLOBAL pid, Endpoint Number}. The former representation) 150.92 196.67 P
-0.09 (supports endpoint migration less readily because IP addresses are bound to speci\336c network interfaces of hosts) 63 183.67 P
-0.16 ([15]. The latter supports endpoint migration more readily because the endpoint names are not bound to speci\336c) 63 170.67 P
-0.16 (physical resources. Even with position-dependent names, however) 63 157.67 P
-0.16 (, the API as a whole can support process mi-) 354.28 157.67 P
(gration and checkpoint/restart.) 63 144.67 T
4 10 Q
(2.6  Communication endpoint protection) 63 120.34 T
1 11 Q
0.72 (It is desirable to have a simple protection mechanism that controls which messages can be delivered to end-) 63 97.67 P
-0.08 (points and that captures general relationships among endpoints. The mechanism should also maintain indepen-) 63 84.67 P
FMENDPAGE
%%EndPage: "10" 15
%%Page: "11" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
531.63 729 63 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(11) 63 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Active Message API: Endpoints and Bundles) 210.48 741.53 T
549 729 63 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
1 11 Q
0 X
0.54 (dence between the interface and speci\336c models that govern and enforce relationships among endpoints \050) 63 712.67 P
2 F
0.54 (e.g,) 533.11 712.67 P
1 F
1.01 (groups and connections\051. Given the assumed or enforced physical security of the network and its hosts, the) 63 699.67 P
0.28 (protection model addresses programs that inadvertently send messages to the wrong endpoints and introduces) 63 686.67 P
(a dif) 63 673.67 T
(\336cult but not insurmountable hurdle for malicious users who wish to cause havoc.) 82.66 673.67 T
1.32 (As with endpoint naming, rather than taking a speci\336c position on the allowable relationships among end-) 63 653.67 P
1.02 (points, such as legislating a group-based or a connection-based model, the interface abstracts such relation-) 63 640.67 P
2.3 (ships into tags. These tags implicitly identify sets of communicating endpoints and associate them with) 63 627.67 P
0.18 (ef) 63 614.67 P
0.18 (fectively unique integers. T) 71.35 614.67 P
0.18 (ags chosen intelligently from the 64-bit tag space \050) 192.11 614.67 P
2 F
0.18 (e.g.,) 416.6 614.67 P
1 F
0.18 (such as randomly chosen) 438.16 614.67 P
1.42 (tags\051 are very likely unique. Applications can use tags to identify aggregates of endpoints unambiguously) 63 601.67 P
1.42 (.) 546.25 601.67 P
1.04 (Therefore, tags complement the endpoint naming mechanism in two ways: they identify aggregates of end-) 63 588.67 P
0.19 (points and provide a simple message authentication model. This approach dif) 63 575.67 P
0.19 (fers from interfaces such as MPI) 404.77 575.67 P
([16, 17, 18, 19, 20] where data structures represent groups and contexts.) 63 562.67 T
0.74 (Each entry in a translation table associates its integer index with a global-endpoint name and a tag. An end-) 63 542.67 P
0.4 (point can then send an active message to another endpoint if the tag in the sender) 63 529.67 P
0.4 (\325) 425.89 529.67 P
0.4 (s translation table logically) 428.95 529.67 P
-0.21 (matches the receiving endpoint\325) 63 516.67 P
-0.21 (s tag at the time the message is delivered. There are two special values for tags:) 202.61 516.67 P
-0.28 (a) 63 503.67 P
2 F
-0.28 (never) 70.36 503.67 P
-0.28 (-match) 94.57 503.67 P
1 F
-0.28 ( one, which, as the name suggests, never matches any tag, and a) 125.12 503.67 P
2 F
-0.28 (wild car) 405.35 503.67 P
-0.28 (d) 441.03 503.67 P
1 F
-0.28 (one, which matches all) 449.01 503.67 P
0.57 (tags except the never) 63 490.67 P
0.57 (-match one. Ef) 157.05 490.67 P
0.57 (fective protection from errant messages relies on the use of a suf) 223.06 490.67 P
0.57 (\336ciently) 512.94 490.67 P
-0.23 (lar) 63 477.67 P
-0.23 (ge and sparse tag space. This makes it highly unlikely that such messages have a matching tag or that correct) 74.41 477.67 P
(tag values can be guessed. Other systems use similar authentication mechanisms [21, 22].) 63 464.67 T
0.09 (At any time, the process that created an endpoint may change its tag. For example, a process may want to pre-) 63 444.67 P
-0.24 (vent messages from a suspect peer from being delivered. The ability to change endpoint tags on demand allows) 63 431.67 P
0.3 (processes to revoke the capability of other endpoints to send them messages. From a receiver) 63 418.67 P
0.3 (\325) 477.31 418.67 P
0.3 (s point of view) 480.37 418.67 P
0.3 (,) 546.25 418.67 P
-0.27 (the change is atomic with respect to communications: once the change is made, the system will deliver messag-) 63 405.67 P
1.31 (es sent only from endpoints whose translation-table entries have the new tag; messages already in an end-) 63 392.67 P
1.14 (point\325) 63 379.67 P
1.14 (s receive pool associated with the previous tag are not returned to their senders. Endpoints with stale) 88.67 379.67 P
0.36 (translation-table entries must obtain the new tag and update their own translation-table entries before the sys-) 63 366.67 P
0.08 (tem will deliver more messages. Messages using stale translations are returned to their senders. Because send-) 63 353.67 P
3.07 (ers specify tags when creating translations, two endpoints that map a common, third endpoint cannot) 63 340.67 P
(surreptitiously obtain knowledge of each other) 63 327.67 T
(\325) 268.4 327.67 T
(s tag. Refer to Section 4.3 on page 19 for details.) 271.46 327.67 T
1.28 (Parallel libraries can coordinate the management and distribution of their tags. All endpoints in a software) 63 307.67 P
0.13 (package, for example) 63 294.67 P
2 F
0.13 (,) 157.64 294.67 P
1 F
0.13 (an independently-written software library) 163.27 294.67 P
0.13 (, can use the same tag. Each package can then) 345.93 294.67 P
1.01 (limit the scope of its communication to its own endpoints. This ability generalizes to multiple, independent) 63 281.67 P
-0.12 (software packages composed in one application. Client-server protocols can begin by having clients communi-) 63 268.67 P
0.03 (cate with a server) 63 255.67 P
0.03 (\325) 140.76 255.67 P
0.03 (s well-known endpoint, that the server marks with the wild-card tag. The server can then re-) 143.82 255.67 P
1.74 (direct clients to new endpoints with new tags to allow authenticated communications to proceed. Barring) 63 242.67 P
0.79 (independent application-level or implementation-speci\336c protection measures, the same degree of protection) 63 229.67 P
0.02 (with respect to active message communication \050between two endpoints\051 exists between two libraries within an) 63 216.67 P
(application as exists between two libraries in dif) 63 203.67 T
(ferent applications.) 275.14 203.67 T
-0.09 (As mentioned previously) 63 183.67 P
-0.09 (, because each endpoint has a private translation table, a collection of clients bound to) 172.7 183.67 P
0.05 (an) 63 170.67 P
2 F
0.05 (unpr) 76.19 170.67 P
0.05 (otected) 96.56 170.67 P
1 F
0.05 ( but well-known server endpoint with a wild card tag cannot obtain the tags of the other clients.) 128.33 170.67 P
-0.12 (However) 63 157.67 P
-0.12 (, because any client can map to any endpoint with a wild card tag, multiple clients can simultaneously) 102.88 157.67 P
0.56 (interleave writes to a server) 63 144.67 P
0.56 (\325) 187.21 144.67 P
0.56 (s endpoint memory segment and corrupt its contents. T) 190.26 144.67 P
0.56 (o cope with this, a server) 436.24 144.67 P
0.93 (can copy data from endpoint virtual-memory segments into private memory and inspect the contents before) 63 131.67 P
0.09 (proceeding. Corruption is not an issue for the medium and short \050) 63 118.67 P
2 F
0.09 (i.e.,) 351.82 118.67 P
1 F
0.09 (non-bulk transfer\051 messages because the) 370.85 118.67 P
0.22 (system passes them by value and atomically adds and removes them from send and receive pools. Still, a sus-) 63 105.67 P
0.04 (picious server can implement active message handler functions that \336rst carefully inspect their client-provided) 63 92.67 P
FMENDPAGE
%%EndPage: "11" 16
%%Page: "12" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
80.36 729 549 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(12) 536.77 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Active Message API: Concurrency and Synchronization) 187.47 741.53 T
63 729 549 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
1 11 Q
0 X
0.53 (ar) 63 712.67 P
0.53 (guments before incorporating them into its computation. And, after initial contact, servers can always redi-) 71.35 712.67 P
(rect clients to new endpoints protected with new tags for subsequent communications.) 63 699.67 T
4 10 Q
(2.7  Managing endpoints names and tags) 63 675.33 T
1 11 Q
0.08 (The new interface speci\336cation intentionally avoids any position on how an application obtains the names and) 63 652.67 P
-0.09 (tags of remote endpoints. The means by which processes obtain them are intentionally left outside the scope of) 63 639.67 P
0.13 (this speci\336cation, as are the interfaces to the endpoint name server\050s\051 and manager\050s\051. By specifying the inter-) 63 626.67 P
1.24 (face independently of speci\336c endpoint naming representations and speci\336c policies for obtaining endpoint) 63 613.67 P
0.14 (names and tags, we create a more general speci\336cation and enable a variety of name-space-management strat-) 63 600.67 P
-0.21 (egies. Many standard procedures and conventions for rendezvous apply) 63 587.67 P
-0.21 (. For example) 375.53 587.67 P
2 F
-0.21 (,) 435.9 587.67 P
1 F
-0.21 (the endpoint name space) 441.19 587.67 P
0.57 (can be embedded in a shared \336le system. Endpoint names can also be exchanged between applications using) 63 574.67 P
(previously agreed upon \336les, or using conventions such well-known endpoint names.) 63 561.67 T
-0.19 (The speci\336cation of endpoint names and tags enables interfaces to be implemented \337exibly) 63 541.67 P
-0.19 (. This is because the) 460.85 541.67 P
1.04 (speci\336cation permits send-side or receive-side handler ar) 63 528.67 P
1.04 (gument validation and message authentication. For) 319.54 528.67 P
-0.03 (send-side validation, implementations can check remote endpoint names before sending a message, and for re-) 63 515.67 P
0.47 (ceive-side validation, they can route messages to the appropriate destination network interface, which checks) 63 502.67 P
-0.22 (its destination endpoint name before delivering the message. The speci\336cation of tags permits implementations) 63 489.67 P
0.21 (to validate tags at either the sender or receiver) 63 476.67 P
0.21 (. For example, implementations can cache remote endpoint tags) 266.88 476.67 P
-0.27 (in local-endpoint translation-table entries and place the burden of checking tags on the senders, or can pass tags) 63 463.67 P
0.31 (in messages and check them at the destination before delivery) 63 450.67 P
0.31 (. This \337exibility also allows hybrid strategies in) 337.24 450.67 P
0.82 (which messages contain names and/or tags until some threshold amount of communication occurs, at which) 63 437.67 P
0.52 (time the sending endpoints cache name and tag validation results. Send-side protection and caching informa-) 63 424.67 P
-0.23 (tion in sending endpoints can optimize performance for receiver) 63 411.67 P
-0.23 (-limited systems at the cost of introducing con-) 343.18 411.67 P
1.05 (sistency issues in the presence of communication faults and exceptions. Receive-side protection models are) 63 398.67 P
0.53 (implemented more easily) 63 385.67 P
0.53 (, but can generate longer messages \050containing tags and other information\051 and bur-) 174.55 385.67 P
0.15 (den the receiver with more work. The speci\336cation allows implementations to consider these trade-of) 63 372.67 P
0.15 (fs and to) 510.81 372.67 P
(make the best choices.) 63 359.67 T
63 325.17 549 330 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
4 12 Q
0 X
0 0 0 1 0 0 0 K
(3  Active Message API: Concurrency and Synchronization) 63 334 T
1 11 Q
0.02 (This section discusses the concurrency and synchronization issues that arise when endpoints, bundles, threads,) 63 304.83 P
0.34 (and events are uni\336ed. Four scenarios illustrate the semantics of and interrelationships among active message) 63 291.83 P
-0.12 (transport operations, active message handlers, and events handling. The basic interactions between threads and) 63 278.83 P
-0.13 (endpoints cause active messages to be sent, active message handlers to be invoked, and synchronization events) 63 265.83 P
0.85 (to occur) 63 252.83 P
0.85 (. Understanding these interactions makes the ef) 98.98 252.83 P
0.85 (fective use of active messages possible so that dead-) 311.9 252.83 P
0.14 (lock-free applications, libraries, and protocols can be constructed. The four scenarios illustrate speci\336c points,) 63 239.83 P
-0.25 (such as when active message handlers execute atomically and when synchronization is required to maintain the) 63 226.83 P
(consistency of data shared between threads and handlers.) 63 213.83 T
0.97 (The interface supports both single-threaded and multi-threaded applications. Its speci\336cation enables imple-) 63 193.83 P
0.02 (mentations to exploit the performance of multi-threaded and multiprocessor environments, yet it avoids penal-) 63 180.83 P
0.87 (izing applications with unnecessary locking or synchronization costs. The active message interface does not) 63 167.83 P
0.79 (specify the interface to the threads package.) 63 154.83 P
1 8.8 Q
0.63 (2) 260.47 159.23 P
1 11 Q
0.79 ( For single-threaded applications, the interface requires support) 264.87 154.83 P
0.2 (for blocking the sole thread of computation on a binary semaphore. For multi-threaded applications, the inter-) 63 141.84 P
-0.14 (face requires support for basic thread operations and scheduling, as well as for blocking on binary semaphores.) 63 128.84 P
(The facilities in the POSIX P1003.4A/D8 subset of Solaris [23, 24] are adequate.) 63 115.84 T
-0.2 (The communication subsystem noti\336es applications of communication events by using the binary semaphores) 63 95.84 P
1 8.8 Q
-0.16 (3) 544.6 100.23 P
1 11 Q
0.8 (in endpoint bundles. This integration enables event-driven application execution using standard mechanisms) 63 82.84 P
FMENDPAGE
%%EndPage: "12" 17
%%Page: "13" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
531.63 729 63 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(13) 63 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Active Message API: Concurrency and Synchronization) 187.47 741.53 T
549 729 63 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
1 11 Q
0 X
0.46 (and programming models, by allowing threads to yield their CPUs and wait for communication events rather) 63 712.67 P
0.28 (than continuously polling. Allowing threads to block is essential to support event-driven applications, such as) 63 699.67 P
0.02 (servers. Initially) 63 686.67 P
0.02 (, in order to support event-driven applications, the interface allows threads to yield their CPUs) 133.8 686.67 P
0.88 (and block while all endpoint receive pools in a bundle are empty) 63 673.67 P
0.88 (. The endpoint bundle event mask controls) 356.42 673.67 P
0.35 (which endpoint-state transitions generate events. Then, when a state transition occurs that generates an event,) 63 660.67 P
1.24 (the system atomically posts the bundle\325) 63 647.67 P
1.24 (s binary semaphore and clears the corresponding event mask bit. If) 242.44 647.67 P
(there are threads blocked on the semaphore, then one is unblocked.) 63 634.67 T
0.89 (The endpoint naming and protection models facilitate the development of modular software where indepen-) 63 614.67 P
0.07 (dently written software packages remain correct when composed in applications. Each software package tacit-) 63 601.67 P
0.5 (ly de\336nes a domain of communication among its endpoints. Intuitively) 63 588.67 P
0.5 (, a correctly written and deadlock-free) 378.49 588.67 P
0.12 (communications package, such as a math library or a byte-stream protocol, should remain deadlock free when) 63 575.67 P
1.35 (executed concurrently in an application with other such packages, providing that all threads make forward) 63 562.67 P
1.1 (progress and consume arriving messages. W) 63 549.67 P
1.1 (riting composeable software with active messages requires that) 263.59 549.67 P
(programmers understand how the operations use endpoints and bundles.) 63 536.67 T
0.43 (Most active message operations are synchronous, that is, they block until the source storage can safely be re-) 63 516.67 P
0.63 (used. In order to avoid deadlock, a thread must not only receive requests and replies while sending requests,) 63 503.67 P
1.03 (but it must also receive replies while sending replies. These semantics prevent threads from deadlocking in) 63 490.67 P
-0.21 (common situations, for example, when two threads block while exchanging requests and replies between a pair) 63 477.67 P
0.14 (of endpoints. These semantics generalize to endpoint bundles. T) 63 464.67 P
0.14 (o avoid deadlock a thread must \0501\051 receive re-) 345.65 464.67 P
0.24 (quests and replies on any endpoint in the bundle from which it is sending a request, and \0502\051 receive replies on) 63 451.67 P
0.34 (any endpoint in the bundle from which it is sending a reply) 63 438.67 P
0.34 (. Although the implementations of the request and) 326.03 438.67 P
(reply functions take care of this, programmers must be cognizant of this behavior) 63 425.67 T
(.) 420.14 425.67 T
0.09 (The following subsections present scenarios that not only illustrate fundamental issues relating transport oper-) 63 405.67 P
1.05 (ations, active message handlers, endpoints, bundles, threads, and events, but they should also serve as tem-) 63 392.67 P
(plates for understating other scenarios.) 63 379.67 T
63 198 549 216 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
64 207.94 306 207.94 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
1 11 Q
0 X
0 0 0 1 0 0 0 K
0.71 (2. The POSIX Threads P1004.4A passed the International Standards Or) 63 190.67 P
0.71 (ganization CD balloting and become) 384.83 190.67 P
0.22 (P1004.1C. Draft 10 was submitted in June to the IEEE Standards Boards for approval in June. W) 63 178.67 P
0.22 (ith standard-) 493.48 178.67 P
-0.08 (ization of threads packages coming to fruition, perhaps binding this active message interface to this standard is) 63 166.67 P
0.49 (a reasonable way to establish a frame of reference regarding threads. W) 63 154.67 P
0.49 (ithout such a binding the relationship) 383.11 154.67 P
(between the interface and the threads system is vague.) 63 142.67 T
(3. The management, methods of presentation, and taxonomy of all the endpoint-state transitions that should) 63 127.67 T
(generate events are open research issues. For example, only receive pool state transitions currently generate) 63 115.67 T
(events. Other endpoint-state transitions are interesting, such as send pool transitions from full to not-full or) 63 103.67 T
-0.04 (not-empty to empty) 63 91.67 P
-0.04 (. It is worth considering generating events when messages arrive with bad tags, of) 148.98 91.67 P
-0.04 (fsets out-) 508.41 91.67 P
(side of virtual-memory regions, or invalid active message handler) 63 79.67 T
(-table indices.) 352.09 79.67 T
FMENDPAGE
%%EndPage: "13" 18
%%Page: "14" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
80.36 729 549 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(14) 536.77 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Active Message API: Concurrency and Synchronization) 187.47 741.53 T
63 729 549 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
4 10 Q
0 X
(3.1  Scenario 1: one thread and one endpoint) 63 713.33 T
4 9 Q
(3.1.1  Explanation) 63 532 T
1 11 Q
0.93 (This scenario formalizes previous active message systems [1, 2] in which each process has a single, logical) 63 510.17 P
1.74 (network endpoint. These previous active message systems supported single-threaded applications only \050or) 63 497.17 P
0.39 (multi-threaded applications where only one thread used active messages in an ad hoc manner\051. In part, this is) 63 484.17 P
0.52 (because these systems either lacked support for event-driven application execution [1, 3] or supported primi-) 63 471.17 P
0.18 (tive but nonstandard interrupting message facilities [2, 6]. In these systems, events were also de-coupled from) 63 458.17 P
1.47 (thread and process scheduling systems. Experience showed that message polling mechanisms alone inade-) 63 445.17 P
2.71 (quately supported server) 63 432.17 P
2.71 (-like applications and computational-intensive code. Moreover) 176.35 432.17 P
2.71 (, inserting polling) 465.65 432.17 P
0.96 (points complicated algorithms and degraded performance. Alternatives such as) 63 419.17 P
0.96 (customized, user) 421.74 419.17 P
0.96 (-level inter-) 496.42 419.17 P
(rupts made existing programming models more complicated.) 63 406.17 T
4 9 Q
(3.1.2  Implications) 63 382.5 T
1 11 Q
0.07 (These factors made the new interface explicitly support single and multi-threaded applications, abstracting the) 63 360.67 P
0.95 (single, physical network port of previous systems into more \337exible, multiple, communication endpoint ob-) 63 347.67 P
0.25 (jects, and integrating endpoint events with standard, thread-synchronization mechanisms. This in turn enables) 63 334.67 P
-0.12 (threads to block on the binary semaphore that is posted when events occur under the control of an) 63 321.67 P
2 F
-0.12 (event mask) 493.52 321.67 P
-0.12 (s.) 541.97 321.67 P
1 F
-0.17 (\050T) 63 308.67 P
-0.17 (he bundle is the scope of the semaphore and event mask.\051 Any unmasked event occurring on any endpoint in) 73.38 308.67 P
0.66 (the bundle posts the semaphore. A single thread blocked on the semaphore is unblocked and can receive the) 63 295.67 P
0.61 (waiting message by polling \050see) 63 282.67 P
2 F
0.61 (AM_poll\050\051 in) 209.93 282.67 P
1 F
0.61 (Section A.12\051.) 271.03 282.67 P
0.61 (To avoid deadlock in this scenario, threads TA) 338.85 282.67 P
(and TX must receive requests and replies while simultaneously exchanging messages.) 63 269.67 T
4 9 Q
(3.1.3  Handler semantics) 63 246 T
1 11 Q
0.09 (In this example, as in previous active message systems, handlers execute atomically with respect to other han-) 63 224.17 P
0.43 (dlers. Because of the single-threaded environment, handler functions can avoid explicitly serializing accesses) 63 211.17 P
0.27 (to objects shared with other handlers or with the main thread of computation. This is because the thread man-) 63 198.17 P
0.13 (ages critical sections simply by not calling any communication functions within the bounds of the critical sec-) 63 185.17 P
1.05 (tion \050) 63 172.17 P
2 F
1.05 (i.e.,) 87.58 172.17 P
1 F
1.05 (by not polling or sending messages\051. Consequently) 107.57 172.17 P
1.05 (, handlers remain easy to write, and it remains) 337.74 172.17 P
-0.09 (easy to share counters and data structures between handlers and the main thread of computation. A few restric-) 63 159.17 P
-0.21 (tions on handlers remain in this case: handlers cannot block, request handlers must reply exactly once to the re-) 63 146.17 P
(questing endpoint, and reply handlers cannot poll, send, or receive messages.) 63 133.17 T
63 72 549 720 C
126 558 486 710 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
441.46 647.55 M
 451.84 639.35 431.25 635.29 442.19 627.01 D
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
441.3 667.85 M
 451.68 659.65 431.09 655.59 442.03 647.3 D
N
0 8 Q
(Pr) 144 690.82 T
(ocess A) 152.3 690.82 T
(Pr) 416.92 694.66 T
(ocess X) 425.21 694.66 T
355.93 665.31 367.47 662 355.93 658.69 355.93 662 4 Y
N
259.77 662 355.93 662 2 L
N
271.01 630.23 259.48 633.54 271.01 636.84 271.01 633.54 4 Y
N
367.47 633.54 271.01 633.54 2 L
N
1 10 Q
(Request) 262.12 667.7 T
(Reply) 332.89 638.24 T
176.9 646.8 M
 187.29 638.6 166.7 634.54 177.64 626.26 D
N
176.74 667.1 M
 187.13 658.9 166.53 654.84 177.48 646.55 D
N
(TX) 446.48 628.5 T
(T) 157.09 628.84 T
(A) 162.4 628.84 T
372.83 633.54 406.63 668.09 R
7 X
V
0 X
N
(EX) 382.31 648.5 T
221.92 631.53 255.72 666.08 R
7 X
V
0 X
N
(EA) 231.4 646.48 T
434.83 651.43 440.59 649.77 434.83 648.12 434.83 649.77 4 Y
V
416.48 648.12 410.71 649.77 416.48 651.43 416.48 649.77 4 Y
V
434.83 649.77 416.48 649.77 2 L
0 Z
N
211.5 653.07 217.27 651.42 211.5 649.76 211.5 651.42 4 Y
V
193.15 649.76 187.39 651.42 193.15 653.07 193.15 651.42 4 Y
V
211.5 651.42 193.15 651.42 2 L
N
[1.511 4.532] 0 I
211.11 624.76 264.59 671.69 18 RR
2 Z
N
[1.511 4.532] 0 I
363.68 626.25 417.16 673.18 18 RR
N
J
208.97 678.66 421.49 678.66 421.49 620 208.97 620 4 Y
J
208.97 674.91 208.97 678.66 212.72 678.66 3 L
N
[7.593 6.581] 7.593 I
212.72 678.66 417.73 678.66 2 L
N
J
417.73 678.66 421.49 678.66 421.49 674.91 3 L
N
[7.912 6.857] 7.912 I
421.49 674.91 421.49 623.75 2 L
N
J
421.49 623.75 421.49 620 417.74 620 3 L
N
[7.593 6.581] 7.593 I
417.74 620 212.72 620 2 L
N
J
212.72 620 208.97 620 208.97 623.75 3 L
N
[7.912 6.857] 7.912 I
208.97 623.75 208.97 674.91 2 L
N
J
4 9 Q
(Some software package) 252.46 681.12 T
126 584 486 602 R
7 X
V
0 X
(Figure  6) 126 595.33 T
0 10 Q
(A single-thr) 171 595.33 T
(eaded pr) 221.65 595.33 T
(ogram with a single endpoint) 258.97 595.33 T
J
J
126 558 484.33 583.33 R
7 X
V
3 F
0 X
1.71 (Rectangles with dashed outlines denote software packages, ovals with dotted) 126 576.67 P
(outlines represent endpoint bundles, and squares are communication endpoints.) 126 564.67 T
63 72 549 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "14" 19
%%Page: "15" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
531.63 729 63 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(15) 63 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Active Message API: Concurrency and Synchronization) 187.47 741.53 T
549 729 63 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
4 10 Q
0 X
(3.2  Scenario 2: independent instances of scenario 1) 63 713.33 T
4 9 Q
(3.2.1  Explanation) 63 486.33 T
1 11 Q
0.96 (This example illustrates two independent and concurrent instances of the \336rst scenario: two processes, each) 63 464.5 P
0.74 (composed of two, independent software packages, each independently written, and each with one thread per) 63 451.5 P
0.52 (endpoint. Providing that all threads are eventually scheduled and each thread services its associated endpoint) 63 438.5 P
0.05 (then communication remains deadlock-free. W) 63 425.5 P
0.05 (ithin each process, however) 269.57 425.5 P
0.05 (, other dependencies among threads) 391.48 425.5 P
-0.15 (can exist and produce deadlock independent of communication structures. But such issues always exist and are) 63 412.5 P
(outside the scope of the interface.) 63 399.5 T
4 9 Q
(3.2.2  Implications) 63 375.83 T
1 11 Q
0.66 (This example shows the need for multiple, distinct, synchronization variables in order to direct events to the) 63 354 P
0.27 (appropriate threads) 63 341 P
2 F
0.27 (.) 147.88 341 P
1 F
0.27 (In process A, threads T) 153.64 341 P
0.27 (A and TB can restrict their event handling to their respective bun-) 256.16 341 P
1.13 (dles, lar) 63 328 P
1.13 (gely because judicious use of endpoint tags allows packages to contain their messages among their) 98.76 328 P
0.42 (endpoints. For example, endpoints in a package could have the same tag or a distribution of tags known only) 63 315 P
0.04 (within the package. Each endpoint has a distinct handler table and virtual-memory segment managed indepen-) 63 302 P
0.13 (dently) 63 289 P
0.13 (. Hence, the collection of endpoints contained in a package de\336ne a \322context\323 for performing communi-) 89.79 289 P
(cation independently from other packages.) 63 276 T
4 9 Q
(3.2.3  Handler semantics) 63 252.33 T
1 11 Q
-0.2 (Because this example consists of multiple, independent instances of the \336rst scenario, similar restrictions apply) 63 230.5 P
0.34 (to handler functions. For instance, providing that the same handler is not registered in multiple endpoints, ac-) 63 217.5 P
0.15 (tive message handlers remain atomic relative to the other handlers in each bundle as well as the thread associ-) 63 204.5 P
4.96 (ated with each bundle. Again, providing that the packages are independent, threads can perform) 63 191.5 P
(communication operations and execute handlers concurrently without synchronization.) 63 178.5 T
0.11 (If either the threads or the active message handlers within a process share data structures, then steps) 63 158.5 P
0.11 (should be) 506.42 158.5 P
1.03 (taken to synchronize accesses to those structures. Note that it is permissible for request handlers associated) 63 145.5 P
-0.12 (with one bundle to call functions that send requests using endpoints in some other bundle, so long as cyclic de-) 63 132.5 P
0.06 (pendencies among all bundles involved are avoided. This prevents nesting of handlers and nonatomic, handler) 63 119.5 P
-0.27 (invocation with respect to the handlers of any particular endpoint. If request handlers follow this restriction and) 63 106.5 P
1.41 (nonatomic, handler function execution is anticipated, then the system can deliver all messages and remain) 63 93.5 P
(deadlock free.) 63 80.5 T
63 72 549 720 C
126 512.33 486 710 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
434.73 662.74 M
 444.72 656.22 424.91 653 435.43 646.41 D
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
434.57 678.87 M
 444.56 672.35 424.75 669.13 435.28 662.54 D
N
0 8 Q
(Pr) 144 695.74 T
(ocess A) 152.3 695.74 T
(Pr) 422.63 695.74 T
(ocess X) 430.93 695.74 T
347.45 676.52 358.98 673.22 347.45 669.91 347.45 673.22 4 Y
N
255.38 673.22 347.45 673.22 2 L
N
266.63 647.29 255.09 650.6 266.63 653.91 266.63 650.6 4 Y
N
358.98 650.6 266.63 650.6 2 L
N
1 10 Q
(Request) 265.66 676.42 T
(Reply) 325.72 653.86 T
(TX) 439.56 647.12 T
364.15 650.6 396.66 678.06 R
7 X
V
0 X
N
(EX) 373.74 660.9 T
219.85 650.11 252.36 677.57 R
7 X
V
0 X
N
(EA) 229.44 660.41 T
434.9 607.38 M
 444.89 600.87 425.08 597.64 435.61 591.06 D
N
434.74 623.51 M
 444.74 616.99 424.92 613.77 435.45 607.18 D
N
345.9 597.88 357.44 594.57 345.9 591.26 345.9 594.57 4 Y
N
253.83 594.57 345.9 594.57 2 L
N
264.22 617.51 252.68 620.82 264.22 624.12 264.22 620.82 4 Y
N
356.58 620.82 264.22 620.82 2 L
N
(Reply) 262.25 596.64 T
(Request) 316.43 625.26 T
178.41 608.69 M
 188.4 602.17 168.59 598.95 179.11 592.36 D
N
177.39 626.27 M
 187.38 619.75 167.57 616.53 178.1 609.95 D
N
(TY) 439.73 591.76 T
(TB) 158.49 595.4 T
362.62 596.35 395.14 623.81 R
7 X
V
0 X
N
(EY) 372.21 606.65 T
216.55 596.18 249.07 623.65 R
7 X
V
0 X
N
(EB) 226.42 606.49 T
424.7 665.6 430.47 663.95 424.7 662.3 424.7 663.95 4 Y
V
407.49 662.3 401.72 663.95 407.49 665.6 407.49 663.95 4 Y
V
424.7 663.95 407.49 663.95 2 L
0 Z
N
212.43 666.18 218.2 664.53 212.43 662.88 212.43 664.53 4 Y
V
195.22 662.88 189.45 664.53 195.22 666.18 195.22 664.53 4 Y
V
212.43 664.53 195.22 664.53 2 L
N
208.3 611.55 214.07 609.9 208.3 608.25 208.3 609.9 4 Y
V
191.09 608.25 185.32 609.9 191.09 611.55 191.09 609.9 4 Y
V
208.3 609.9 191.09 609.9 2 L
N
424.36 612.86 430.12 611.21 424.36 609.55 424.36 611.21 4 Y
V
407.15 609.55 401.38 611.21 407.15 612.86 407.15 611.21 4 Y
V
424.36 611.21 407.15 611.21 2 L
N
179.1 664.05 M
 189.09 657.53 169.27 654.31 179.8 647.72 D
2 Z
N
178.94 680.18 M
 188.93 673.66 169.12 670.43 179.65 663.85 D
N
(T) 156.01 649.75 T
(A) 161.32 649.75 T
J
198.79 634.1 414.13 634.1 414.13 587.48 198.79 587.48 4 Y
J
198.79 630.35 198.79 634.1 202.54 634.1 3 L
N
[7.698 6.671] 7.698 I
202.54 634.1 410.38 634.1 2 L
N
J
410.38 634.1 414.13 634.1 414.13 630.35 3 L
N
[8.503 7.37] 8.503 I
414.13 630.35 414.13 591.23 2 L
N
J
414.13 591.23 414.13 587.48 410.38 587.48 3 L
N
[7.698 6.671] 7.698 I
410.38 587.48 202.54 587.48 2 L
N
J
202.54 587.48 198.79 587.48 198.79 591.23 3 L
N
[8.503 7.37] 8.503 I
198.79 591.23 198.79 630.35 2 L
N
J
198.39 687.83 413.73 687.83 413.73 641.22 198.39 641.22 4 Y
J
198.39 684.08 198.39 687.83 202.14 687.83 3 L
N
[7.698 6.671] 7.698 I
202.14 687.83 409.98 687.83 2 L
N
J
409.98 687.83 413.73 687.83 413.73 684.08 3 L
N
[8.503 7.37] 8.503 I
413.73 684.08 413.73 644.97 2 L
N
J
413.73 644.97 413.73 641.22 409.98 641.22 3 L
N
[7.698 6.671] 7.698 I
409.98 641.22 202.14 641.22 2 L
N
J
202.14 641.22 198.39 641.22 198.39 644.97 3 L
N
[8.503 7.37] 8.503 I
198.39 644.97 198.39 684.08 2 L
N
J
(T) 290.06 689.12 T
(op Package) 295.47 689.12 T
(Bottom Package) 282.76 577.25 T
[1.488 4.463] 0 I
208.61 644.16 262.79 683.15 18 RR
N
[1.513 4.54] 0 I
351.7 646.2 405.88 683.49 18 RR
N
[1.488 4.463] 0 I
205.8 591.45 259.98 630.43 18 RR
N
[1.488 4.463] 0 I
352.9 590.94 407.09 629.93 18 RR
N
J
126 535 486 557 R
7 X
V
4 9 Q
0 X
(Figure  7) 126 550.33 T
0 10 Q
(Multi-thr) 171 550.33 T
(eaded pr) 211.37 550.33 T
(ogram with multiple, independent endpoints) 248.69 550.33 T
J
J
126 513.17 486 534.5 R
7 X
V
3 F
0 X
1.89 (Rectangles with dashed outlines denote software packages, ovals with dotted) 126 527.83 P
(outlines represent endpoint bundles, and squares are communication endpoints.) 126 515.83 T
63 72 549 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "15" 20
%%Page: "16" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
80.36 729 549 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(16) 536.77 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Active Message API: Concurrency and Synchronization) 187.47 741.53 T
63 729 549 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
4 10 Q
0 X
(3.3  Scenario 3: one thread with multiple endpoints) 63 713.33 T
4 9 Q
(3.3.1  Explanation) 63 467.67 T
1 11 Q
-0.08 (This case shows a single-threaded application with multiple, independent software packages) 63 445.83 P
5 12 Q
-0.21 (-) 470.86 445.83 P
1 11 Q
-0.08 ( instances of the) 478.06 445.83 P
-0.03 (MPI and Split-C libraries. If thread T) 63 432.83 P
-0.03 (A) 226.03 432.83 P
-0.03 (blocks sending a Split-C request from EA to EX, and thread TX blocks) 236.15 432.83 P
0.35 (sending an MPI request from EY to EB, then deadlock results unless T) 63 419.83 P
0.35 (A handles requests at EB) 378.24 419.83 P
0.35 (and TX han-) 492.71 419.83 P
0.82 (dles requests at EX. In general, to prevent deadlock when independent software modules are composed in a) 63 406.83 P
-0.25 (single-threaded process, active message operations must handle messages in) 63 393.83 P
2 F
-0.25 (endpoint bundles) 399.28 393.83 P
1 F
-0.25 (. This is the orig-) 474.51 393.83 P
(inal motivation for the abstraction of endpoint bundles.) 63 380.83 T
4 9 Q
(3.3.2  Implications) 63 357.17 T
1 11 Q
1.08 (Unlike the example in Section 3.3.1, where there is a one-to-one correspondence between threads and end-) 63 335.33 P
0.24 (points, in this case thread TX handles events from both endpoints EX and EY) 63 322.33 P
0.24 (. Hence, bundle synchronization) 406.23 322.33 P
1.57 (variables cannot be associated one-to-one with endpoints. This scenario also shows that multiple software) 63 309.33 P
0.15 (packages can be composed in a single-threaded application and retain much of their independence. This is be-) 63 296.33 P
0.23 (cause each package has its own endpoints and each endpoint has a distinct handler table, virtual-memory seg-) 63 283.33 P
1.28 (ment, and tag. A package can then use tags to contain its messages within its endpoints and to prevent its) 63 270.33 P
(messages from straying into other endpoints and packages.) 63 257.33 T
0.16 (Although the two packages) 63 237.33 P
2 F
0.16 (should) 186.44 237.33 P
1 F
0.16 ( be written independently and without knowledge of each other) 215.78 237.33 P
0.16 (, composing) 495.06 237.33 P
0.5 (them in a single-threaded application creates the possibility of cyclic communication dependencies. T) 63 224.33 P
0.5 (o break) 515.82 224.33 P
-0.15 (such cycles, active message operations on an endpoint handle messages on all endpoints in the same bundle. In) 63 211.33 P
0.07 (this way) 63 198.33 P
0.07 (, multiple packages can add their endpoints to a common bundle and know that their messages will be) 99.32 198.33 P
(handled.) 63 185.33 T
4 9 Q
(3.3.3  Handler semantics) 63 161.67 T
1 11 Q
(The same restrictions on handlers from scenario #1 apply in this scenario as well.) 63 139.83 T
63 72 549 720 C
126 493.67 486 710 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
445.72 623.24 M
 455.51 617.27 436.1 614.32 446.41 608.29 D
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
445.57 638 M
 455.36 632.04 435.95 629.09 446.26 623.06 D
N
0 8 Q
(Pr) 146.86 687.98 T
(ocess A) 155.15 687.98 T
(Pr) 419.75 687.98 T
(ocess X) 428.05 687.98 T
345.88 670.83 357.42 667.52 345.88 664.21 345.88 667.52 4 Y
N
255.94 667.52 345.88 667.52 2 L
N
267.2 643.51 255.66 646.82 267.2 650.12 267.2 646.82 4 Y
N
357.42 646.82 267.2 646.82 2 L
N
1 10 Q
(Request) 258.15 671.03 T
(Reply) 324.84 649.61 T
162.67 624.02 M
 172.45 618.05 153.05 615.1 163.36 609.07 D
N
162.52 638.78 M
 172.3 632.82 152.9 629.86 163.21 623.84 D
N
(TX) 450.46 608.74 T
(T) 144 610.32 T
(A) 149.31 610.32 T
347.73 585.53 359.27 582.22 347.73 578.92 347.73 582.22 4 Y
N
257.8 582.22 347.73 582.22 2 L
N
268.21 602.95 256.67 606.26 268.21 609.56 268.21 606.26 4 Y
N
358.43 606.26 268.21 606.26 2 L
N
(Reply) 259.16 584.7 T
(Request) 319.11 610.12 T
361.95 638.41 408.95 674.18 R
7 X
V
0 X
N
(EX) 378.79 653.15 T
203.58 574.83 250.59 610.61 R
7 X
V
0 X
N
(EB) 220.7 588.84 T
202.74 638.41 249.74 674.18 R
7 X
V
0 X
N
(EA) 218.6 653.19 T
361.19 575.12 408.19 610.9 R
7 X
V
0 X
N
(EY) 378.03 589.4 T
432.67 645.67 436.91 641.43 431.07 642.77 431.87 644.22 4 Y
V
417.08 650.51 412.83 654.75 418.68 653.41 417.88 651.96 4 Y
V
431.87 644.22 417.88 651.96 2 L
0 Z
N
193.79 654.22 199.68 655.39 195.31 651.28 194.55 652.75 4 Y
V
178.44 642.6 172.55 641.43 176.92 645.54 177.68 644.07 4 Y
V
194.55 652.75 177.68 644.07 2 L
N
195.73 594.89 200.55 591.31 194.57 591.8 195.15 593.34 4 Y
V
177.37 598.28 172.55 601.86 178.53 601.38 177.95 599.83 4 Y
V
195.15 593.34 177.95 599.83 2 L
N
434.91 601.71 440.84 602.64 436.3 598.71 435.61 600.21 4 Y
V
420.73 591.49 414.8 590.56 419.34 594.49 420.04 592.99 4 Y
V
435.62 600.21 420.04 592.98 2 L
N
J
184.35 682.55 425.12 682.55 425.12 628.24 184.35 628.24 4 Y
J
184.35 678.8 184.35 682.55 188.1 682.55 3 L
2 Z
N
[7.59 6.578] 7.59 I
188.1 682.55 421.37 682.55 2 L
N
J
421.37 682.55 425.12 682.55 425.12 678.8 3 L
N
[7.238 6.273] 7.238 I
425.12 678.8 425.12 631.99 2 L
N
J
425.12 631.99 425.12 628.24 421.37 628.24 3 L
N
[7.59 6.578] 7.59 I
421.37 628.24 188.1 628.24 2 L
N
J
188.1 628.24 184.35 628.24 184.35 631.99 3 L
N
[7.238 6.273] 7.238 I
184.35 631.99 184.35 678.8 2 L
N
J
183.95 620.79 424.73 620.79 424.73 566.48 183.95 566.48 4 Y
J
183.95 617.04 183.95 620.79 187.7 620.79 3 L
N
[7.59 6.578] 7.59 I
187.7 620.79 420.98 620.79 2 L
N
J
420.98 620.79 424.73 620.79 424.73 617.04 3 L
N
[7.238 6.273] 7.238 I
424.73 617.04 424.73 570.23 2 L
N
J
424.73 570.23 424.73 566.48 420.98 566.48 3 L
N
[7.59 6.578] 7.59 I
420.98 566.48 187.71 566.48 2 L
N
J
187.71 566.48 183.95 566.48 183.95 570.23 3 L
N
[7.238 6.273] 7.238 I
183.95 570.23 183.95 617.04 2 L
N
(T) 265.92 685.49 T
(op Package: Split-C) 271.33 685.49 T
(Bottom Package: MPI) 261.99 556.7 T
[1.499 4.496] 0 I
196.14 569.03 256.09 680.75 18 RR
N
[1.491 4.474] 0 I
356.33 569.03 416.28 679.97 18 RR
N
J
126 519 486 537 R
7 X
V
4 9 Q
0 X
(Figure  8) 126 530.33 T
0 10 Q
(A single-thr) 171 530.33 T
(eaded pr) 221.65 530.33 T
(ogram with multiple endpoints) 258.97 530.33 T
J
J
126.83 494.5 486.83 516.67 R
7 X
V
3 F
0 X
1.89 (Rectangles with dashed outlines denote software packages, ovals with dotted) 126.83 510 P
(outlines represent endpoint bundles, and squares are communication endpoints.) 126.83 498 T
63 72 549 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "16" 21
%%Page: "17" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
531.63 729 63 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(17) 63 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Active Message API: T) 214.97 741.53 T
(ransport Operations) 310.51 741.53 T
549 729 63 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
4 10 Q
0 X
(3.4  Scenario 4: multiple threads with one endpoint) 63 713.33 T
4 9 Q
(3.4.1  Explanation) 63 524.67 T
1 11 Q
0.75 (This example shows multiple threads in each process sharing a single endpoint in one package. W) 63 502.83 P
0.75 (ithin each) 505.17 502.83 P
0.12 (process, there are two basic strategies. Threads can synchronize their operations upon the shared endpoint and) 63 489.83 P
-0.05 (bundle using mutex locks of their own creation and management. If this is done, the rules and regulations gov-) 63 476.83 P
-0.15 (erning handlers from scenario #1 continue to apply) 63 463.83 P
-0.15 (. Otherwise, multiple threads can perform concurrent opera-) 285.8 463.83 P
0.5 (tions upon the endpoint and bundle. The system guarantees that messages are atomically added and removed) 63 450.83 P
0.82 (from send and receive pools and that handlers are executed with correct ar) 63 437.83 P
0.82 (guments. However) 399.44 437.83 P
0.82 (, handlers may) 482.91 437.83 P
(not be executed atomically with respect to other handlers.) 63 424.83 T
4 9 Q
(3.4.2  Handler semantics) 63 401.17 T
1 11 Q
-0 (If multiple threads operate concurrently on a shared endpoint, then the endpoint\325) 63 379.33 P
-0 (s handlers may no longer exe-) 416.74 379.33 P
1.31 (cute atomically with respect to the endpoint\325) 63 366.33 P
1.31 (s other handlers. T) 266.39 366.33 P
1.31 (o avoid confusion) 351.41 366.33 P
2 F
1.31 (in this case) 436.91 366.33 P
1 F
1.31 (, applications) 489.03 366.33 P
1.36 (should synchronize accesses to objects that are shared among handlers and threads. While handlers are no) 63 353.33 P
0.04 (longer atomic and non-preemptable, multiple threads can handle incoming active messages in parallel with in-) 63 340.33 P
1.73 (creased bandwidth. For example, multiple-client processes could send requests to a single, multi-threaded) 63 327.33 P
0.03 (server) 63 314.33 P
0.03 (. The number of threads in the server can be dynamically adjusted to accommodate dif) 89.27 314.33 P
0.03 (ferent client-com-) 469.86 314.33 P
0.25 (munication request rates and loads. If each client request can be handled independently of the others, then the) 63 301.33 P
0.76 (functions can execute concurrently) 63 288.33 P
0.76 (. If, on the other hand, handling each request requires state shared among) 218.21 288.33 P
(the other threads or the handlers involved, then serializing those accesses may be required.) 63 275.33 T
63 240.83 549 245.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
4 12 Q
0 X
0 0 0 1 0 0 0 K
(4  Active Message API: T) 63 249.67 T
(ransport Operations) 203.72 249.67 T
1 11 Q
1.04 (The interface provides point-to-point, active message operations between pairs of endpoints that are cast as) 63 220.5 P
0.43 (matching request-and-reply message pairs. The) 63 207.5 P
2 F
0.43 (r) 277.76 207.5 P
0.43 (equesting endpoint) 281.64 207.5 P
1 F
0.43 ( is the one that sends the request, and the) 365.48 207.5 P
2 F
0.21 (r) 63 194.5 P
0.21 (eplying endpoint) 66.87 194.5 P
1 F
0.21 ( is the one that sends the corresponding reply) 140.71 194.5 P
0.21 (. Upon receipt of a request message, its request) 340.23 194.5 P
0.22 (handler is invoked; likewise, when a reply message is received, its reply handler is invoked. Request handlers) 63 181.5 P
1.27 (must reply exactly once to the requesting endpoint; it is an error to do otherwise.) 63 168.5 P
1 8.8 Q
1.01 (4) 435.42 172.9 P
1 11 Q
1.27 ( Some implementations,) 439.82 168.5 P
0.44 (however) 63 155.5 P
0.44 (, will signal this error) 100.43 155.5 P
0.44 (, but it may go undetected in others. In addition, reply handlers cannot perform) 196.18 155.5 P
63 123 549 141 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
64 132.94 306 132.94 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
1 11 Q
0 X
0 0 0 1 0 0 0 K
-0.04 (4. The phrases \322it is an error to X\323 and \322an error will be signaled if X\323 have distinct meanings. The former im-) 63 115.67 P
-0.06 (plies that applications written correctly should not do X and that correct interface implementations may report) 63 103.67 P
(the errors optionally) 63 91.67 T
(. The latter means that applications written correctly should not do X and that a correct in-) 151.49 91.67 T
(terface implementation must always check for and report such errors.) 63 79.67 T
63 72 549 720 C
126 550.67 486 710 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(Pr) 157.86 694.72 T
(ocess A) 166.15 694.72 T
(Pr) 422.99 695.92 T
(ocess X) 431.29 695.92 T
341.24 662.29 352.77 658.99 341.24 655.68 341.24 658.99 4 Y
0.5 H
2 Z
N
259.49 658.99 341.24 658.99 2 L
N
270.76 634.48 259.23 637.79 270.76 641.1 270.76 637.79 4 Y
N
352.77 637.79 270.76 637.79 2 L
N
1 10 Q
(Request) 261.52 662.64 T
(Reply) 322.82 640.7 T
356.94 629.18 400.15 665.81 R
7 X
V
0 X
N
(EX1) 370.28 644.75 T
210.58 629.18 253.79 665.81 R
7 X
V
0 X
N
(EAB1) 219.68 643.58 T
J
198.75 674.08 410.17 674.08 410.17 618.47 198.75 618.47 4 Y
J
198.75 670.33 198.75 674.08 202.5 674.08 3 L
N
[7.552 6.545] 7.552 I
202.5 674.08 406.42 674.08 2 L
N
J
406.42 674.08 410.17 674.08 410.17 670.33 3 L
N
[7.439 6.447] 7.439 I
410.17 670.33 410.17 622.22 2 L
N
J
410.17 622.22 410.17 618.47 406.42 618.47 3 L
N
[7.552 6.545] 7.552 I
406.42 618.47 202.51 618.47 2 L
N
J
202.51 618.47 198.75 618.47 198.75 622.22 3 L
N
[7.439 6.447] 7.439 I
198.75 622.22 198.75 670.33 2 L
N
J
[1.5 4.501] 0 I
351.06 623.11 405.94 671.06 18 RR
N
[1.491 4.473] 0 I
205.32 623.55 259.3 671.85 18 RR
N
J
166 628.79 M
 174.96 622.39 157.2 619.21 166.63 612.74 D
N
165.09 646.08 M
 174.05 639.67 156.29 636.5 165.72 630.03 D
N
(TB) 148.14 615.68 T
202.42 661.6 206.78 657.48 200.9 658.66 201.66 660.13 4 Y
V
178.35 670.34 173.99 674.46 179.87 673.28 179.11 671.81 4 Y
V
201.66 660.13 179.11 671.81 2 L
0 Z
N
201.82 639.54 207.68 640.82 203.38 636.63 202.6 638.09 4 Y
V
176.15 622.02 170.28 620.75 174.58 624.93 175.37 623.47 4 Y
V
202.6 638.09 175.37 623.47 2 L
N
164.7 673.98 M
 173.66 667.58 155.89 664.41 165.33 657.93 D
2 Z
N
(T) 144 659.89 T
(A) 149.31 659.89 T
442.2 629.91 M
 433.24 623.5 451 620.33 441.56 613.85 D
N
443.71 646.08 M
 434.75 639.67 452.51 636.5 443.07 630.03 D
N
(TY) 449.51 612.89 T
402.58 658.79 396.6 658.31 401.42 661.89 402 660.34 4 Y
V
433.02 673.76 438.99 674.24 434.18 670.66 433.6 672.21 4 Y
V
402.01 660.34 433.6 672.21 2 L
0 Z
N
400.23 637.71 395.71 641.65 401.63 640.7 400.93 639.2 4 Y
V
434.58 625.3 439.1 621.36 433.18 622.3 433.88 623.8 4 Y
V
400.93 639.2 433.88 623.8 2 L
N
444.69 674.59 M
 435.73 668.19 453.49 665.02 444.06 658.54 D
2 Z
N
(TX) 450.88 653.83 T
164.36 689.32 M
 173.32 682.91 155.55 679.74 164.99 673.26 D
N
445.28 690.01 M
 436.32 683.6 454.08 680.43 444.64 673.96 D
N
126 575 486 593 R
7 X
V
4 9 Q
0 X
(Figure  9) 126 586.33 T
0 10 Q
(Multi-thr) 171 586.33 T
(eaded pr) 211.37 586.33 T
(ogram with one, shar) 248.69 586.33 T
(ed endpoint) 339.06 586.33 T
J
J
126 550.67 486 572.83 R
7 X
V
3 F
0 X
1.89 (Rectangles with dashed outlines denote software packages, ovals with dotted) 126 566.17 P
(outlines represent endpoint bundles, and squares are communication endpoints.) 126 554.17 T
63 72 549 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "17" 22
%%Page: "18" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
80.36 729 549 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(18) 536.77 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Active Message API: T) 214.97 741.53 T
(ransport Operations) 310.51 741.53 T
63 729 549 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
1 11 Q
0 X
0.07 (request or reply operations. Handlers are not explicitly typed as request or reply handlers, but the semantics of) 63 712.67 P
(the two generally make it convenient to consider them as being so typed.) 63 699.67 T
0.65 (The interface distinguishes \322small\323 transfers from \322medium\323 and \322lar) 63 679.67 P
0.65 (ge\323 memory-to-memory bulk transfers.) 374.13 679.67 P
-0.15 (For small messages, typically ones contained and composed entirely within a processor) 63 666.67 P
-0.15 (\325) 446.05 666.67 P
-0.15 (s register set, the inter-) 449.11 666.67 P
0.61 (face provides request and reply operations that pass a small number of words \0504 or 8, as a result of common) 63 653.67 P
0.43 (function-calling conventions\051 by value. For medium messages, the interface operations support sending more) 63 640.67 P
-0.08 (than a small number \050) 63 627.67 P
2 F
-0.08 (up to 128) 158.63 627.67 P
1 F
-0.08 (\051 of words by value. For lar) 200.03 627.67 P
-0.08 (ge transfers, the operations copy source-memory re-) 320.05 627.67 P
1.18 (gions to user) 63 614.67 P
1.18 (-speci\336ed destination endpoint memory segments and then deliver associated active messages.) 121.37 614.67 P
-0.22 (The active messages are logically delivered) 63 601.67 P
2 F
-0.22 (after) 255.95 601.67 P
1 F
-0.22 ( the bulk transfers \336nish writing the destination memory) 276.73 601.67 P
-0.22 (. Han-) 521.73 601.67 P
(dling the active message is the) 63 588.67 T
2 F
(noti\336cation event) 199.87 588.67 T
1 F
(associated with a bulk transfer) 278.7 588.67 T
(.) 411.9 588.67 T
0.37 (Multiple threads can concurrently send requests and replies from an endpoint in a) 63 568.67 P
2 F
0.37 (shar) 429.15 568.67 P
0.37 (ed) 448.3 568.67 P
1 F
0.37 ( bundle. This allows) 458.68 568.67 P
0.38 (multiple threads to poll concurrently a shared bundle and to handle individual incoming messages in parallel.) 63 555.67 P
0.4 (The system performs the necessary synchronization to serialize accesses to endpoint and bundle components,) 63 542.67 P
-0.1 (such as) 63 529.67 P
-0.1 (send and receive pools, while attempting to maximize potential concurrency) 97.61 529.67 P
-0.1 (. Because sending requests) 431.4 529.67 P
0.47 (or replies from an endpoint can cause incoming messages on any endpoint in the same bundle to be handled,) 63 516.67 P
1.15 (concurrent sends from an endpoint can cause concurrent message handling. Concurrent operations can also) 63 503.67 P
(cause nonatomic handler execution.) 63 490.67 T
-0.13 (The system passes all active message request- and reply-handler functions a) 63 470.67 P
2 F
-0.13 (token) 398.54 470.67 P
1 F
-0.13 (. A token is an opaque point-) 422.37 470.67 P
0.02 (er to data that identi\336es the source and destination endpoints.) 63 457.67 P
2 F
0.02 (AM_GetSour) 334.85 457.67 P
0.02 (ceEndpoint\050\051) 392.49 457.67 P
1 F
0.02 ( translates a token into) 449.92 457.67 P
0.02 (the globally-unique endpoint name of the sending endpoint.) 63 444.67 P
2 F
0.02 (AM_GetDestEndpoint\050\051) 328.64 444.67 P
1 F
0.02 (translates a token into the) 436.5 444.67 P
0.43 (globally-unique endpoint name of the receiving endpoint.) 63 431.67 P
2 F
0.43 (AM_GetMsgT) 322.01 431.67 P
0.43 (ag\050\051) 383.32 431.67 P
1 F
0.43 (retrieves the message tag from a) 404.83 431.67 P
(token) 63 418.67 T
2 F
(.) 87.44 418.67 T
4 10 Q
(4.1  Active message semantics) 63 394.33 T
1 11 Q
-0.27 (The simplest model for correct handler execution is the following. Reply handlers should not call any functions) 63 371.67 P
0.37 (directly or indirectly that poll, send requests, or send replies. Request handlers must reply exactly once to the) 63 358.67 P
1.65 (requesting endpoint; it is an error to do otherwise. Additionally) 63 345.67 P
1.65 (, functions that send active messages, like) 355.18 345.67 P
2 F
0.23 (AM_r) 63 332.67 P
0.23 (equest_4\050\051) 88.26 332.67 P
1 F
0.23 (, can receive and handle active messages arriving at any endpoint in the same bundle. For ex-) 134.69 332.67 P
0.35 (ample, given a bundle with endpoints A, B, and C, sending a request message from A can handle arriving re-) 63 319.67 P
-0.16 (quest and reply messages to A, B, or C. Sending a reply message from A can handle arriving reply messages to) 63 306.67 P
0.92 (A, B, or C. These rules produces correct handler behavior and allow for the modelling of request and reply) 63 293.67 P
0.11 (handler nesting. While sending a request, a request message can be received and handled. The request handler) 63 280.67 P
0.83 (must then issue a reply) 63 267.67 P
0.83 (, which can in turn receive a reply message and invoke a reply handler) 166.42 267.67 P
0.83 (. Thus, in this) 486.32 267.67 P
(scheme, the maximum nesting of request, reply and handler functions on a thread\325) 63 254.67 T
(s call-stack is four deep.) 424.11 254.67 T
-0.04 (Advanced active message applications can make use of the following semantics. In addition to the single man-) 63 234.67 P
0.84 (datory reply) 63 221.67 P
0.84 (, request handlers) 116.58 221.67 P
2 F
0.84 (can) 199.13 221.67 P
1 F
0.84 ( send request messages using bundles that are distinct from the requesting) 215.02 221.67 P
0.32 (and replying bundles. If request handlers restrict such use to acyclic chains of bundles, and if nonatomic han-) 63 208.67 P
0.07 (dler execution is anticipated, then the system can deliver all messages and remain deadlock free. The ef) 63 195.67 P
0.07 (fective) 519.07 195.67 P
-0.21 (use of this semantics requires that programmers have high-level knowledge of the dependencies among the rel-) 63 182.67 P
-0.09 (evant endpoints, bundles, and software packages. Although this semantics is more complicated than that stated) 63 169.67 P
1.2 (in the previous paragraph, it is nevertheless valuable. For example, it permits package A to export a) 63 156.67 P
2 F
1.2 (printf) 524.55 156.67 P
1 F
-0.19 (function built on top of request and reply operations that can be called from request and reply handlers in pack-) 63 143.67 P
-0.06 (age B, providing that the endpoints and bundles in packages A and B are distinct. The maximum nesting depth) 63 130.67 P
-0.21 (of request and reply operations and handlers is easily modelled in this case: it is twice the length of the chain of) 63 117.67 P
0.05 (requests from endpoint to endpoint in distinct bundles, plus two. Note that when the \322deepest\323 request handler) 63 104.67 P
(replies, it can receive and handle a reply message.) 63 91.67 T
FMENDPAGE
%%EndPage: "18" 23
%%Page: "19" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
531.63 729 63 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(19) 63 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Active Message API: T) 214.97 741.53 T
(ransport Operations) 310.51 741.53 T
549 729 63 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
4 10 Q
0 X
(4.2  Bulk request and reply operations) 63 713.33 T
1 11 Q
2.17 (The bulk transfer request and reply functions require additional ar) 63 690.67 P
2.17 (guments. These ar) 372.2 690.67 P
2.17 (guments specify the) 456.68 690.67 P
0.79 (source-memory address, the destination-memory of) 63 677.67 P
0.79 (fset from the base of the remote reply endpoint\325) 292.93 677.67 P
0.79 (s virtual-) 508.8 677.67 P
2.29 (memory segment \050omitted for medium-sized transfers\051, and the number of bytes to copy) 63 664.67 P
2.29 (. The functions) 478.11 664.67 P
2 F
0.21 (AM_MaxMedium\050\051) 63 651.67 P
1 F
0.21 (and) 150.26 651.67 P
2 F
0.21 (AM_MaxLong\050\051) 169.11 651.67 P
1 F
0.21 (return the maximum transfer sizes for medium and bulk transfers, re-) 242.94 651.67 P
1.28 (spectively) 63 638.67 P
1.28 (. The source- and destination-memory segments can have arbitrary memory alignments, although) 106.89 638.67 P
0.91 (implementations can optimize for page, cache-line, and double-word alignments. Such optimizations can be) 63 625.67 P
-0.19 (performed at the expense of word, short, and unaligned transfer performance. From the moment a thread issues) 63 612.67 P
0.05 (a bulk request or reply operation until the moment the receiver invokes its handler) 63 599.67 P
0.05 (, the contents of the destina-) 424.69 599.67 P
(tion-memory region is unde\336ned.) 63 586.67 T
4 10 Q
(4.3  Message delivery and error model) 63 562.33 T
1 11 Q
0.3 (For request and reply operations, a message is considered sent when the source storage \050registers or memory\051) 63 539.67 P
-0.04 (can be reused. A message is considered received when its handler function is invoked in the receiving process.) 63 526.67 P
-0.1 (A message is considered delivered once it is entirely written into its destination endpoint\325) 63 513.67 P
-0.1 (s receive pool \050which) 454.91 513.67 P
-0.19 (logically precedes its reception and handling\051. Once delivered, the communication system cannot control when) 63 500.67 P
-0.25 (an active message\325) 63 487.67 P
-0.25 (s handler executes. Sending active messages from any endpoint in a bundle can, as a side-ef-) 144.97 487.67 P
(fect, receive incoming active messages on all endpoints in the same bundle and execute their handlers.) 63 474.67 T
0.02 (The system delivers all messages exactly once barring persistent error conditions such as catastrophic network) 63 454.67 P
0.46 (or system errors or persistent congestion at the destination endpoint. If such conditions occur) 63 441.67 P
0.46 (, the system can) 477.35 441.67 P
-0.24 (deem some messages to be undeliverable and return them to their senders. Requests are returned to the request-) 63 428.67 P
0.12 (ing endpoint and replies are returned to the replying endpoint; active messages are never dropped silently) 63 415.67 P
0.12 (. Re-) 527.5 415.67 P
0.72 (turned messages are received by the endpoints that sent them and behave like ordinary active messages. For) 63 402.67 P
0.22 (instance, they can generate events that can unblock threads waiting for receive-pool transitions from empty to) 63 389.67 P
(nonempty) 63 376.67 T
(.) 106.29 376.67 T
0.47 (By convention, the \336rst entry in every handler table, denoted handler) 63 356.67 P
1 8.8 Q
0.37 (0) 370.71 353.92 P
1 11 Q
0.47 (, is the) 375.11 356.67 P
2 F
0.47 (undeliverable message handler) 408.28 356.67 P
1 F
0.47 (,) 546.25 356.67 P
0.41 (which as the name suggests, noti\336es applications of undeliverable messages. Each package can register func-) 63 343.67 P
0.22 (tions for handler) 63 330.67 P
1 8.8 Q
0.17 (0) 136.15 327.92 P
1 11 Q
0.22 ( that are tailored for their individual needs. For example, returned messages can be dropped,) 140.55 330.67 P
0.06 (queued at higher layers for later retransmission, or cause the process to abort. The undeliverable message han-) 63 317.67 P
0.38 (dler is used for both undeliverable requests and replies, and has the following prototype:) 63 304.67 P
0.38 (void handler\050int sta-) 459.04 304.67 P
(tus, op_t opcode, void *ar) 63 291.67 T
(gblock\051. Note that the default handler for handler) 177.07 291.67 T
1 8.8 Q
(0) 393.35 288.92 T
1 11 Q
( is) 397.75 291.67 T
2 F
(abort\050\051.) 410.59 291.67 T
1 F
0.47 (The) 63 271.67 P
8 F
0.47 (status) 83.32 271.67 P
1 F
0.47 ( value describes why a message was undeliverable. The) 109.61 271.67 P
8 F
0.47 (opcode) 361.25 271.67 P
1 F
0.47 ( ar) 393.02 271.67 P
0.47 (gument identi\336es the type of the) 404.59 271.67 P
0.49 (returned message, as well as the operation used to send it.) 63 258.67 P
8 F
0.49 (Opcode) 325.3 258.67 P
1 F
0.49 (is one of the following compile-time con-) 362.75 258.67 P
19.45 (stants:) 63 245.67 P
1 9 Q
15.91 (AM_REQUEST_M, AM_REQUEST_IM) 113.31 245.67 P
2 F
15.91 (,) 280.72 245.67 P
1 F
15.91 ( AM_REQUEST_XFER_M AM_REPL) 282.97 245.67 P
15.91 (Y) 458.9 245.67 P
15.91 (, AM_REPL) 464.24 245.67 P
15.91 (Y_IM,) 524.75 245.67 P
-0.04 (AM_REPL) 63 232.67 P
-0.04 (Y_XFER_M) 103.1 232.67 P
1 11 Q
-0.05 (. The number of ar) 149.61 232.67 P
-0.05 (guments passed to the handler) 231.39 232.67 P
1 8.8 Q
-0.04 (0) 363.8 229.92 P
1 11 Q
-0.05 ( function is always the same, but the data) 368.2 232.67 P
-0.02 (pointed to by the ar) 63 219.67 P
-0.02 (gblock can dif) 148.28 219.67 P
-0.02 (fer) 210.98 219.67 P
-0.02 (. For request functions,) 222.58 219.67 P
8 F
-0.02 (argblock) 327 219.67 P
1 F
-0.02 ( points to a structure containing the origi-) 366.72 219.67 P
0.44 (nal ar) 63 206.67 P
0.44 (guments. For) 87.98 206.67 P
0.44 ( reply functions,) 149.23 206.67 P
8 F
0.44 (argblock) 225.1 206.67 P
1 F
0.44 ( points to a structure containing the) 264.82 206.67 P
2 F
0.44 (token) 425.86 206.67 P
1 F
0.44 ( and the original ar) 449.68 206.67 P
0.44 (gu-) 534.34 206.67 P
(ments. The table below lists the) 63 193.67 T
8 F
(status) 205.08 193.67 T
1 F
(constants and their meanings.) 234.12 193.67 T
(EBADARGS) 114.36 164.67 T
(Ar) 236.22 164.67 T
(guments to the request or reply function were invalid.) 247.62 164.67 T
(EBADENTR) 111 143.67 T
(Y) 169.06 143.67 T
(The translation-table index selected an unbound table entry) 228.69 143.67 T
(.) 488.56 143.67 T
(EBADT) 118.17 122.67 T
(AG) 153.95 122.67 T
(The sender) 228.42 122.67 T
(\325) 277.4 122.67 T
(s tag did not match the receiving endpoint\325) 280.45 122.67 T
(s tag.) 468.36 122.67 T
(EBADHANDLER) 102.76 101.67 T
(The handler is an invalid index into the receiver) 219.42 101.67 T
(\325) 430.62 101.67 T
(s handler table.) 433.68 101.67 T
4 9 Q
(Figure  10) 90 81.34 T
0 10 Q
(Status constants for undeliverable messages and their descriptions) 135 81.34 T
90 177.75 90 94.25 2 L
V
0.5 H
N
198 178.25 198 93.75 2 L
V
N
522 177.75 522 94.25 2 L
V
N
89.75 178 522.25 178 2 L
V
N
89.75 157 522.25 157 2 L
V
N
89.75 136 522.25 136 2 L
V
N
89.75 115 522.25 115 2 L
V
N
89.75 94 522.25 94 2 L
V
N
FMENDPAGE
%%EndPage: "19" 24
%%Page: "20" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
80.36 729 549 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(20) 536.77 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Active Message API: T) 214.97 741.53 T
(ransport Operations) 310.51 741.53 T
63 729 549 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
1 11 Q
0 X
-0.03 (In all cases besides) 63 532.67 P
1 9 Q
-0.02 (EUNREACHABLE) 149.65 532.67 P
1 11 Q
-0.03 (, the system guarantees that the message produced no events at its destina-) 222.14 532.67 P
1.5 (tion endpoint. In the case of) 63 519.67 P
1 9 Q
1.23 (EUNREACHABLE) 197.56 519.67 P
1 11 Q
1.5 (, the system guarantees to deliver the message at most once,) 270.05 519.67 P
-0.1 (which means that the possibility exists that the message was received and incorporated into the remote compu-) 63 506.67 P
0.2 (tation. It is the responsibility of higher level protocols to detect, rationalize, and handle this case, if necessary) 63 493.67 P
0.2 (.) 546.25 493.67 P
(Undeliverable bulk transfer messages can have written portions of their destination-memory regions.) 63 480.67 T
4 9 Q
(4.3.1  Error model as a signal-detection experiment) 63 457 T
1 11 Q
0.98 (Because) 63 435.17 P
1 9 Q
0.8 ( EUNREACHABLE) 99.65 435.17 P
1 11 Q
0.98 ( indicates a serious system problem such as a crashed node, messages returned for) 175.2 435.17 P
0.32 (this reason are handled dif) 63 422.17 P
0.32 (ferently than those returned for other reasons. Understanding this error condition is) 180.15 422.17 P
0.22 (particularly important for building highly-available applications. It is useful to frame this situation in terms of) 63 409.17 P
0.47 (a signal-detection experiment and its four possible outcomes, as shown in Figure 1) 63 396.17 P
0.47 (1. The setup is as follows.) 432.08 396.17 P
-0.23 (There are two nodes, N) 63 383.17 P
1 8.8 Q
-0.19 (A) 165 380.42 P
1 11 Q
-0.23 ( and N) 171.36 383.17 P
1 8.8 Q
-0.19 (B) 200.22 380.42 P
1 11 Q
-0.23 (, where N) 206.09 383.17 P
1 8.8 Q
-0.19 (A) 248.68 380.42 P
1 11 Q
-0.23 ( sends a request to N) 255.04 383.17 P
1 8.8 Q
-0.19 (B) 345.22 380.42 P
1 11 Q
-0.23 (. After the request is sent, N) 351.08 383.17 P
1 8.8 Q
-0.19 (B) 473.11 380.42 P
1 11 Q
-0.23 ( is in one of two) 478.97 383.17 P
0.64 (states \050where its state is the \322signal\323 to be detected by node N) 63 370.17 P
1 8.8 Q
0.51 (A) 342.01 367.42 P
1 11 Q
0.64 (\051. N) 348.36 370.17 P
1 8.8 Q
0.51 (A) 366.11 367.42 P
1 11 Q
0.64 ( then measures N) 372.46 370.17 P
1 8.8 Q
0.51 (B) 450.46 367.42 P
1 11 Q
0.64 (\325) 456.33 370.17 P
0.64 (s signal and decides) 459.39 370.17 P
0.75 (how to proceed. One possibility is to return the request with status) 63 357.17 P
1 9 Q
0.62 (EUNREACHABLE) 366.27 357.17 P
1 11 Q
0.75 (. There are four possible) 438.77 357.17 P
(outcomes of this signal-detection experiment.) 63 344.17 T
0.6 (Cases 1 and 2 are easy to understand, because in both cases, node N) 63 183.17 P
1 8.8 Q
0.48 (A) 369.83 180.42 P
1 11 Q
0.6 ( correctly determined the state of node) 376.18 183.17 P
-0.14 (N) 63 170.17 P
1 8.8 Q
-0.11 (B) 70.94 167.42 P
1 11 Q
-0.14 (. Case #1 produces an undeliverable message with status) 76.81 170.17 P
1 9 Q
-0.12 (EUNREACHABLE, while c) 327.28 170.17 P
1 11 Q
-0.14 (ase #2 is error free because) 430.29 170.17 P
-0.07 (the reply to the request was delivered. Case 3, represents the false-negative case, in which N) 63 157.17 P
1 8.8 Q
-0.05 (A) 468.24 154.42 P
1 11 Q
-0.07 ( believes that N) 474.6 157.17 P
1 8.8 Q
-0.05 (B) 543.13 154.42 P
1 11 Q
-0.11 (is alive, but N) 63 144.17 P
1 8.8 Q
-0.09 (B) 124.38 141.42 P
1 11 Q
-0.11 ( is in fact dead. If N) 130.25 144.17 P
1 8.8 Q
-0.09 (B) 217.23 141.42 P
1 11 Q
-0.11 ( remains dead long enough for N) 223.1 144.17 P
1 8.8 Q
-0.09 (A) 367.22 141.42 P
1 11 Q
-0.11 ( to correctly determine that N) 373.58 144.17 P
1 8.8 Q
-0.09 (B) 502.84 141.42 P
1 11 Q
-0.11 ( is in fact) 508.71 144.17 P
0.09 (dead, then the request eventually returns to N) 63 131.17 P
1 8.8 Q
0.07 (A,) 263.42 128.42 P
1 11 Q
0.09 (and N) 274.25 131.17 P
1 8.8 Q
0.07 (A) 300.92 128.42 P
1 11 Q
0.09 ( will update its belief \050that N) 307.27 131.17 P
1 8.8 Q
0.07 (B) 434.3 128.42 P
1 11 Q
0.09 ( is dead\051. The possibility) 440.17 131.17 P
0.42 (exists that N) 63 118.17 P
1 8.8 Q
0.34 (B) 118.84 115.42 P
1 11 Q
0.42 ( re-boots while N) 124.71 118.17 P
1 8.8 Q
0.34 (A) 202.65 115.42 P
1 11 Q
0.42 ( is retrying the request message to N) 209 118.17 P
1 8.8 Q
0.34 (B) 372.33 115.42 P
1 11 Q
0.42 (. If this happens, N) 378.2 118.17 P
1 8.8 Q
0.34 (A) 463.59 115.42 P
1 11 Q
0.42 (\325) 468.72 118.17 P
0.42 (s message should) 471.78 118.17 P
0.12 (be returned, not delivered. Depending on the implementation, the message can be returned because N) 63 105.17 P
1 8.8 Q
0.1 (A) 511.05 102.42 P
1 11 Q
0.12 ( begins) 517.41 105.17 P
-0.07 (sending the request to a now nonexistent endpoint on N) 63 92.17 P
1 8.8 Q
-0.05 (B) 307.13 89.42 P
1 11 Q
-0.07 (. Other implementations can tag messages with epoch) 313 92.17 P
-0.2 (numbers \050e.g., randomly chosen lar) 63 79.17 P
-0.2 (ge numbers, or) 217.51 79.17 P
-0.2 (, if the operating system can provide known to be \322fresh\323 ep-) 282.35 79.17 P
(EBADSEGOFF) 108.55 706.67 T
(An of) 228.11 706.67 T
(fset into the destination-memory segment was invalid.) 253.27 706.67 T
(EBADLENGTH) 107.04 685.67 T
(The bulk transfer length goes beyond a segment\325) 240.09 685.67 T
(s end.) 454.25 685.67 T
(EBADENDPOINT) 101.54 664.67 T
(The destination endpoint did not exist.) 275.36 664.67 T
(ECONGESTION) 105.51 643.67 T
(There was persistent congestion at the destination endpoint.) 228.63 643.67 T
(EUNREACHABLE) 99.7 622.67 T
(The destination endpoint was unreachable due to a serious,) 230.32 622.67 T
(likely catastrophic, system or network error) 263 609.67 T
(.) 454.25 609.67 T
(EREPL) 96.88 588.67 T
(YREJECTED) 129.4 588.67 T
(The destination endpoint refused a reply message because the match-) 207.72 588.67 T
(ing request was returned with a status of) 232.26 575.67 T
1 9 Q
(EUNREACHABLE) 412.5 575.67 T
1 11 Q
(.) 484.99 575.67 T
0 10 Q
(Case Number) 192.7 313.83 T
(N) 272.8 313.83 T
0 8 Q
(A) 280.02 311.33 T
0 10 Q
( thinks N) 285.8 313.83 T
0 8 Q
(B) 324.7 311.33 T
0 10 Q
( is) 330.03 313.83 T
(State of N) 361.64 313.83 T
0 8 Q
(B) 403.85 311.33 T
0 10 Q
( is) 409.19 313.83 T
1 11 Q
(1) 219.25 291.17 T
(DEAD) 290.73 291.17 T
(DEAD) 374.73 291.17 T
(2) 219.25 270.17 T
(ALIVE) 289.51 270.17 T
(ALIVE) 373.51 270.17 T
(3) 219.25 249.17 T
(ALIVE) 289.51 249.17 T
(DEAD) 374.73 249.17 T
(4) 219.25 228.17 T
(DEAD) 290.73 228.17 T
(ALIVE) 373.51 228.17 T
4 9 Q
(Figure  1) 180 207.83 T
(1) 217.02 207.83 T
0 10 Q
(Semantics of) 225 207.83 T
0 9 Q
(EUNREACHABLE) 281.66 207.83 T
4 F
(Figure  10) 90 555.33 T
0 10 Q
(Status constants for undeliverable messages and their descriptions) 135 555.33 T
90 719.75 90 568.25 2 L
V
0.5 H
N
198 720.25 198 567.75 2 L
V
N
522 719.75 522 568.25 2 L
V
N
89.75 720 522.25 720 2 L
V
N
89.75 699 522.25 699 2 L
V
N
89.75 678 522.25 678 2 L
V
N
89.75 657 522.25 657 2 L
V
N
89.75 636 522.25 636 2 L
V
N
89.75 602 522.25 602 2 L
V
N
89.75 568 522.25 568 2 L
V
N
180 328.25 180 220.75 2 L
V
N
264 328.75 264 220.25 2 L
V
N
348 328.75 348 220.25 2 L
V
N
432 328.25 432 220.75 2 L
V
N
179.75 328.5 432.25 328.5 2 L
V
N
180.25 305.75 431.75 305.75 2 L
V
N
180.25 303.25 431.75 303.25 2 L
V
N
179.75 283.5 432.25 283.5 2 L
V
N
179.75 262.5 432.25 262.5 2 L
V
N
179.75 241.5 432.25 241.5 2 L
V
N
179.75 220.5 432.25 220.5 2 L
V
N
FMENDPAGE
%%EndPage: "20" 25
%%Page: "21" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
531.63 729 63 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(21) 63 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Active Message API: T) 214.97 741.53 T
(ransport Operations) 310.51 741.53 T
549 729 63 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
1 11 Q
0 X
0.87 (och numbers, so much the better\051. Then, when a message arrives for any epoch except the current one, it is) 63 712.67 P
0.44 (dropped. Whenever a requesting node sends a message to a node and it is returned with) 63 699.67 P
1 9 Q
0.36 (EUNREACHABLE) 457.12 699.67 P
1 11 Q
0.44 (, the) 529.62 699.67 P
0.49 (system internally changes the epoch used for future communications with that node. Case 4 is the false-posi-) 63 686.67 P
0.11 (tive case where N) 63 673.67 P
1 8.8 Q
0.09 (A) 141.82 670.92 P
1 11 Q
0.11 ( believes N) 148.17 673.67 P
1 8.8 Q
0.09 (B) 197.87 670.92 P
1 11 Q
0.11 ( is dead but N) 203.74 673.67 P
1 8.8 Q
0.09 (B) 265.28 670.92 P
1 11 Q
0.11 ( is in fact alive and communicating. Again, a returned message) 271.15 673.67 P
0.34 (with status) 63 660.67 P
1 9 Q
0.28 (EUNREACHABLE) 113.79 660.67 P
1 11 Q
0.34 ( means that communication to the remote node has encountered a catastrophic er-) 186.29 660.67 P
0.64 (ror) 63 647.67 P
0.64 (. For instance, if N) 75.22 647.67 P
1 8.8 Q
0.51 (A) 160.26 644.92 P
1 11 Q
0.64 ( requests to N) 166.61 647.67 P
1 8.8 Q
0.51 (B) 229.32 644.92 P
1 11 Q
0.64 ( and the system returns the request with an error status of) 235.19 647.67 P
1 9 Q
0.52 (EUNREACH-) 497.01 647.67 P
2.62 (ABLE,) 63 634.67 P
1 11 Q
3.21 (then the system must guarantee with a very high probability that the requestor never sees the) 93.62 634.67 P
0.54 (corresponding reply should it ever arrive at N) 63 621.67 P
1 8.8 Q
0.43 (A) 267.49 618.92 P
1 11 Q
0.54 (. The second issue is what happens on the replying node, N) 273.84 621.67 P
1 8.8 Q
0.43 (B) 540.38 618.92 P
1 11 Q
0.54 (.) 546.25 621.67 P
-0.09 (The replying application on N) 63 608.67 P
1 8.8 Q
-0.08 (B) 195.21 605.92 P
1 11 Q
-0.09 ( handles the request and sends back the reply to N) 201.08 608.67 P
1 8.8 Q
-0.08 (A) 420.08 605.92 P
1 11 Q
-0.09 (. But N) 426.44 608.67 P
1 8.8 Q
-0.08 (A) 458.33 605.92 P
1 11 Q
-0.09 ( believes that N) 464.69 608.67 P
1 8.8 Q
-0.08 (B) 533.14 605.92 P
1 11 Q
-0.09 ( is) 539.01 608.67 P
0.03 (dead. It is misleading, if not entire incorrect, for N) 63 595.67 P
1 8.8 Q
0.02 (B) 285.02 592.92 P
1 11 Q
0.03 ( to inform the application that its reply message was deliv-) 290.89 595.67 P
0.18 (ered successfully because the reply should never have been delivered in the \336rst place. The application on N) 63 582.67 P
1 8.8 Q
0.15 (A) 542.65 579.92 P
1 11 Q
0.19 (can be busy executing quorum or recovery code, assuming N) 63 569.67 P
1 8.8 Q
0.15 (B) 333.5 566.92 P
1 11 Q
0.19 ( is dead. Allowing the reply) 339.37 569.67 P
0.19 (, which is now \322un-) 461.8 569.67 P
1.03 (expected\323 to \322sneak in\323 and be delivered, would make writing recovery code very dif) 63 556.67 P
1.03 (\336cult. T) 451.95 556.67 P
1.03 (o prevent this) 487.05 556.67 P
0.68 (case, the reply must be returned with either an undeliverable status of E) 63 543.67 P
1 9 Q
0.56 (REPL) 386.13 543.67 P
0.56 (YREJECTED) 407.23 543.67 P
1 11 Q
0.68 ( or) 457.73 543.67 P
1 9 Q
0.56 (EUNREACHABLE) 473.76 543.67 P
1 11 Q
0.68 (.) 546.25 543.67 P
(The status that is returned is implementation-dependent.) 63 530.67 T
4 9 Q
(4.3.2  Synchronous and asynchronous error detection) 63 507 T
1 11 Q
0.1 (The active message transport functions in Appendix A return a value of either) 63 485.17 P
1 9 Q
0.08 (AM_OK) 409.78 485.17 P
1 11 Q
0.1 ( or) 441.78 485.17 P
1 9 Q
0.08 (AM_ERR_XXX) 456.64 485.17 P
1 11 Q
0.1 (. When) 517.13 485.17 P
0.17 (errors can be detected synchronously with respect to a caller) 63 472.17 P
0.17 (, the active message functions return immediately) 329.54 472.17 P
0.14 (with error status. Otherwise, when errors are detected asynchronously with respect to a caller) 63 459.17 P
0.14 (, the system gen-) 474.03 459.17 P
0.92 (erates undeliverable messages. Whether or not an error can be detected synchronously or asynchronously is) 63 446.17 P
0.43 (implementation dependent, more speci\336cally it depends in part upon what knowledge a sending endpoint has) 63 433.17 P
3.61 (of a destination endpoint\325) 63 420.17 P
3.61 (s parameters. As one example of the distinction,) 185.97 420.17 P
2 F
3.61 (AM_Rquest4\050\051) 429.34 420.17 P
1 F
3.61 (veri\336es its) 499.86 420.17 P
2 F
0.27 (r) 63 407.17 P
0.27 (equesting_endpoint) 66.87 407.17 P
1 F
0.27 ( ar) 153.04 407.17 P
0.27 (gument before sending the message. Y) 164.4 407.17 P
0.27 (et once it returns, the destination endpoint could) 335.1 407.17 P
0.3 (be deallocated before the message is delivered, or the destination endpoint\325) 63 394.17 P
0.3 (s handler table could be resized so) 396.27 394.17 P
(that the message then contains an invalid handler) 63 381.17 T
(-table index.) 278.78 381.17 T
4 10 Q
(4.4  Managing congestion at destination endpoints) 63 356.83 T
1 11 Q
0.21 (The function) 63 334.17 P
2 F
0.21 (AM_SetExpectedResour) 122.68 334.17 P
0.21 (ces\050\051) 228.58 334.17 P
1 F
0.21 (allows applications to inform the system of their expected commu-) 252.91 334.17 P
1.22 (nication requirements. After returning from this function, the system informs the caller if the requested re-) 63 321.17 P
-0.14 (sources were available and were dedicated to the endpoint. The resource requirements are parameterized as the) 63 308.17 P
-0.08 (product of the number of distinct endpoints with which a given endpoint intends to communicate and the num-) 63 295.17 P
(ber of outstanding requests per endpoint.) 63 282.17 T
0.07 (This resource information enables implementations to adjust \337ow control and endpoint management protocols) 63 262.17 P
0.19 (such that space in a receive pool is always available for incoming messages, which means that messages need) 63 249.17 P
0.14 (never be returned. W) 63 236.17 P
0.14 (ithin a set of endpoints, all of which have speci\336ed their expected resource requirements,) 155.83 236.17 P
0.26 (the system never returns messages because of persistent congestion at a destination endpoint \050) 63 223.17 P
2 F
0.26 (i.e) 479.75 223.17 P
1 F
0.26 (., full receive) 490.44 223.17 P
0.32 (pools\051. If the communication resource requirements are unknown or not explicitly speci\336ed, or if the applica-) 63 210.17 P
1.31 (tion exceeds its stated requirements, then the system continues to operate. However) 63 197.17 P
1.31 (, the system can return) 444.48 197.17 P
(messages because of persistent destination endpoint congestion.) 63 184.17 T
0.37 (The delay between the delivery of an active message and its reception \050i.e., its handler being invoked\051 can be) 63 164.17 P
0.99 (arbitrarily long. The delivery model does not consider receive pools that are consistently full to be an error) 63 151.17 P
0.23 (condition, although the latter can penalize performance. The model does, however) 63 138.17 P
0.23 (, guarantee that a collection) 426.82 138.17 P
0.57 (of full receive pools will not deadlock communication among unrelated endpoints in the system. The time at) 63 125.17 P
0.02 (which send-pool entries, which logically contain message descriptors, can be reused is implementation-specif-) 63 112.17 P
0.24 (ic and depends on the underlying transport \337ow control and error detection protocols. For example, send pool) 63 99.17 P
FMENDPAGE
%%EndPage: "21" 26
%%Page: "22" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
80.36 729 549 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(22) 536.77 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Endpoint Management with Solaris/Myrinet) 213.98 741.53 T
63 729 549 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
1 11 Q
0 X
0.34 (storage containing a request could be reused once the corresponding reply is delivered, and send pool storage) 63 712.67 P
(containing a reply could be reused once the \322next\323 reply is delivered.) 63 699.67 T
63 665.17 549 670 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
4 12 Q
0 X
0 0 0 1 0 0 0 K
(5  Endpoint Management with Solaris/Myrinet) 63 674 T
1 11 Q
0.42 (The active message interface permits allocation of multiple endpoints per process, a number that can grow to) 63 644.83 P
0.32 (be lar) 63 631.83 P
0.32 (ge,) 87.86 631.83 P
2 F
0.32 (e.g.,) 104.07 631.83 P
1 F
0.32 (dozens or more. W) 125.78 631.83 P
0.32 (ith many processes using active messages, the total number of endpoints per) 210 631.83 P
1 (machine could grow into the hundreds. The Myricom network interfaces are SBUS devices with embedded) 63 618.83 P
0.06 (processors that can operate autonomously from their local SRAMs. Their memory capacity depends on the in-) 63 605.83 P
0.34 (terface-hardware version and ranges from 128KB to 512KB. Assuming that an endpoint is two 8KB-pages in) 63 592.83 P
0.17 (length and 50% of the memory is used to hold endpoints, then each network interface can hold between 4 and) 63 579.83 P
-0.23 (16 endpoints. These factors combine to raise important questions: how are endpoints on a machine multiplexed) 63 566.83 P
0.47 (onto the single network interface? and how are independence and forward-progress among distinct endpoints) 63 553.83 P
(guaranteed?) 63 540.83 T
-0.1 (As a simplifying assumption, each machine is assumed to have a single network interface.This is because mul-) 63 520.83 P
0.85 (tiple interfaces reduce the endpoint to interface ratio but introduce new questions about load balancing end-) 63 507.83 P
-0.18 (points across the interfaces or striping operations across multiple interfaces in parallel. The embedded message) 63 494.83 P
0.25 (processor is assumed to be able to deliver messages to endpoints in its local memory faster than it can deliver) 63 481.83 P
0.2 (messages to endpoints in host memory) 63 468.83 P
0.2 (, and that it performs operations on endpoints in its local memory more) 233.46 468.83 P
0.1 (ef) 63 455.83 P
0.1 (\336ciently than can the host. The \336nal simplifying assumption is that messages can be sent from and delivered) 71.35 455.83 P
0.88 (to all endpoints independently of their storage in network-interface memory or in host memory) 63 442.83 P
0.88 (. This makes) 491.33 442.83 P
0.63 (sense if the performance of endpoints in interface memory is expected to be better than that for endpoints in) 63 429.83 P
-0.06 (host memory) 63 416.83 P
-0.06 (, due to their co-location with the network interface\325) 119.97 416.83 P
-0.06 (s embedded message processor) 348.92 416.83 P
-0.06 (. The presence) 485.29 416.83 P
0.44 (of many endpoints per machine and the stated assumptions about the network interface\325) 63 403.83 P
0.44 (s capabilities leads to) 453.87 403.83 P
0.47 (the following idea: cache the most active or the) 63 390.83 P
2 F
0.47 (hottest) 278.37 390.83 P
1 F
0.47 ( endpoints in the network-interface memory and leave) 307.71 390.83 P
-0.22 (all remaining endpoints in the host\325) 63 377.83 P
-0.22 (s memory) 217.41 377.83 P
-0.22 (. The address space segment drivers in the Solaris virtual-memory) 260.17 377.83 P
0.34 (system provide the necessary mechanisms to implement this idea. By assuming that mechanisms exist so that) 63 364.83 P
0.16 (communication can occur independently of an endpoint\325) 63 351.83 P
0.16 (s location \050in host or network-interface memory\051, this) 312.03 351.83 P
0.24 (problem can be further reduced to the problem of \336nding and implementing policies that manage the working) 63 338.83 P
(set of endpoints in the network interface.) 63 325.83 T
1.02 (The following sections describe the design and implementation of a prototype system that implements end-) 63 305.83 P
-0.25 (point paging. They introduce the structures and mechanisms relevant to Solaris process address spaces, the role) 63 292.83 P
0.71 (of Solaris address space segment drivers in managing the endpoint backing storage, and the mechanisms for) 63 279.83 P
(building endpoint caching policies.) 63 266.83 T
4 10 Q
(5.1  Solaris address space management) 63 242.5 T
1 11 Q
-0.24 (Each Solaris process has a virtual address space that is a collection of address-space segments, each of which is) 63 219.83 P
0.26 (a virtually-contiguous memory region managed by a segment driver) 63 206.83 P
0.26 (. The segment driver manages the virtual-) 363.85 206.83 P
1.66 (to-physical mappings of their segments. Although the virtual-to-physical mappings \050) 63 193.83 P
2 F
1.66 (i.e.,) 450.08 193.83 P
1 F
1.66 (hardware transla-) 470.68 193.83 P
0.63 (tions\051 are transient, the segment driver maintains persistent associations between segments and their backing) 63 180.83 P
0.81 (storage. In the prototype system, every endpoint is a distinct virtual-memory segment in a process\325) 63 167.83 P
0.81 (s address) 508.17 167.83 P
(space, and a custom segment driver manages all communication endpoint segments per machine.) 63 154.83 T
-0.19 (Figure 12 depicts the address-space structure of a process, an endpoint segment and the endpoint segment driv-) 63 134.84 P
0.24 (er responsible for its management. The endpoint segment driver is a loadable, Solaris module with prede\336ned) 63 121.84 P
0.37 (entry points. Higher levels of the virtual memory system call to these entry points to perform standard opera-) 63 108.84 P
0.24 (tions on segments, such as allocating a segment, de-allocating a segment, duplicating a segment \050for forking\051,) 63 95.84 P
-0.1 (locking and unlocking segment pages in memory) 63 82.84 P
-0.1 (, and, most importantly) 278 82.84 P
-0.1 (, handling segment pagefaults. The ca-) 379.34 82.84 P
FMENDPAGE
%%EndPage: "22" 27
%%Page: "23" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
531.63 729 63 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(23) 63 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Endpoint Management with Solaris/Myrinet) 213.98 741.53 T
549 729 63 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
1 11 Q
0 X
0.85 (pability to catch and handle segment pagefaults is the key) 63 532.67 P
0.85 (mechanism available from a customized segment) 328.14 532.67 P
(driver) 63 519.67 T
(.) 88.66 519.67 T
4 10 Q
(5.2  Managing communication endpoint segments) 63 495.33 T
1 11 Q
0.05 (W) 63 472.67 P
0.05 (ith this framework, the endpoint segment driver is faced with two tasks: performing basic endpoint manage-) 72.94 472.67 P
0.31 (ment and managing the endpoint cache in the network interface. W) 63 459.67 P
0.31 (ith respect to the active message interface,) 361.09 459.67 P
0.44 (the segment driver is used whenever the) 63 446.67 P
2 F
0.44 (AM_AllocateEndpoint\050\051) 245.39 446.67 P
1 F
0.44 ( or) 351.1 446.67 P
2 F
0.44 (AM_Fr) 366.64 446.67 P
0.44 (eeEndpoint\050\051) 398.61 446.67 P
1 F
0.44 ( functions are called,) 456.05 446.67 P
-0.23 (whenever a process with allocated endpoints exits or aborts, or whenever a process faults on an unmapped end-) 63 433.67 P
0.41 (point. For example, when) 63 420.67 P
2 F
0.41 (AM_Fr) 180.13 420.67 P
0.41 (eeEndpoint\050\051) 212.11 420.67 P
1 F
0.41 (is called, the segment driver frees the backing storage and un-) 272.7 420.67 P
-0.12 (loads any mapping to the endpoints. The driver also provides mechanisms to multiplex and cache endpoints on) 63 407.67 P
1.39 (the network-interface card. The mechanisms available for constructing the policies are simple: \0501\051 an end-) 63 394.67 P
-0.08 (point\325) 63 381.67 P
-0.08 (s backing storage can be moved between host and interface memory) 88.67 381.67 P
-0.08 (, \0502\051 the virtual-to-physical hardware) 387.12 381.67 P
0.42 (translations for endpoints can be loaded or unloaded, and \0503\051 pagefaults can be taken when processors access) 63 368.67 P
-0.03 (unmapped endpoint segments. These three, basic mechanisms are suf) 63 355.67 P
-0.03 (\336cient for caching the most active or) 367.44 355.67 P
2 F
-0.03 (best) 531.28 355.67 P
1 F
(endpoints, according to some metric, in interface memory) 63 342.67 T
(.) 316.77 342.67 T
0.07 (Figure 13 on page 24 shows the task of mapping endpoint segments onto either kernel memory or network-in-) 63 322.67 P
1.1 (terface memory) 63 309.67 P
1.1 (. The thick arrows indicate associations of endpoint segments to either interface memory or) 132.71 309.67 P
0.13 (host memory) 63 296.67 P
0.13 (. These are active mappings, indicating) 120.17 296.67 P
0.13 (associations for which virtual-to-physical translations ex-) 295.69 296.67 P
-0.02 (ist \050) 63 283.67 P
2 F
-0.02 (i.e.,) 79.79 283.67 P
1 F
-0.02 (\322are loaded\323\051. The thin dotted arrow indicates an association between an endpoint and a region of host) 98.71 283.67 P
-0.08 (memory without an active virtual-to-physical translation. This design has aspects of a demand-paging problem) 63 270.67 P
-0.02 (and aspects of a caching problem. Like conventional memory paging where pages move between main memo-) 63 257.67 P
0.62 (ry and secondary storage, here pages move between main memory and network-interface memory) 63 244.67 P
0.62 (. Although) 501.32 244.67 P
-0.07 (the initial prototype \336rst used wired kernel memory for endpoint backing storage, it was subsequently changed) 63 231.67 P
-0.23 (to use pageable kernel memory) 63 218.67 P
-0.23 (. This change allowed the kernel to transparently to page the backing storage for) 198.84 218.67 P
0.63 (the inactive endpoints to disk and creates the standard cache-memory-disk hierarchy) 63 205.67 P
0.63 (. Ef) 440.06 205.67 P
0.63 (forts are focusing on) 456.38 205.67 P
0.38 (understanding and implementing the endpoint caching policies. It is worth noting that when the backing stor-) 63 192.67 P
0.21 (age for an endpoint is resident in kernel memory) 63 179.67 P
0.21 (, an endpoint pagefault to that backing storage is classi\336ed as) 277.78 179.67 P
0.08 (a \322minor\323 fault, whereas an endpoint pagefault to backing storage that the kernel has paged out to disk is clas-) 63 166.67 P
0.03 (si\336ed as a \322major\323 fault. \050The ratio of major to minor endpoint faults in a live system is an interesting parame-) 63 153.67 P
(ter to monitor) 63 140.67 T
(.\051) 122.89 140.67 T
63 72 549 720 C
144 540 468 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162.15 601.04 180.01 701.29 R
7 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
0 X
N
1 10 Q
(Process Address Space) 0 -270 173.98 608.27 TF
181.25 688.95 205.14 688.95 2 L
N
205.14 700.36 205.14 679.07 2 L
N
181.87 613.2 205.77 613.2 2 L
N
205.77 624.6 205.77 603.31 2 L
N
180.94 649.25 204.83 649.25 2 L
N
204.83 660.66 204.83 639.36 2 L
N
225.14 645.14 213.45 647.88 224.81 651.75 224.98 648.44 4 Y
V
232.94 652.14 244.62 649.4 233.26 645.54 233.1 648.84 4 Y
V
224.98 648.44 233.1 648.84 2 L
0 Z
N
(V) 257.61 650.72 T
(irtual Address) 264.23 650.72 T
(Space Segment) 258.42 641.59 T
285.8 621.13 289.11 632.67 292.42 621.13 289.11 621.13 4 Y
V
292.42 613.02 289.11 601.48 285.8 613.02 289.11 613.02 4 Y
V
289.11 621.13 289.11 613.02 2 L
N
(Endpoint) 270.77 588.35 T
(Storage) 273.83 579.22 T
285.8 680.76 289.11 692.3 292.42 680.76 289.11 680.76 4 Y
V
292.42 672.65 289.11 661.11 285.8 672.65 289.11 672.65 4 Y
V
289.11 680.76 289.11 672.65 2 L
N
(Segment = {Pages}) 249.82 696.36 T
246.7 637.23 331.88 660.05 R
N
350.12 644.88 338.59 648.18 350.12 651.49 350.12 648.18 4 Y
V
358.64 651.49 370.17 648.18 358.64 644.88 358.64 648.18 4 Y
V
350.12 648.18 358.64 648.18 2 L
N
(Endpoint) 385.04 652.24 T
(Segment) 385.87 643.11 T
(Driver) 390.32 633.99 T
375.68 629.62 430.73 663.09 R
N
398.78 615.35 402.09 626.89 405.4 615.35 402.09 615.35 4 Y
V
405.4 607.24 402.09 595.7 398.78 607.24 402.09 607.24 4 Y
V
402.09 615.35 402.09 607.24 2 L
N
397.33 684.87 400.64 696.41 403.94 684.87 400.64 684.87 4 Y
V
403.94 676.76 400.64 665.22 397.33 676.76 400.64 676.76 4 Y
V
400.64 684.87 400.64 676.76 2 L
N
(- Manage mappings) 344.53 586.83 T
(- Manage backing store) 344.53 577.7 T
(- Prede\336ned entry-points) 346.42 709.29 T
(- Handles pagefaults) 346.42 700.16 T
144 540 468 567 R
7 X
V
4 9 Q
0 X
(Figure  12) 144 560.33 T
0 10 Q
(Organization and management of Solaris addr) 189 560.33 T
(ess spaces) 387.44 560.33 T
J
J
63 72 549 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "23" 28
%%Page: "24" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
80.36 729 549 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(24) 536.77 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Endpoint Management with Solaris/Myrinet) 213.98 741.53 T
63 729 549 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
4 10 Q
0 X
(5.3  Endpoint segment mechanisms and policies) 63 502.36 T
1 11 Q
-0.11 (For any endpoint segment, the segment driver maintains the following invariants: \0501\051 the segment is associated) 63 479.69 P
0.56 (with a region in kernel memory) 63 466.69 P
0.56 (, \0502\051 the segment is associated with a region in interface memory) 204.07 466.69 P
0.56 (, and \0503\051 the) 494.18 466.69 P
0.6 (segment is not associated with any region in memory) 63 453.69 P
0.6 (. Case 3 is a transient condition that exists only when a) 301.08 453.69 P
-0.11 (segment is being created or destroyed. Orthogonal to maintaining the associations of segments to their backing) 63 440.69 P
-0.22 (storage is maintaining the set of mappings between segments and their backing storage. The virtual-to-physical) 63 427.69 P
0.66 (mappings between segments and their backing store are transient; the driver can unload them at any time. A) 63 414.69 P
0.07 (processor reference to a segment that has no mapping results in a pagefault, which is a synchronous trap taken) 63 401.69 P
0.03 (in the context of a process and which invokes the segment driver) 63 388.69 P
0.03 (\325) 348.73 388.69 P
0.03 (s pagefault routine. The faulting process will) 351.79 388.69 P
-0.11 (sleep in the segment driver) 63 375.69 P
-0.11 (\325) 181.52 375.69 P
-0.11 (s pagefault routine until a valid mapping for the segment is loaded, at which time it) 184.57 375.69 P
0.87 (resumes execution and retries the faulting instruction. It is precisely this ability to manipulate mappings be-) 63 362.69 P
0.89 (tween segments and their backing storage as well as to catch pagefaults that allows a multitude of endpoint) 63 349.69 P
0.96 (management policies to be implemented and evaluated. Whenever a process pagefaults on an endpoint seg-) 63 336.69 P
1.26 (ment, numerous actions can be taken: the process can be left sleeping in the pagefault routine, a hardware) 63 323.69 P
-0.21 (translation for the segment can be loaded, or the segment\325) 63 310.69 P
-0.21 (s backing store can be moved between host and inter-) 315.32 310.69 P
(face memory) 63 297.69 T
(,) 120.01 297.69 T
2 F
(etc.) 125.51 297.69 T
1 F
0.22 (Policies arise as a result of these mechanisms being applied. For example, one policy is to split the number of) 63 277.69 P
-0.28 (physical endpoints on the network interface into two sets. The \336rst set is used to cache the endpoints referenced) 63 264.69 P
0.27 (most recently from the processors. The second set is used to cache a disjoint set of endpoints referenced most) 63 251.69 P
0.88 (recently by arriving network messages. The driver could treat each set as a fully-associative endpoint cache) 63 238.69 P
-0.09 (with an LRU replacement policy) 63 225.69 P
-0.09 (. A clock-based algorithm, similar to the ones used to maintain physical mem-) 206.11 225.69 P
0.27 (ory page caches, could be used. \050Of course, moving an endpoint\325) 63 212.69 P
0.27 (s backing storage between host and interface) 350.68 212.69 P
0.78 (memory requires synchronizing with the interface\325) 63 199.69 P
0.78 (s message processor) 289.61 199.69 P
0.78 (.\051 The best endpoint to evict from the) 379.77 199.69 P
0.21 (network interface under various circumstances is an interesting research issue. T) 63 186.69 P
0.21 (o solve it adequately) 418.4 186.69 P
0.21 (, policies) 509.07 186.69 P
0.16 (must be subjected to realistic work-loads, as well as \322corner cases\323 such as when all endpoints have messages) 63 173.69 P
0.78 (to send or when all endpoints are waiting for on message arrival events. By not only managing the memory) 63 160.69 P
0.34 (that contains endpoints but knowing the data structure embedded on those pages, the driver can, for example,) 63 147.69 P
2.01 (distinguish those endpoints with nonempty send or receive pools from those waiting on communications) 63 134.69 P
(events.) 63 121.69 T
-0.06 (The driver has access to the kernel thread and process scheduling systems. This allows policies to couple com-) 63 101.69 P
-0.01 (munications, endpoint storage management, and process scheduling. Because the virtual-memory mechanisms) 63 88.69 P
0.19 (are easily composed into management policies, the challenge is to evaluate the policy space. For example, the) 63 75.69 P
63 72 549 720 C
138 523.03 474 709 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(EP_Seg #1) 158.75 656.58 T
(EP_Seg I) 157.62 644.55 T
(...) 157.62 638.53 T
(EP_Seg #N) 157.62 632.52 T
(...) 157.62 650.57 T
259.13 579.31 332.32 690.59 R
0.5 H
0 Z
N
(Endpoint) 277.39 660.71 T
(Segment) 278.23 633.62 T
(Driver) 282.68 606.54 T
384.53 657.01 417.18 691.09 R
N
(Network Interface SRAM) 355.79 696.18 T
384.53 684.07 416.05 684.07 2 L
2 Z
N
384.08 677.76 415.6 677.76 2 L
N
384.75 670.94 416.28 670.94 2 L
N
1 14 Q
(. . .) 389.03 662.73 T
384.3 578.51 416.96 645.68 R
0 Z
N
384.87 637.21 416.39 637.21 2 L
2 Z
N
384.87 629.6 416.39 629.6 2 L
N
384.87 621.38 416.39 621.38 2 L
N
(. . .) 391.88 612.14 T
1 10 Q
(Host Main Memory) 361.41 563.34 T
363.25 684.23 383.93 680.57 364.45 672.72 363.85 678.48 4 Y
V
216.83 663.19 363.85 678.48 2 L
3 H
N
J
370.23 645.56 381.68 641.97 370.07 638.94 370.15 642.25 4 Y
V
J
218.42 645.98 370.15 642.25 2 L
J
218.42 645.98 222.17 645.89 2 L
0.5 H
N
[7.386 6.401] 7.386 I
222.17 645.89 366.4 642.34 2 L
N
J
366.4 642.34 370.15 642.25 2 L
N
J
358.29 613.54 377.17 604.37 356.29 602.14 357.29 607.84 4 Y
V
216.83 632.36 357.29 607.84 2 L
3 H
N
144 529.03 468 552.69 R
7 X
V
4 9 Q
0 X
(Figure  13) 144 546.03 T
0 10 Q
(The pr) 189 546.03 T
(oblem of endpoint caching) 217.99 546.03 T
J
J
63 72 549 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "24" 29
%%Page: "25" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
531.63 729 63 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(25) 63 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Related W) 277.33 741.53 T
(ork) 320.67 741.53 T
549 729 63 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
1 11 Q
0 X
0.05 (strict LRU policy described above has the potentially unfortunate side-ef) 63 712.67 P
0.05 (fect of caching endpoints that are ref-) 383.74 712.67 P
1.54 (erenced infrequently from a processor) 63 699.67 P
1.54 (. On the other hand, it also evicts relatively inactive endpoints even) 235.96 699.67 P
0.19 (though an application can desire minimal latency and overhead when the endpoint is used. Following the lead) 63 686.67 P
0.6 (of standard virtual-memory management policies, application-controlled endpoint management is a plausible) 63 673.67 P
0.69 (and applicable option because it is unclear) 63 660.67 P
0.69 (,) 253.07 660.67 P
2 F
0.69 (a priori) 259.27 660.67 P
1 F
0.69 (, why any one static policy picked by the system will al-) 293.89 660.67 P
(ways perform well across a wide variety of dif) 63 647.67 T
(ferent applications.) 267.47 647.67 T
4 10 Q
(5.4  Initial experiences with Solaris segment drivers) 63 623.33 T
1 11 Q
0.05 (The \336rst prototype Solaris segment driver for endpoint management used the prepackaged) 63 600.67 P
2 F
0.05 (seg_mapdev) 463.24 600.67 P
1 F
0.05 ( driver) 517.62 600.67 P
0.05 (,) 546.25 600.67 P
0.81 (primarily because it existed and supported a restricted version of the more general mechanisms and policies) 63 587.67 P
0.57 (just discussed. It also allows multiple processes to map the same pages of device memory while maintaining) 63 574.67 P
0.81 (the invariant that only one mapping is loaded at any time. Its functionality is thus motivated by the require-) 63 561.67 P
0.02 (ments of framebuf) 63 548.67 P
0.02 (fers) 144.09 548.67 P
5 12 Q
0.04 (-) 163.35 548.67 P
1 11 Q
0.02 ( to allow multiple processes to establish multiple mappings to common device memo-) 170.54 548.67 P
0.51 (ry) 63 535.67 P
0.51 (. Whenever a process references unmapped memory) 71.45 535.67 P
0.51 (, a preregistered callback function is invoked, allowing) 303.79 535.67 P
-0.27 (the driver to perform a customized context switch of the device state. While this prepackage segment driver en-) 63 522.67 P
0.48 (abled rapid prototyping, it enforced the policy that a process\325) 63 509.67 P
0.48 (s context) 335.56 509.67 P
2 F
0.48 (e.g., endpoint) 378.68 509.67 P
1 F
0.48 (, must be resident on the) 439.05 509.67 P
0.46 (card before the endpoint can be accessed. Thus, the capability to have endpoints backed by either host or de-) 63 496.67 P
0.76 (vice memory and have active mappings in either case was unavailable. Policies built from this driver would) 63 483.67 P
0.23 (therefore have inadequate control over loading and unloading mappings as well. However) 63 470.67 P
0.23 (, the ability to setup) 460.99 470.67 P
0.23 (simple test cases where multiple processes mapped the network-interface memory in a demand-paged fashion) 63 457.67 P
(demonstrated that further development of a fully-featured segment drivers was warranted.) 63 444.67 T
63 410.17 549 415 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
4 12 Q
0 X
0 0 0 1 0 0 0 K
(6  Related W) 63 419 T
(ork) 134.14 419 T
1 11 Q
0.23 (Network interfaces and their integration with host operating systems are areas of ongoing research, and of the) 63 389.83 P
0.42 (many signi\336cant projects in this \336eld, this section discusses \336ve of them. Each one is summarized by a state-) 63 376.83 P
0.66 (ment of its core concepts, the intended applications or domains of use, and a comparison with the work pre-) 63 363.83 P
0.35 (sented in this document. The \336ve projects are Princeton University\325) 63 350.83 P
0.35 (s SHRIMP Multicomputer) 363.16 350.83 P
0.35 (, the University) 480.16 350.83 P
0.58 (of Arizona\325) 63 337.83 P
0.58 (s Osiris A) 113.98 337.83 P
0.58 (TM network adaptor project, Hewlett Packard\325) 157.93 337.83 P
0.58 (s Hamlyn project, the SUNMOS system,) 366.73 337.83 P
0.22 (and the NORMA IPC system. These system are discussed and evaluated based upon varying amounts of pub-) 63 324.83 P
0.71 (lished and unpublished works about them, which makes evaluating certain speci\336c or low-level details dif) 63 311.83 P
0.71 (\336-) 539.22 311.83 P
0.3 (cult. From the experience of specifying the or) 63 298.83 P
0.3 (ganization of and interface to the new active message system, it) 265.89 298.83 P
0.14 (is often a challenge to specify fully and to de\336ne clearly a communications system \050particularly one under de-) 63 285.83 P
(velopment\051 such that readers will understand its various nuances.) 63 272.83 T
4 10 Q
(6.1  Princeton\325) 63 248.5 T
(s SHRIMP multicomputer) 130.99 248.5 T
1 11 Q
0.32 (The Princeton SHRIMP Multicomputer [33], [34] uses re\337ective memory as a communications resource. The) 63 225.83 P
1.09 (idea behind re\337ective memory is to establish associations between virtual-memory regions in dif) 63 212.83 P
1.09 (ferent pro-) 501.18 212.83 P
0.34 (cesses and on dif) 63 199.83 P
0.34 (ferent processors. Once setup, stores into local pages of re\337ective memory are automatically) 138.66 199.83 P
0.88 (\322published\323 to the other associated pages. Moreover) 63 186.83 P
0.88 (, loads from a re\337ective memory page return the values) 297.89 186.83 P
0.89 (that are present locally) 63 173.83 P
0.89 (. Re\337ective memory) 164.86 173.83 P
0.89 (, however) 255.45 173.83 P
0.89 (, has weak memory consistency and coherency models,) 299.27 173.83 P
-0.1 (but the required hardware and software is simple and inexpensive, and its simplicity enables low-overhead and) 63 160.83 P
-0.03 (high-bandwidth data transport. Despite the use of a Paragon routing backplane, SHRIMP systems are intended) 63 147.83 P
0.47 (to be inexpensive multicomputers. Published papers reveal that its application domain is unclear but presum-) 63 134.84 P
(ably includes parallel programs and other) 63 121.84 T
(, ad hoc, applications.) 244.94 121.84 T
-0.07 (SHRIMP provides protected network multiprogramming. It uses a collection of trusted third-parties, as well as) 63 101.84 P
-0.05 (the operating systems running on each SHRIMP node, to manage the re\337ective memory mappings. Once map-) 63 88.84 P
1.04 (pings are installed, the network interface remains attentive to the network and snoops memory-bus transac-) 63 75.84 P
FMENDPAGE
%%EndPage: "25" 30
%%Page: "26" 31
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
80.36 729 549 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(26) 536.77 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Related W) 277.33 741.53 T
(ork) 320.67 741.53 T
63 729 549 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
1 11 Q
0 X
0.73 (tions. It also uses page tables to enforce protection and to multiplex traf) 63 712.67 P
0.73 (\336c on and of) 386.49 712.67 P
0.73 (f the network. The new) 443.77 712.67 P
0.25 (active message interface shared similar goals of enabling protected network multiprogramming. The common) 63 699.67 P
0.65 (network-interface or) 63 686.67 P
0.65 (ganization mentioned in this paper suggests that each network interface be viewed as an) 153.55 686.67 P
0.15 (active agent that performs per) 63 673.67 P
0.15 (-message tag checks. The host operating system assists with caching and paging) 194.75 673.67 P
1.58 (endpoints on and of) 63 660.67 P
1.58 (f the network interface. The endpoint segment driver manages data structures that are) 154.62 660.67 P
(equivalent to the network-interface page-tables in SHRIMP) 63 647.67 T
(.) 323.9 647.67 T
0.56 (The SHRIMP Base Library \050SBL\051 document [35] describes how applications control which memory updates) 63 627.67 P
0.01 (generate events and call user) 63 614.67 P
0.01 (-speci\336ed handler functions. The noti\336cation events are queued in the system, but) 189.28 614.67 P
0.27 (surprisingly) 63 601.67 P
0.27 (, the SBL document asks programmers to be careful about how long the handlers execute because) 114.84 601.67 P
-0.1 (the event queues have a \336nite length. This suggests they can over\337ow and events could be lost. The new active) 63 588.67 P
2.27 (message interface has a dif) 63 575.67 P
2.27 (ferent event management mechanism: it projects events to applications using) 190.39 575.67 P
1.46 (thread-synchronization variables. W) 63 562.67 P
1.46 (ith binary semaphores, no issues arise with over\337ows of event queues.) 225.24 562.67 P
0.08 (Programs avoid using the heavy-weight process signal mechanisms of UNIX for message event handling. The) 63 549.67 P
0.79 (integration of events with threads and endpoints helps reasoning about communications in threaded applica-) 63 536.67 P
(tions.) 63 523.67 T
0.09 (Although the SHRIMP conference and journal papers are focused on network-interface designs, they lack dis-) 63 503.67 P
0.11 (cussions about error and fault models and how applications detect and recover from node failures. Support for) 63 490.67 P
0.49 (fault-tolerant or highly-available applications is apparently not a focal point. In contrast, the new active mes-) 63 477.67 P
0.13 (sage speci\336cation is lengthier than its predecessors because it attempts to provide a model for reasoning about) 63 464.67 P
(communications \322when things go wrong\323. Its undeliverable message handling model is one example of this.) 63 451.67 T
0.3 (The SHRIMP system provides memory-based communications and very low-overhead primitives, although it) 63 431.67 P
-0.15 (does not provide atomic memory operations against locations in re\337ective memory) 63 418.67 P
-0.15 (. It is dif) 425.58 418.67 P
-0.15 (\336cult to build an ef-) 462.21 418.67 P
-0 (\336cient message queue, and the cost of the obvious alternative approach of scanning pages for arriving messag-) 63 405.67 P
0.29 (es scales poorly \050linearly\051. Queues are fundamental to many communication protocols. W) 63 392.67 P
0.29 (ith active messages,) 460.74 392.67 P
0.23 (one can construct queues and other data structures as well as perform remote operations atomically) 63 379.67 P
0.23 (. Both sys-) 501.17 379.67 P
-0.27 (tems face the challenge of providing fast event up-calls. In SHRIMP they are needed to execute handlers and in) 63 366.67 P
(active messages to post synchronization variables.) 63 353.67 T
4 10 Q
(6.2  The Arizona Osiris project) 63 329.33 T
1 11 Q
0.12 (The Osiris Project [36] investigates the integration of high-performance A) 63 306.67 P
0.12 (TM host adaptors into the Mach op-) 389.42 306.67 P
1.2 (erating system. The principal focus in this work is on integration strategies that deliver low latencies, high) 63 293.67 P
0.16 (bandwidths, and optimal end-to-end performance. A key contribution to this ef) 63 280.67 P
0.16 (fort is prototyping and evaluat-) 411.48 280.67 P
0.63 (ing application device channels \050ADC\325) 63 267.67 P
0.63 (s\051. ADC\325) 236.59 267.67 P
0.63 (s allow pages of card memory to be mapped into application) 276.94 267.67 P
-0.1 (address spaces. Associated with each end of an application device channel are chains of fbufs, containing mes-) 63 254.67 P
-0.03 (sages for sending and buf) 63 241.67 P
-0.03 (fers for receiving messages. The project focus is apparently on network interface and) 175.12 241.67 P
-0.12 (operating systems research. No speci\336c mention of tar) 63 228.67 P
-0.12 (get applications is made, although Osiris serves as an ef-) 300.83 228.67 P
(\336cient A) 63 215.67 T
(TM-based infrastructure for distributed system applications.) 99.97 215.67 T
0.74 (The Osiris adaptor card not only manages segmentation and reassembly of lar) 63 195.67 P
0.74 (ge messages, but it also deter-) 413.35 195.67 P
0.3 (mines when to interrupt the host for message arrival events. It also supports protected data transport since the) 63 182.67 P
-0.15 (host virtual memory system managed device page mappings via ADC\325) 63 169.67 P
-0.15 (s. The memory resources of the network) 372.4 169.67 P
-0.04 (interface, their containment of distinct send and receive structures, and the capacity of the host to map individ-) 63 156.67 P
(ual ADC\325) 63 143.67 T
(s enable protected network multiprogramming.) 105.47 143.67 T
0.23 (The system, however) 63 123.67 P
0.23 (, lacks \337exible control over event generation because the system provides a single \322mes-) 156.81 123.67 P
-0.06 (sage arrival\323 event. These events either wake threads in the kernel ADC driver or user) 63 110.67 P
-0.06 (-level task threads, wait-) 441.04 110.67 P
0.08 (ing to process messages. The published paper was unclear if the event upcall was into a Mach kernel object or) 63 97.67 P
0.46 (into a Mach task. The naming and protection models used A) 63 84.67 P
0.46 (TM VCI\325) 331.89 84.67 P
0.46 (s but the paper did not address how the) 373.61 84.67 P
FMENDPAGE
%%EndPage: "26" 31
%%Page: "27" 32
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
531.63 729 63 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(27) 63 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Related W) 277.33 741.53 T
(ork) 320.67 741.53 T
549 729 63 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
1 11 Q
0 X
-0.1 (system scales once the VCI space is exhausted; message queues are not discussed. The network interface or) 63 712.67 P
-0.1 (ga-) 534.95 712.67 P
0.01 (nization and its integration into the host operating system supports overlapping of communication and compu-) 63 699.67 P
0.82 (tation, with an emphasis on of) 63 686.67 P
0.82 (f-loading computation and interrupt handling burdens from the host. The new) 199.52 686.67 P
0.11 (active message speci\336cation has more general naming, protection, and event models. For example, rather than) 63 673.67 P
1.12 (associating a chain of fbufs with an ADC, it associates a single application-speci\336ed virtual address region) 63 660.67 P
0.23 (with an endpoint. The active message interface provides applications more control over) 63 647.67 P
2 F
0.23 (which) 453.42 647.67 P
1 F
0.23 ( memory buf) 479.7 647.67 P
0.23 (fer) 536.79 647.67 P
(receives which message.) 63 634.67 T
0.03 (W) 63 614.67 P
0.03 (ith respect to the endpoint paging prototype system, it ef) 72.94 614.67 P
0.03 (fectively reinvents ADC\325) 321.15 614.67 P
0.03 (s and extends them to sup-) 431.81 614.67 P
-0.06 (port more channels \050or endpoints\051 that the physical memory on the network adaptor card alone permits. In oth-) 63 601.67 P
0.94 (er words, the endpoint paging system virtualizes the network-interface memory resources, and therefore it\325) 63 588.67 P
0.94 (s) 544.72 588.67 P
1.61 (possible to support more endpoints than the physical interface memory capacity alone allows. The design) 63 575.67 P
0.02 (clearly extends ADC\325) 63 562.67 P
0.02 (s by viewing the network-interface memory as a cache of endpoints, where host memory) 158.35 562.67 P
0.18 (can be used as a backing storage for all but the hottest endpoints. The implementation is now at a stage where) 63 549.67 P
1.27 (the feasibility of paged \322application device channels\323 can be demonstrated. Additionally) 63 536.67 P
1.27 (, endpoints in host) 464.51 536.67 P
0.75 (memory can send and receive messages, though with less performance compared to endpoints cached in the) 63 523.67 P
(network interface.) 63 510.67 T
4 10 Q
(6.3  Hewlett Packard\325) 63 486.33 T
(s Hamlyn project) 162.12 486.33 T
1 11 Q
-0.07 (The HP Hamlyn [37] Project is building a multicomputer network interface, which is currently being emulated) 63 463.67 P
-0.25 (on the Myrinet LANai network interface [9]; a set of communication protocols, RA) 63 450.67 P
-0.25 (TS, provide communication) 426.36 450.67 P
0.1 (services. The Hamlyn paper discusses both the network interface\325) 63 437.67 P
0.1 (s macro-architecture and the communication) 352.48 437.67 P
-0.13 (protocols that use the interface. Hamlyn supports direct application - network interface interactions that bypass) 63 424.67 P
0.15 (the OS, zero-copy implementations of bulk data transfers, protected network multiprogramming, and message) 63 411.67 P
-0.03 (delivery events. The RA) 63 398.67 P
-0.03 (TS protocols support remote writes, remote writes-with-noti\336cation, reliable datagram) 169.21 398.67 P
-0.21 (transport with no expected reply) 63 385.67 P
-0.21 (, reliable datagram transport with an expected reply) 203.8 385.67 P
-0.21 (, remote read, reliable byte-) 428.27 385.67 P
-0.2 (streams, and initial request response operations \050to make initial \322unexpected\323 contact with remote parties\051. The) 63 372.67 P
0.5 (paper indicates that both the network interface and the RA) 63 359.67 P
0.5 (TS protocols should support general-purpose com-) 323.18 359.67 P
(munications within the multicomputer) 63 346.67 T
(.) 230.76 346.67 T
0.66 (In Hamlyn, an application has one \322send terminus\323 and multiple \322send areas\323. A send area is a collection of) 63 326.67 P
-0.09 (data segments mapped into their virtual address spaces. The Hamlyn model is an explicit sender) 63 313.67 P
-0.09 (-speci\336ed one-) 484.03 313.67 P
1.05 (way memory copy) 63 300.67 P
1.05 (. The sender speci\336es the receiver) 146.26 300.67 P
1.05 (\325) 300.99 300.67 P
1.05 (s send area, key) 304.05 300.67 P
1.05 (, and of) 376.13 300.67 P
1.05 (fset into the array of data seg-) 411.33 300.67 P
0.68 (ments. The physical security of the tar) 63 287.67 P
0.68 (get networks enables a protection system using 32-bit \322keys\323: senders) 235.22 287.67 P
0.1 (can write into a receiver) 63 274.67 P
0.1 (\325) 170.09 274.67 P
0.1 (s send area if the key in the sender) 173.14 274.67 P
0.1 (\325) 325.84 274.67 P
0.1 (s message matches the key in the sender) 328.9 274.67 P
0.1 (-speci\336ed) 506.23 274.67 P
0.92 (send area segment. Message arrivals can cause events to be enqueued into a) 63 261.67 P
2 F
0.92 (per) 410.92 261.67 P
0.92 (-pr) 425.36 261.67 P
0.92 (ocess) 438.4 261.67 P
1 F
0.92 ( noti\336cation queue;) 462.23 261.67 P
0.28 (message arrivals interrupt sleeping destination processes only) 63 248.67 P
0.28 (. As in SHRIMP) 335.29 248.67 P
0.28 (, the noti\336cation queues can ap-) 407.65 248.67 P
0.39 (parently over\337ow with unspeci\336ed consequences. Interrupts are directed at processes, not threads. In the new) 63 235.67 P
(active message speci\336cation, the precision with which events are delivered is more precise.) 63 222.67 T
-0.03 (Hamlyn assumes a network with low transmission error rates. This contrasts somewhat with the design philos-) 63 202.67 P
-0.13 (ophy behind the new active message interface which acknowledges that even if network fabrics were 100% re-) 63 189.67 P
1.66 (liable, the network hosts certainly are not. The error and message delivery model are required to provide) 63 176.67 P
-0.04 (meaningful communication facilities in a real-world system. In the Hamlyn paper) 63 163.67 P
-0.04 (, there was no mention, how-) 421.17 163.67 P
0.19 (ever) 63 150.67 P
0.19 (, of error and fault models or how application detects the failure of a remote node, let alone how it should) 81.49 150.67 P
0.05 (recover) 63 137.67 P
0.05 (. There was also no mention of building message queues or how either the interface or RA) 95.37 137.67 P
0.05 (TS protocols) 492.42 137.67 P
-0.13 (support their ef) 63 124.67 P
-0.13 (\336cient construction. However) 129.75 124.67 P
-0.13 (, the low-level support for scatter) 259.5 124.67 P
-0.13 (, gather and broadcast operations) 404.42 124.67 P
(in Hamlyn could be quite useful.) 63 111.67 T
0.69 (In general, the relationship between Hamlyn and RA) 63 91.67 P
0.69 (TS is confusing. Hamlyn appears to be a network-inter-) 298.78 91.67 P
0.46 (face macro-architecture and RA) 63 78.67 P
0.46 (TS appears to be a higher) 203.96 78.67 P
0.46 (-level set of protocols optimized for it. The new ac-) 318.17 78.67 P
FMENDPAGE
%%EndPage: "27" 32
%%Page: "28" 33
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
80.36 729 549 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(28) 536.77 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Related W) 277.33 741.53 T
(ork) 320.67 741.53 T
63 729 549 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
1 11 Q
0 X
2.48 (tive message speci\336cation is at an intermediate level of abstraction. It walks the \336ne line of providing) 63 712.67 P
0.2 (primitives and simple abstractions that would be ef) 63 699.67 P
0.2 (\336ciently implementable on hardware, such as Hamlyn, and) 288.8 699.67 P
1.02 (of providing primitives that ef) 63 686.67 P
1.02 (\336ciently compose into the protocols, such as RA) 199.5 686.67 P
1.02 (TS. Hamlyn, RA) 418.7 686.67 P
1.02 (TS, and this) 494.09 686.67 P
(document speak at dif) 63 673.67 T
(ferent levels of abstraction.) 159.65 673.67 T
1.06 (Lastly) 63 653.67 P
1.06 (, the paper is incorrect in stating that the active message model requires application gang scheduling.) 89.79 653.67 P
-0.25 (Gang scheduling is a performance optimization that will bene\336t both latency-sensitive Hamlyn and active mes-) 63 640.67 P
(sage applications alike.) 63 627.67 T
4 10 Q
(6.4  SUNMOS) 63 603.33 T
1 11 Q
-0.25 (SUNMOS [38] divides a set of computing nodes on a high-performance network into ones running a fully-gen-) 63 580.67 P
-0.1 (eral operating system, as well as ones running a bare-bones micro kernel. It explores the potential performance) 63 567.67 P
-0.24 (of a specialized micro-kernel operating system. Besides specializing the function of speci\336c nodes, other SUN-) 63 554.67 P
-0.03 (MOS specializations include: removing virtual-memory facilities, optimizing for the execution of a single par-) 63 541.67 P
1.13 (allel process on dedicated hardware, and providing a) 63 528.67 P
2 F
1.13 (simple) 306.36 528.67 P
1 F
1.13 ( message-passing library with send and receive) 335.08 528.67 P
-0.05 (operations on un-tagged messages. It\325) 63 515.67 P
-0.05 (s focus does not obviously include more common or general-purpose ap-) 228.7 515.67 P
0.87 (plications such as clients and servers. These applications would bene\336t from high performance communica-) 63 502.67 P
2.61 (tions as well, although supporting them would require undoing some of the specializations for parallel) 63 489.67 P
(programs.) 63 476.67 T
0.02 (SUNMOS does not provide an infrastructure with optimized communication for mainstream applications such) 63 456.67 P
0.13 (as client/server applications or data base applications that require per) 63 443.67 P
0.13 (-node multiprogramming. A major short-) 367.3 443.67 P
-0.17 (coming of SUNMOS is its specialization to space-shared parallel programs and its lack of an adequate scalable) 63 430.67 P
0.52 (I/O system. T) 63 417.67 P
0.52 (o its credit, it does provides parallel applications with direct network access and nearly optimal) 123.46 417.67 P
(end-to-end performance at the expense of standard distributed and parallel system functionality) 63 404.67 T
(.) 481.73 404.67 T
0.31 (The PUMA message passing library provides traditional send and receive functions, but lacks buf) 63 384.67 P
0.31 (fer tags and) 497.05 384.67 P
0.42 (traditional tag matching functions. Thus, applications cannot control which messages are received into which) 63 371.67 P
0 (buf) 63 358.67 P
0 (fers. In this respect, the model of buf) 77.46 358.67 P
0 (fer management is similar to Osiris\325 use of fbufs chains. It also resem-) 239.5 358.67 P
0.53 (bles remote queue models such as [26]. The new active message interface speci\336cally addresses the need for) 63 345.67 P
1.3 (composing independent software packages into programs and maintaining their independence, although re-) 63 332.67 P
(moving tags from the message passing library complicates this issue.) 63 319.67 T
0.14 (SUNMOS and the new domain of active messages are opposites in most respects except two: both support di-) 63 299.67 P
-0.24 (rect application - network interface interactions that bypass the OS, and both strive for the best possible end-to-) 63 286.67 P
0.14 (end performance. However) 63 273.67 P
0.14 (, their problem domains are signi\336cantly dif) 182.88 273.67 P
0.14 (ferent, lar) 376.96 273.67 P
0.14 (gely because the intent of the) 419.66 273.67 P
-0.22 (new active message speci\336cation is to provide a portable, general-purpose communications API that supports a) 63 260.67 P
(much broader range of applications than just parallel programs.) 63 247.67 T
4 10 Q
(6.5  NORMA IPC) 63 223.33 T
1 11 Q
0.09 (NORMA \050NO Remote Memory Access\051 IPC [39] is an extension of the Mach IPC mechanisms for multicom-) 63 200.67 P
-0.14 (puters. It is a kernel-based communications facility for protected, multi-programmed, task-to-task communica-) 63 187.67 P
1.6 (tions. Mach) 63 174.67 P
2 F
1.6 (tasks) 120.9 174.67 P
1 F
1.6 ( communicate using) 142.9 174.67 P
2 F
1.6 (ports) 239.07 174.67 P
1 F
1.6 ( that have distinct) 261.68 174.67 P
2 F
1.6 (send rights) 348.76 174.67 P
1 F
1.6 ( and) 398.95 174.67 P
2 F
1.6 ( r) 419.19 174.67 P
1.6 (eceive rights) 427.41 174.67 P
1 F
1.6 (. Ports have a) 484.92 174.67 P
0.5 (private, kernel-managed memory area used to maintain lists of and rights to all other ports with which a port) 63 161.67 P
0.74 (can communicate. Messages are passed between ports providing the sender and receive hold the appropriate) 63 148.67 P
-0.17 (send-and-receive rights, respectively) 63 135.67 P
-0.17 (. One task can receive messages from a port; many can send messages to a) 223.54 135.67 P
0.95 (port. The transport protocols are traditional: they involve copying data from the sending task down into the) 63 122.67 P
0.55 (kernel, across the network, and up into the receiving task. The IPC facilities are intended to support general-) 63 109.67 P
0.63 (purpose communications such as datagram or remote procedure call \050RPC\051 systems. Because the focus is on) 63 96.67 P
-0 (functionality and not performance, issues such as direct task - network interface interactions are not discussed.) 63 83.67 P
FMENDPAGE
%%EndPage: "28" 33
%%Page: "29" 34
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
531.63 729 63 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(29) 63 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Summary) 285.49 741.53 T
549 729 63 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
1 11 Q
0 X
-0.04 (NORMA IPC assumes an initial, static, domain of a multicomputer) 63 712.67 P
-0.04 (. It lacks any mention of or emphasis on di-) 358.11 712.67 P
-0.18 (rect application - network interface interaction. All communications are mediated by the kernel which involves) 63 699.67 P
0.84 (traps and multiple protection boundary crossing and data copying. NORMA IPC and active messages tar) 63 686.67 P
0.84 (get) 535.56 686.67 P
0.13 (dif) 63 673.67 P
0.13 (ferent design spaces. Mach IPC, of which NORMA IPC is an extension for multicomputers, is used for im-) 75.02 673.67 P
-0.14 (plementing RPC\325) 63 660.67 P
-0.14 (s and bulk transfers. RPC\325) 138.96 660.67 P
-0.14 (s are signi\336cantly dif) 253.61 660.67 P
-0.14 (ferent from the request and reply operations in) 345.58 660.67 P
0.7 (the new active message interface. It can be ar) 63 647.67 P
0.7 (gued that both NORMA IPC mechanisms and active messages) 267.83 647.67 P
0.47 (use capabilities \050though port rights are more \322traditional\323 capabilities\051. The NORMA IPC system is certainly) 63 634.67 P
0.46 (more complicated. For example, it maintains reference counters to capabilities and can notify receivers when) 63 621.67 P
0.25 (no other ports exist with send rights. The active message protection model follows V and Amoeba, where ob-) 63 608.67 P
(ject identi\336ers and tags form user) 63 595.67 T
(-level capabilities \050without reference counts\051.) 209.73 595.67 T
4 10 Q
(6.6  Summary) 63 571.33 T
1 11 Q
-0.2 (From the discussion of these \336ve related projects, it is clear that active messages have overlapping aspects with) 63 548.67 P
0.73 (all of them. W) 63 535.67 P
0.73 (ith SHRIMP) 128.29 535.67 P
0.73 (, Osiris and Hamlyn, for instance, the drive for simplicity and performance stems) 183.12 535.67 P
0.09 (from direct application - network interface interactions. Another area of overlap with Osiris is the focus on in-) 63 522.67 P
-0.11 (tegrating the network interface with the host operating system, and the virtualization of the interface\325) 63 509.67 P
-0.11 (s physical) 505.41 509.67 P
0.02 (resources. The new active message interface is as general as that of the NORMA IPC system. Moreover) 63 496.67 P
0.02 (, all of) 520.54 496.67 P
0.2 (these systems faced with a common set of issues: naming, protection, error models, message delivery models,) 63 483.67 P
-0.08 (events and noti\336cation. The active message speci\336cation is far more general than these systems with respect to) 63 470.67 P
-0.1 (its position on naming, more forward-looking in its treatment of threads and events, and more realistic because) 63 457.67 P
0.19 (of its explicit message delivery model and handling of undeliverable messages. It is fortunate that active mes-) 63 444.67 P
1.12 (sage implementations can borrow from the successes of these related systems and yet can attempt to avoid) 63 431.67 P
(their pitfalls.) 63 418.67 T
63 384.17 549 389 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
4 12 Q
0 X
0 0 0 1 0 0 0 K
(7  Summary) 63 393 T
1 11 Q
0.3 (Networks continue to evolve with increasing link bandwidths and decreasing switch latencies. Network inter-) 63 363.83 P
-0.06 (faces also continue to develope and to exhibit many diverse or) 63 350.83 P
-0.06 (ganizations. At the present time, there is cluster-) 336.51 350.83 P
4.14 (ing in their design space around or) 63 337.83 P
4.14 (ganizations with autonomous, embedded message processors \050or) 239.76 337.83 P
0.86 (controllers\051 that operate from local memories and that support DMA and PIO interfaces for sending and re-) 63 324.83 P
-0.27 (ceiving messages. As link bandwidths increase, network-interface resources, their or) 63 311.83 P
-0.27 (ganizations, and their inte-) 432.48 311.83 P
0.23 (gration into a host become increasing important. The software overheads paid to send or to receive a message) 63 298.83 P
1.39 (directly determine how ef) 63 285.83 P
1.39 (fectively an application uses the available network performance. For low-latency) 180.3 285.83 P
0.66 (short message communication, direct application-network interface interaction is essential. For optimal short) 63 272.83 P
0.65 (message performance, both the sending and receiving applications should be co-scheduled. For optimal bulk) 63 259.83 P
1.93 (data transfers, for applications with \322enough\323 locality) 63 246.83 P
1.93 (, intermediate data copies and movement should be) 310.02 246.83 P
0.26 (avoided. Zero-copy bulk transfer implementations require that the necessary memory resources for the source) 63 233.83 P
0.44 (and destination be pre-initialized and readied for use in DMA transfers. Thus, the memory resources must be) 63 220.83 P
0.25 (similarly co-scheduled for optimal bulk transfer performance, though this is independent of the co-scheduling) 63 207.83 P
(the associated) 63 194.83 T
2 F
(pr) 127.15 194.83 T
(ocesses) 136.52 194.83 T
1 F
(.) 169.51 194.83 T
0.33 (Motivated by these emer) 63 174.83 P
0.33 (ging networks and a common or) 172.86 174.83 P
0.33 (ganization for contemporary network interfaces, this) 316.39 174.83 P
1.13 (document describes a new) 63 161.83 P
1.13 (, portable, and general-purpose active message communications interface. It used) 181.44 161.83 P
0.4 (previous active message interfaces as a starting point, given their successes in constructing high-performance) 63 148.84 P
0.05 (application, communication libraries and protocols. These previous interface implementations were tailored to) 63 135.84 P
0.28 (the peculiar) 63 122.84 P
0.28 (, predetermined environments of commercial MPPs. For example, some required gang-scheduling) 114.47 122.84 P
0.78 (of parallel processes that use them and others required handlers to execute within a predetermined length of) 63 109.84 P
1.06 (time. Such implementation artifacts, however) 63 96.84 P
1.06 (, no longer in\337uence the interface semantics. Additionally) 267.21 96.84 P
1.06 (, the) 529 96.84 P
1.03 (success at unifying previous active message interfaces into the Generic Active Messages API demonstrated) 63 83.84 P
FMENDPAGE
%%EndPage: "29" 34
%%Page: "30" 35
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
80.36 729 549 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(30) 536.77 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Summary) 285.49 741.53 T
63 729 549 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
1 11 Q
0 X
-0.26 (that active messages are a portable and ef) 63 712.67 P
-0.26 (\336cient communication abstraction. These factors led us to believe that) 243.36 712.67 P
(the time is right to bring a new speci\336cation of active messages into the mainstream.) 63 699.67 T
0.58 (But bringing active messages into the mainstream requires evolving previous naming and protection models,) 63 679.67 P
0.67 (error and message delivery models, and integrating active messages, threads, and events. The naming model) 63 666.67 P
1.15 (enables client/server and peer/peer communication, where the name space of communicating entities is dy-) 63 653.67 P
-0.17 (namic. The protection model is simple and provides a high-degree of protection, given well-chosen tags from a) 63 640.67 P
0.68 (lar) 63 627.67 P
0.68 (ge sparse tag space. The enhanced message delivery and fault model speci\336es the conditions under which) 74.41 627.67 P
0.22 (messages become undeliverable and then how they are handled. Returning all undeliverable messages to their) 63 614.67 P
0.63 (senders allows fault-tolerant and high-available applications, such as \336le systems, operating systems, and in-) 63 601.67 P
-0.16 (formation servers to be constructed. The ability of the network interfaces to exert control over the physical net-) 63 588.67 P
1.12 (work supports handling undeliverable messages in an intelligent and useful manner) 63 575.67 P
1.12 (. Use of the interface in) 440.17 575.67 P
0.65 (multi-threaded programs and on multiprocessor machines, for instance, led to the integration of communica-) 63 562.67 P
2.41 (tion events and noti\336cations with thread-synchronization mechanisms, rather than clumsy process signal) 63 549.67 P
-0.12 (mechanisms or ad hoc interrupt systems. This integration enables event-driven execution of multi-threaded ap-) 63 536.67 P
1.11 (plications, and permits implementations to exploit local processor parallelism when sending, receiving, and) 63 523.67 P
(handling active messages.) 63 510.67 T
0.02 (V) 63 490.67 P
0.02 (irtualization of the physical network resources from applications to their endpoints is a key requirement. The) 70.28 490.67 P
0.45 (success of the prototype endpoint paging system and the ease with which we were able to use the Solaris ad-) 63 477.67 P
0.12 (dress space segment drivers to experiment with solutions bolstered con\336dence that a complete solution is pos-) 63 464.67 P
0.52 (sible. Furthermore, it became clear from the initial studies that while the mechanisms for managing endpoint) 63 451.67 P
1 (backing storage and endpoint mappings are readily available, the space of endpoint caching and scheduling) 63 438.67 P
-0.17 (policies needs to be thoroughly investigated. The ability of the host to send and receive messages for endpoints) 63 425.67 P
0.76 (in main memory) 63 412.67 P
0.76 (, and the integration of the network, the virtual memory system, and the process scheduling) 136.54 412.67 P
(system makes possible a host of novel implementations and studies.) 63 399.67 T
0.81 (Finally) 63 379.67 P
0.81 (, appendices A and B specify the new interface. They addresses previous shortcomings with minimal) 93.46 379.67 P
0.7 (new) 63 366.67 P
0.7 (, but necessary) 80.61 366.67 P
0.7 (, functionality) 146.37 366.67 P
0.7 (. The speci\336cation generalizes the active message paradigm yet retains their) 208.08 366.67 P
0.17 (simplicity and architectural integrity) 63 353.67 P
0.17 (. Although tempted to add new functionality and explore alternative com-) 223.19 353.67 P
1.18 (munication models, the interface stays with an active message model. This is not a judgement of the other) 63 340.67 P
0.35 (models, merely a consequence of deciding that moving current active message functionality and performance) 63 327.67 P
(into the mainstream has the highest priority) 63 314.67 T
(.) 253.55 314.67 T
4 10 Q
(7.1  Current status) 63 290.33 T
1 11 Q
-0.03 (For the Berkeley NOW project) 63 267.67 P
1 8.8 Q
-0.03 (5) 199.12 272.07 P
1 11 Q
-0.03 (, design and implementation of the new active message interface is proceeding) 203.52 267.67 P
0.04 (using UltraSP) 63 254.67 P
0.04 (ARC-1 workstations running Solaris 2.5 with a Myrinet network. A) 123.45 254.67 P
2 F
0.04 (r) 424.48 254.67 P
0.04 (efer) 428.35 254.67 P
0.04 (ence) 445.05 254.67 P
1 F
0.04 ( implementation of) 465.2 254.67 P
0.93 (the speci\336cation using UDP sockets has been completed. An independent ef) 63 241.67 P
0.93 (fort is underway at Cornell that) 406.59 241.67 P
63 208 549 226 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
64 217.94 306 217.94 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
1 11 Q
0 X
0 0 0 1 0 0 0 K
0.63 (5. The Berkeley NOW system is a collection of workstations on a low-latency and high-bandwidth switched) 63 200.67 P
0.5 (network. Participation in the NOW grants bene\336ts and privileges to its members. For example, the collective) 63 188.67 P
-0.12 (disk, memory) 63 176.67 P
-0.12 (, and cup resources of the system are available to members and their serial and parallel programs.) 122.66 176.67 P
-0.09 (Membership in the NOW relinquishes complete local control over a workstation and permits local machine re-) 63 164.67 P
0.04 (sources to be managed by and used for the bene\336t of the lar) 63 152.67 P
0.04 (ger collective. The constituent workstations can be) 325.42 152.67 P
0 (personal computers \050PCs\051; the distinguishing feature [8] is the presence of a full-functionality) 63 140.67 P
0 (, time-shared op-) 474.15 140.67 P
0.63 (erating system such as UNIX. The Berkeley NOW uses single and multiprocessor SP) 63 128.67 P
0.63 (ARC workstations run-) 445.07 128.67 P
0.13 (ning Solaris 2.5. The workstations reside in machine rooms and in laboratory workspaces. At a high-level, the) 63 116.67 P
0.23 (machines have homogeneous operating systems and network interface implementations. However) 63 104.67 P
0.23 (, at a lower) 495.99 104.67 P
0.23 (-) 545.34 104.67 P
1.36 (level, the machines have heterogeneous instruction set architectures and memory system or) 63 92.67 P
1.36 (ganization. The) 479.21 92.67 P
(Berkeley NOW uses the Myrinet network and LANai network interface manufactured by Myricom, Inc.) 63 80.67 T
FMENDPAGE
%%EndPage: "30" 35
%%Page: "31" 36
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
531.63 729 63 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(31) 63 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Summary) 285.49 741.53 T
549 729 63 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
1 11 Q
0 X
0.39 (uses SP) 63 712.67 P
0.39 (ARC workstations running SunOS with an A) 96.3 712.67 P
0.39 (TM network. W) 296.03 712.67 P
0.39 (orking with colleagues at Cornell greatly) 367.11 712.67 P
1.01 (increased con\336dence that the new interface will perform well in systems with the previously discussed net-) 63 699.67 P
(work-interface or) 63 686.67 T
(ganizations.) 139.46 686.67 T
4 10 Q
(7.2  Future work) 63 662.33 T
1 11 Q
0.07 (While formulating the new speci\336cation, new features, communication models,) 63 639.67 P
2 F
0.07 (etc.,) 416.15 639.67 P
1 F
0.07 (were discussed but inten-) 437.3 639.67 P
1.1 (tionally postponed. Experiences from implementations of the current interface will help evaluate these pro-) 63 626.67 P
(posed extensions:) 63 613.67 T
4 9 Q
(1.) 63 594.33 T
1 10 Q
(Exposing receive pools with a remote queue interface.) 72 594.33 T
1 11 Q
0.17 (Future versions of the interface will expose the send- and receive-pools to applications via a remote-queue in-) 63 573.67 P
0.11 (terface. This will allow applications to customize the interpretation of send- and receive-pool entries. Current-) 63 560.67 P
0.17 (ly) 63 547.67 P
0.17 (, the active message model tacitly imposes one interpretation upon the send and receive entries,) 70.84 547.67 P
2 F
0.17 (e.g.,) 495.83 547.67 P
1 F
0.17 (a send-) 517.37 547.67 P
0.36 (pool entry contains a command, a local-endpoint address, a translation-table index, an endpoint tag, an active) 63 534.67 P
0.63 (message handler) 63 521.67 P
0.63 (-table index, and a \336xed number of ar) 136.42 521.67 P
0.63 (guments, and so forth. Exposing the entries will allow) 306.23 521.67 P
-0 (applications to specialize the contents and interpretation of entries. Others [25], [26] advocate and have imple-) 63 508.67 P
0.57 (mented atomic remote message queue functions. But for the time being, equivalent functionality can be con-) 63 495.67 P
(structed using the current active message operations.) 63 482.67 T
4 9 Q
(2.) 63 462.67 T
1 11 Q
(Using alternative schemes to authenticate messages and protect endpoints.) 72 462.67 T
-0 (Given well-chosen tag values from the 64-bit tag space, the current endpoint-protection mechanism provides a) 63 441.17 P
-0.06 (nontrivial degree of protection and authentication in a physically-secure network. Although additional security) 63 428.17 P
0.46 (mechanisms could be added, researching physically-secure networks was not of highest priority) 63 415.17 P
0.46 (. There was a) 488.97 415.17 P
0.5 (lack of evidence that system security overall would improve with minor changes to lightweight mechanisms;) 63 402.17 P
0.4 (endpoint tags are adequate for current purposes. Similar protection mechanisms using were successfully used) 63 389.17 P
(in V [21] and Amoeba [22].) 63 376.17 T
4 9 Q
(3.) 63 356.17 T
1 11 Q
(Shared memory support for endpoint virtual-memory segments.) 72 356.17 T
-0.07 (Consideration has been given to integrating the BlizzardS [27] shared memory technology from the University) 63 334.67 P
0.63 (of W) 63 321.67 P
0.63 (isconsin with endpoint virtual-memory segments. The idea here is to allow groups of endpoints to keep) 85.49 321.67 P
0.92 (specially-tagged endpoint virtual-memory segments cache-coherent. Similarly) 63 308.67 P
0.92 (, it appears at \336rst glance, that) 411.5 308.67 P
0.21 (the C Region Library [28] could be easily incorporated into the exiting structures of the endpoints and associ-) 63 295.67 P
(ated memory segments.) 63 282.67 T
4 9 Q
(4.) 63 262.67 T
1 11 Q
(Provide unreliable versions of the request and reply transport functions.) 72 262.67 T
0.09 (In certain application contexts \050\322multimedia\323 is the fashionable buzzword\051, the delivery guarantees of the cur-) 63 241.17 P
-0.1 (rent interface may be unnecessarily strong. Relaxing the undeliverable message model to allow messages to be) 63 228.17 P
-0.25 (dropped without noti\336cation may be useful or may provide better performance. However) 63 215.17 P
-0.25 (, lacking experimental) 451.44 215.17 P
-0.12 (evidence to support this functionality and its performance bene\336ts with respect to active messages, it was post-) 63 202.17 P
(poned.) 63 189.17 T
4 9 Q
(5.) 63 169.17 T
1 11 Q
(Specialize request and reply functions for passing double-precision \337oating point and 64-bit integer values.) 72 169.17 T
1.29 (On many architectures, active message functions can be specialized for composing messages and invoking) 63 147.67 P
-0.25 (their handlers, especially when passing double-precision \337oating point values or 64-bit integer values. The cur-) 63 134.67 P
-0.02 (rent interface requires pulling such values apart and transporting them as 32-bit integers. Since including these) 63 121.67 P
0.67 (functions would involve only additions to the interface, they can be added at any time. W) 63 108.67 P
0.67 (ithout a thoughtful) 465.77 108.67 P
-0.12 (study) 63 95.67 P
-0.12 (, the simplistic approach of replicating and then specializing existing functions for double-precision \337oat-) 86.12 95.67 P
(ing point values and for 64-bit integers could easily result in an unfortunate interface bloat.) 63 82.67 T
FMENDPAGE
%%EndPage: "31" 36
%%Page: "32" 37
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
80.36 729 549 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(32) 536.77 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Acknowledgments) 266.24 741.53 T
63 729 549 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
0 X
(6.) 63 712.67 T
1 11 Q
(Using fbufs [29] or similar functionality for managing the storage for bulk transfers.) 72 712.67 T
0.59 (The current speci\336cation takes the position that applications should be able to send from arbitrary regions of) 63 691.17 P
0.08 (their address space and should be able to restrict the portion of their address space exported to other endpoints) 63 678.17 P
-0.06 (with the appropriate tag. The virtual-memory segment used for receiving bulk transfers is itself an application-) 63 665.17 P
-0.19 (speci\336ed memory region. If the memory used for bulk transfers is managed) 63 652.17 P
2 F
-0.19 (specially) 395.23 652.17 P
-0.19 (,) 433.73 652.17 P
1 F
-0.19 ( then its use in bulk trans-) 436.48 652.17 P
0.2 (fer operations can be optimized. For example, the memory can be specially allocated, managed, or pre-initial-) 63 639.17 P
0.14 (ized for DMA operations. The introduction of special communications memory and its impact on higher) 63 626.17 P
0.14 (-level) 523.95 626.17 P
-0.01 (protocols and applications is worthy of further investigation. T) 63 613.17 P
-0.01 (rade-of) 338.45 613.17 P
-0.01 (fs between changing programming mod-) 370.01 613.17 P
1.44 (els to accommodate special memory management functions and using the much improved high-bandwidth) 63 600.17 P
(memory-copying facilities of modern workstations need to be investigated.) 63 587.17 T
63 552.67 549 557.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
4 12 Q
0 X
0 0 0 1 0 0 0 K
(8  Acknowledgments) 63 561.5 T
1 11 Q
-0.04 (Many people contributed to the development and the re\336nement of the new active message interface speci\336ca-) 63 532.33 P
0.53 (tion. I would like to thank the following people for their time, ener) 63 519.33 P
0.53 (gy) 362.45 519.33 P
0.53 (, and valuable input: David Culler) 372.73 519.33 P
0.53 (, Eric) 524.65 519.33 P
-0.2 (Brewer) 63 506.33 P
-0.2 (, T) 94.93 506.33 P
-0.2 (om Anderson, Dave Patterson, Eric Anderson, Mike Dahlin, Kim Keeton, Cedric Krumbein, Lok T) 106.19 506.33 P
-0.2 (in) 540.44 506.33 P
0.06 (Liu, Steve Lumetta, Rich Martin, Drew Roselli, Randy W) 63 493.33 P
0.06 (ang, Chad Y) 317.46 493.33 P
0.06 (oshikawa at the University of California) 371.78 493.33 P
1.04 (at Berkeley; Thorsten von Eicken and Anindya Basu at Cornell University; Adam Greenber) 63 480.33 P
1.04 (g at Quadruped) 479.11 480.33 P
0.52 (Systems, Inc.; Kristin W) 63 467.33 P
0.52 (right at Geoworks; and Steven Reinhardt at the University at W) 172.59 467.33 P
0.52 (isconsin at Madison.) 457.21 467.33 P
-0.13 (Bill Nesheim at Sun Microsystems took time out from his busy schedule to discuss the integration of the Myri-) 63 454.33 P
0.59 (com network interface into Solaris and explain various and sundry details of the Solaris virtual memory sys-) 63 441.33 P
0.09 (tem. I would also like to thank Brent Chun for his design and implementation of the reference implementation) 63 428.33 P
0.83 (of the new active message speci\336cation using UDP) 63 415.33 P
0.83 (, and for his demonstration of a fault-tolerant application) 292.75 415.33 P
0.79 (built using it. His ef) 63 402.33 P
0.79 (forts turned up several inconsistencies and bugs that had remained invisible for months.) 153.66 402.33 P
0.53 (Jim Gray and Joe Barrera at Microsoft Research Labs also provided many useful comments on the interface.) 63 389.33 P
0.6 (Lastly) 63 376.33 P
0.6 (, I would like to thank T) 89.79 376.33 P
0.6 (om Philippi for helping convert this manuscript into something approximating) 199.24 376.33 P
(English.) 63 363.33 T
-0.06 (This research is supported in part by ARP) 63 343.33 P
-0.06 (A grant F30602-95-C-0014, the California State Micro Program, and) 245.79 343.33 P
0.25 (Professor David Culler) 63 330.33 P
0.25 (\325) 165.34 330.33 P
0.25 (s NSF Presidential Faculty Fellowship CCR-9253705. Computational and experimen-) 168.4 330.33 P
(tal infrastructure resources are supported in part by NSF Infrastructure Grant) 63 317.33 T
(CDA-8722788.) 403.6 317.33 T
63 282.83 549 287.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
4 12 Q
0 X
0 0 0 1 0 0 0 K
(9  References) 63 291.67 T
1 11 Q
([1]) 63 262.5 T
0.14 (T) 90 262.5 P
0.14 (. von Eicken, D. Culler) 95.91 262.5 P
0.14 (, S. Goldstein, and K. Schauser) 197.78 262.5 P
0.14 (, \322Active Messages: a Mechanism for Integrated) 335.23 262.5 P
0.76 (Communication and Computation\323, In) 90 249.5 P
2 F
0.76 (Pr) 265.09 249.5 P
0.76 (oceedings of the 19th International Symposium on Computer) 275.68 249.5 P
(Ar) 90 236.5 T
(chitectur) 100.59 236.5 T
(e) 139.29 236.5 T
1 F
(, May 1992., Gold Coast, Qld., Australia, pp. 256-266.) 144.18 236.5 T
([2]) 63 220.5 T
0.79 (L. T) 90 220.5 P
0.79 (ucker and A. Mainwaring, \322CMMD: Active messages on the CM-5\323, Parallel Computing, August) 109.35 220.5 P
(1994, vol.20, \050no.4\051:481-496.) 90 207.5 T
([3]) 63 191.5 T
0.81 (R. Martin, \322HP) 90 191.5 P
0.81 (AM: An Active Message Layer for a Network of HP W) 157.84 191.5 P
0.81 (orkstations\323, In) 410.09 191.5 P
2 F
0.81 (Pr) 482.3 191.5 P
0.81 (oceedings of) 492.89 191.5 P
(Hot Inter) 90 178.5 T
(connects II) 130.23 178.5 T
1 F
(, August 1994.) 178.79 178.5 T
([4]) 63 162.5 T
0.55 (L. Liu, \322An Evaluation of the Intel Paragon Communication Architecture\323, M.S. Project Report, Com-) 90 162.5 P
(puter Science Division, University of California at Berkeley) 90 149.5 T
(, July 1995.) 353.86 149.5 T
([5]) 63 133.5 T
0.37 (D. Culler) 90 133.5 P
0.37 (, K. Keeton. L. Liu, A. Mainwaring, R. Martin, S. Rodrigues, and K. W) 130.87 133.5 P
0.37 (right, \322Generic Active) 450.21 133.5 P
0.2 (Message Speci\336cation\323, Computer Science Division, University of California at Berkeley) 90 120.5 P
0.2 (, White Paper) 486.11 120.5 P
0.2 (,) 546.25 120.5 P
(August 1994.) 90 107.5 T
([6]) 63 91.5 T
-0.05 (K. Schauser and C. Scheiman, \322Experiences with Active Messages on the Meiko CS-2) 90 91.5 P
2 F
-0.05 (\323,) 470.99 91.5 P
1 F
-0.05 (In) 482.55 91.5 P
2 F
-0.05 (Pr) 494.42 91.5 P
-0.05 (oceedings) 505.01 91.5 P
(of the 9th International Parallel Pr) 90 78.5 T
(ocessing Symposium) 244.52 78.5 T
1 F
(, April 1995.) 335.26 78.5 T
FMENDPAGE
%%EndPage: "32" 37
%%Page: "33" 38
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
531.63 729 63 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(33) 63 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(References) 281.74 741.53 T
549 729 63 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
1 11 Q
0 X
([7]) 63 712.67 T
0.74 (T) 90 712.67 P
0.74 (. von Eicken, A. Basu, and V) 95.91 712.67 P
0.74 (. Buch, \322Low-latency communication over A) 227.22 712.67 P
0.74 (TM networks using Active) 428.55 712.67 P
(Messages\323, In) 90 699.67 T
2 F
(Pr) 155.07 699.67 T
(oceedings of Hot Inter) 165.66 699.67 T
(connects II) 263.93 699.67 T
1 F
(, August 1994.) 312.5 699.67 T
([8]) 63 683.67 T
0.09 (T) 90 683.67 P
0.09 (. Anderson, D. Culler) 95.91 683.67 P
0.09 (, and D. Patterson, \322A Case for NOW \050Networks of W) 190.45 683.67 P
0.09 (orkstations\051\323, IEEE Micro,) 430.28 683.67 P
(February 1995, vol.15, \050no.1\051:54-64.) 90 670.67 T
([9]) 63 654.67 T
0.62 (N. Boden, D. Cohen, R. Felderman, A. Kulawik, C. Seitz, J. Seizovic, and W) 90 654.67 P
0.62 (en-King Su, \322Myrinet: A) 437.17 654.67 P
(Gigabit-per) 90 641.67 T
(-Second Local Area Network\323, IEEE Micro, February 1995, vol.15, \050no.1\051:29-36.) 140.49 641.67 T
([10]) 63 625.67 T
(R. Horst, \322TNet: A Reliable System Area Network\323, IEEE Micro, February 1995, vol.15, \050no.1\051:37-45.) 90 625.67 T
([1) 63 609.67 T
(1]) 71.76 609.67 T
1.12 (J. D. T) 90 609.67 P
1.12 (ygar and Bennet S. Y) 121.42 609.67 P
1.12 (ee, \322Strongbox: A System for Self-Securing Programs\323, CMU Computer) 219.21 609.67 P
(Science: A 25th Anniversary Commemorative, ed. R. Rashid \050New Y) 90 596.67 T
(ork: ACM Press, 1991\051.) 395.64 596.67 T
([12]) 63 580.67 T
-0.1 (Bennet Y) 90 580.67 P
-0.1 (ee, \322Using Secure Coprocessors\323, Ph.D. Thesis, School of Computer Science, Carnegie Mellon) 130.65 580.67 P
(University) 90 567.67 T
(, 1994.) 135.73 567.67 T
([13]) 63 551.67 T
0.27 (O. Babaoglu and A. Schiper) 90 551.67 P
0.27 (, \322On Group Communication in Lar) 214.66 551.67 P
0.27 (ge-Scale Distributed Systems\323,) 373.44 551.67 P
2 F
0.27 (Operat-) 514.17 551.67 P
(ing Systems Review) 90 538.67 T
1 F
(, January 1995, vol.29, \050no.1\051:62-67.) 175.44 538.67 T
([14]) 63 522.67 T
1.02 (R. van Renesse, T) 90 522.67 P
1.02 (. M. Hickey) 171.98 522.67 P
1.02 (, and K. P) 225.86 522.67 P
1.02 (. Birman, \322Design and Performance of Horus: A Lightweight) 271.39 522.67 P
0.37 (Group Communication System\323, T) 90 509.67 P
0.37 (echnical Report TR94-1442, Computer Science Department, Cornell) 244.34 509.67 P
(Univ) 90 496.67 T
(., August 1994.) 111.29 496.67 T
([15]) 63 480.67 T
-0.23 (Internet Protocol. DARP) 90 480.67 P
-0.23 (A Internet Program. Protocol Speci\336cation. Prepared for Defense Advanced Re-) 197.61 480.67 P
0.14 (search Projects Agency) 90 467.67 P
0.14 (, Information Processing T) 192.81 467.67 P
0.14 (echniques Of) 310.38 467.67 P
0.14 (\336ce by the Information Science Institute,) 368.67 467.67 P
(University of Southern California. September 1981, pp. 6-7.) 90 454.67 T
([16]) 63 438.67 T
1.3 (Message Passing Interface Forum, \322MPI: A Message-Passing Interface Standard\323, Computer Science) 90 438.67 P
(Department T) 90 425.67 T
(echnical Report CS-94-320, University of T) 150.63 425.67 T
(ennessee, May 1994.) 343.56 425.67 T
([17]) 63 409.67 T
0.71 (P) 90 409.67 P
0.71 (. Bangalore, N. Doss, and A. Skjellum, \322MPI++: Issues and Features\323, Department of Computer Sci-) 94.89 409.67 P
(ence, Mississippi State University) 90 396.67 T
(, White Papers, March 1994.) 239.01 396.67 T
([18]) 63 380.67 T
-0.08 (A. Skjellum, N. Doss. K. V) 90 380.67 P
-0.08 (iswanathan, A. Chowdappa, and P) 209.96 380.67 P
-0.08 (. Bangalore, \322Extending the Message Pass-) 359.66 380.67 P
2.2 (ing Interface \050MPI\051\323, Department of Computer Science, Mississippi State University) 90 367.67 P
2.2 (, White Paper) 482.11 367.67 P
2.2 (,) 546.25 367.67 P
(March 1994.) 90 354.67 T
([19]) 63 338.67 T
0.29 (A. Skjellum, N. Doss, and K. V) 90 338.67 P
0.29 (iswanathan, \322Inter) 230.7 338.67 P
0.29 (-communicator Extensions to MPI in the MPIX \050MPI) 311.41 338.67 P
(eXtension\051 Library\323, Submitted to ICAE Journal special issue on Distributed Computing, July 1994.) 90 325.67 T
([20]) 63 309.67 T
-0.17 (A. Skjellum, S. Smith, N. Doss, A. Leung, and M. Morari, \322The Design and Evolution of Zipcode\323,) 90 309.67 P
2 F
-0.17 (Par-) 528.84 309.67 P
(allel Computing) 90 296.67 T
1 F
(, April 1994, vol.20, \050no.4\051:565-96.) 161.2 296.67 T
([21]) 63 280.67 T
(Marvin Theimer) 90 280.67 T
(,) 161.96 280.67 T
2 F
(personal communication) 167.46 280.67 T
1 F
(, 13 February 1995.) 276.54 280.67 T
([22]) 63 264.67 T
0.04 (A. S. T) 90 264.67 P
0.04 (anenbaum, S. J. Jullender) 121.1 264.67 P
0.04 (, and R. van Renesse, \322Using Sparse Capabilities in a Distributed Oper-) 233.22 264.67 P
(ating System\323, T) 90 251.67 T
(echnical Report, Department of Mathematics and Computer Science, V) 163.48 251.67 T
(rije Universiteit.) 476.87 251.67 T
([23]) 63 235.67 T
0.34 (M. L. Powell, S. R. Kleiman, S. Barton, D. Shah, D. Stein, M. W) 90 235.67 P
0.34 (eeks, \322SunOS 5.0 Multi-thread Archi-) 380.2 235.67 P
(tecture\323, In) 90 222.67 T
2 F
(Pr) 142.23 222.67 T
(oceedings of the W) 152.82 222.67 T
(inter 1991 USENIX Confer) 235.62 222.67 T
(ence) 354.68 222.67 T
1 F
(, January 1991.) 374.83 222.67 T
([24]) 63 206.67 T
1.61 (\322pthreads and Solaris threads: A Comparison of two user) 90 206.67 P
1.61 (-level threads APIs\323, SunSoft Corporation,) 353.76 206.67 P
10.73 (1994. On-line at http://www) 90 193.67 P
10.73 (.Sun.COM:80/cgi-bin/show?sunsoft/Developer) 246.13 193.67 P
10.73 (-products/sig/threads/) 453.67 193.67 P
(posix.html.) 90 180.67 T
([25]) 63 164.67 T
0.55 (A. Basu, V) 90 164.67 P
0.55 (. Buch, W) 138.56 164.67 P
0.55 (. V) 183.24 164.67 P
0.55 (ogels, and T) 195.81 164.67 P
0.55 (. von Eicken, \322U-Net: A User) 250.16 164.67 P
0.55 (-Level Network Interface for Parallel) 383.11 164.67 P
0.75 (and Distributed Computing\323, In) 90 151.67 P
2 F
0.75 (Pr) 235.71 151.67 P
0.75 (oceedings of the 15th Symposium on Operating Systems Principles) 246.3 151.67 P
1 F
0.75 (,) 546.25 151.67 P
(December 1995.) 90 138.67 T
([26]) 63 122.67 T
1.89 (E. Brewer) 90 122.67 P
1.89 (, F) 136.04 122.67 P
1.89 (. Chong, L. Liu, J. Kubiatowicz, and S. Sharma, \322Remote Queues: Exposing Network) 148.67 122.67 P
0.81 (Queues for Atomicity and Optimization\323, In) 90 109.67 P
2 F
0.81 (7th Annual ACM Symposium on Parallel Algorithms and) 292.5 109.67 P
(Ar) 90 96.67 T
(chitectur) 100.59 96.67 T
(es) 139.29 96.67 T
1 F
(, July 1995.) 148.45 96.67 T
FMENDPAGE
%%EndPage: "33" 38
%%Page: "34" 39
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
80.36 729 549 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(34) 536.77 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(References) 281.74 741.53 T
63 729 549 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
1 11 Q
0 X
([27]) 63 712.67 T
-0.12 (I. Schoinas, B. Falsa\336, A. R. Lebeck, S. K. Reinhardt, J. R. Larus, D. A. W) 90 712.67 P
-0.12 (ood, \322Fine-grain Access Con-) 417.98 712.67 P
0.1 (trol for Distributed Shared Memory\323, In) 90 699.67 P
2 F
0.1 (6th International Confer) 269.94 699.67 P
0.1 (ence on Ar) 377.91 699.67 P
0.1 (chitectural Support for Pr) 425.35 699.67 P
0.1 (o-) 539.84 699.67 P
(gramming Languages and Operating Systems) 90 686.67 T
1 F
(, October 1994.) 291.05 686.67 T
([28]) 63 670.67 T
0.24 (Kirk L. Johnson, M. Frans Kaashoek, and Deborah A. W) 90 670.67 P
0.24 (allach, \322CRL: High-Performance All-Software) 342.39 670.67 P
0.73 (Distributed Shared Memory\323, T) 90 657.67 P
0.73 (echnical Report LCS-TM-517, MIT Laboratory for Computer Science,) 231.96 657.67 P
(March 1995.) 90 644.67 T
([29]) 63 628.67 T
0.54 (P) 90 628.67 P
0.54 (. Druschel and L. Peterson, \322Fbufs: A High-Bandwidth Cross-Domain T) 94.89 628.67 P
0.54 (ransfer Facility\323, In) 418.29 628.67 P
2 F
0.54 (Pr) 509.09 628.67 P
0.54 (oceed-) 519.68 628.67 P
(ings of the 14th Symposium on Operating Systems Principles) 90 615.67 T
1 F
(, December 1993.) 358.27 615.67 T
([30]) 63 599.67 T
0.59 (K. Keeton, T) 90 599.67 P
0.59 (. Anderson, and D. Patterson, \322LogP Quanti\336ed: The Case for Low-Overhead Local Area) 147.8 599.67 P
(Networks\323, In) 90 586.67 T
2 F
(Pr) 155.07 586.67 T
(oceedings of Hot Inter) 165.66 586.67 T
(connects III) 263.93 586.67 T
1 F
(, August 1995.) 316.16 586.67 T
([31]) 63 570.67 T
0.44 (J. Beecroft, M. Hornewoord, and M. McLaren, \322Meiko CS-2 Interconnect Elan-Elite Design\323,) 90 570.67 P
2 F
0.44 (Parallel) 512.94 570.67 P
(Computing) 90 557.67 T
1 F
(, November 1994, vol.20, \050no.10-1) 138.9 557.67 T
(1\051:1627-38.) 291.55 557.67 T
([32]) 63 541.67 T
(Fore Systems, Inc., \322200-Series A) 90 541.67 T
(TM Adapter - Design and Architecture\323, January 1994.) 238.79 541.67 T
([33]) 63 525.67 T
0.14 (M. Blumrich, K. Li, R. Alpert, C. Dubnicki,) 90 525.67 P
2 F
0.14 (et. al,.) 287.93 525.67 P
1 F
0.14 ( \322V) 315.58 525.67 P
0.14 (irtual Memory Mapped Network Interface for the) 330.64 525.67 P
0.58 (SHRIMP Multicomputer\323, In) 90 512.67 P
2 F
0.58 (Pr) 223.74 512.67 P
0.58 (oceedings of the 21st International Symposium on Computer Ar) 234.34 512.67 P
0.58 (chitec-) 519.07 512.67 P
(tur) 90 499.67 T
(e) 102.43 499.67 T
1 F
(, April 1994.) 107.31 499.67 T
([34]) 63 483.67 T
0.51 (M. Blumrich, C. Dubnicki, E. Felten, K. Li and M. Mesarina, \322T) 90 483.67 P
0.51 (wo V) 379.6 483.67 P
0.51 (irtual Memory Mapped Network) 403.58 483.67 P
(Interface Designs\323, In) 90 470.67 T
2 F
(Pr) 189.57 470.67 T
(oceedings of Hot Inter) 200.16 470.67 T
(connects II) 298.44 470.67 T
1 F
(, August 1994.) 347 470.67 T
([35]) 63 454.67 T
0.29 (\322The SBL Programming Model\323, SRIMP Project Document, Department of Computer Science, Prince-) 90 454.67 P
(ton University) 90 441.67 T
(. On-line at http://www) 152.54 441.67 T
(.cs.princeton.edu/shrimp/htMan/SBLmodel.html.) 254.48 441.67 T
([36]) 63 425.67 T
0.32 (P) 90 425.67 P
0.32 (. Druschel, L. Peterson, and B. Davie, \322Experiences with a High-Speed Network Adaptor: A Software) 94.89 425.67 P
(Perspective\323, In) 90 412.67 T
2 F
( Pr) 160.26 412.67 T
(oceedings of the SIGCOMM \32494 Symposium) 173.6 412.67 T
1 F
(, August 1994.) 368.82 412.67 T
([37]) 63 396.67 T
1.02 (Greg Buzzard, David Jacobson, Scott Marovich, and John W) 90 396.67 P
1.02 (ilkes, \322Hamlyn: a high-performance net-) 366.23 396.67 P
0.77 (work interface with sender) 90 383.67 P
0.77 (-based memory management\323, T) 209.7 383.67 P
0.77 (echnical Report HPL-95-86, Hewlett-Pack-) 355.44 383.67 P
(ard Laboratories, July 1995.) 90 370.67 T
([38]) 63 354.67 T
0.04 (B. T) 90 354.67 P
0.04 (raversat, \322Distributed-Memory OS for Highly Parallel Systems: Experiences and Lessons from Par-) 109.21 354.67 P
(agon) 90 341.67 T
-0.19 (OSF/1 and SUNMOS\323, T) 90 328.67 P
-0.19 (echnical Report RND-94-015, NASA Ames Research Center) 201.73 328.67 P
-0.19 (, September 1994.) 469.32 328.67 P
([39]) 63 312.67 T
0.88 (B. Bryant, A. Langerman, S. Sears and D. Black, \322A T) 90 312.67 P
0.88 (ask-to-T) 339.08 312.67 P
0.88 (ask Communication System for Multi-) 375.58 312.67 P
(computer) 90 299.67 T
(Systems\323, Draft T) 90 286.67 T
(echnical Report, OSF Research Institute, October 1993.) 168.97 286.67 T
FMENDPAGE
%%EndPage: "34" 39
%%Page: "35" 40
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
531.63 729 63 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(35) 63 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Active Message API) 263.48 741.53 T
549 729 63 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
63 703.17 549 708 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
4 12 Q
0 X
0 0 0 1 0 0 0 K
(Appendix A  Active Message API) 63 712 T
1 11 Q
(This appendix de\336nes the interface for the active message transport functions.) 63 682.83 T
0 10 Q
(A.1  Data types and constants) 63 658.5 T
1 11 Q
(Figure 14 de\336nes the data types for the interface.) 63 635.83 T
(Figure 14 de\336nes the endpoint, bundle, and transport function constants for the interface.) 63 435.83 T
(Figure 14 de\336nes the function return values and error constants for the interface.) 63 277.83 T
(Data T) 175.32 606.83 T
(ype) 204.79 606.83 T
(Description) 334.34 606.83 T
(int) 192.19 585.83 T
(32-bit integer) 330.21 585.83 T
(ep_t) 188.53 564.83 T
(endpoint object) 325.93 564.83 T
(eb_t) 188.53 543.83 T
(endpoint bundle object) 309.59 543.83 T
(en_t) 188.53 522.83 T
(an opaque global-endpoint name) 288.05 522.83 T
(tag_t) 187 501.83 T
(endpoint tag \050a 64-bit integer\051) 294.01 501.83 T
(handler_t) 177.23 480.83 T
(handler) 317.5 480.83 T
(-table index) 350.27 480.83 T
4 9 Q
(Figure  14) 144 460.5 T
0 10 Q
(Interface data types and their descriptions) 189 460.5 T
1 11 Q
(Constant) 178.44 406.83 T
(Description) 334.34 406.83 T
(AM_ALL) 175.7 385.83 T
(deliver all messages to endpoint) 289.42 385.83 T
(AM_NONE) 171.12 364.83 T
(deliver no messages to endpoint) 289.42 364.83 T
(AM_P) 176.2 343.83 T
(AR) 204.52 343.83 T
(concurrent bundle/endpoint access) 283.93 343.83 T
(AM_SEQ) 176 322.83 T
(sequential bundle/endpoint access) 285.15 322.83 T
4 9 Q
(Figure  15) 144 302.5 T
0 10 Q
(Interface constants and their descriptions) 189 302.5 T
1 11 Q
(Data T) 175.32 248.83 T
(ype) 204.79 248.83 T
(Description) 334.34 248.83 T
(AM_OK) 178.45 227.83 T
(function completed successfully) 289.12 227.83 T
(AM_ERR_NOT_INI) 151.26 206.83 T
(T) 194.64 193.83 T
(active message layer not initialized) 282.71 206.83 T
(AM_ERR_BAD_AR) 150.94 172.83 T
(G) 194.03 159.83 T
(invalid function parameter passed) 285.61 172.83 T
(AM_ERR_RESOUR) 151.24 138.83 T
(CE) 190.97 125.83 T
(problem with requested resource) 288.06 138.83 T
4 9 Q
(Figure  16) 144 105.5 T
0 10 Q
(Function r) 189 105.5 T
(eturn values and their descriptions) 234.1 105.5 T
144 619.92 144 473.42 2 L
V
0.5 H
0 Z
N
252 620.42 252 472.92 2 L
V
N
468 619.92 468 473.42 2 L
V
N
143.75 620.17 468.25 620.17 2 L
V
N
143.75 599.17 468.25 599.17 2 L
V
N
143.75 578.17 468.25 578.17 2 L
V
N
143.75 557.17 468.25 557.17 2 L
V
N
143.75 536.17 468.25 536.17 2 L
V
N
143.75 515.17 468.25 515.17 2 L
V
N
143.75 494.17 468.25 494.17 2 L
V
N
143.75 473.17 468.25 473.17 2 L
V
N
144 419.92 144 315.42 2 L
V
N
252 420.42 252 314.92 2 L
V
N
468 419.92 468 315.42 2 L
V
N
143.75 420.17 468.25 420.17 2 L
V
N
143.75 399.17 468.25 399.17 2 L
V
N
143.75 378.17 468.25 378.17 2 L
V
N
143.75 357.17 468.25 357.17 2 L
V
N
143.75 336.17 468.25 336.17 2 L
V
N
143.75 315.17 468.25 315.17 2 L
V
N
144 261.92 144 118.42 2 L
V
N
252 262.42 252 117.92 2 L
V
N
468 261.92 468 118.42 2 L
V
N
143.75 262.17 468.25 262.17 2 L
V
N
143.75 241.17 468.25 241.17 2 L
V
N
143.75 220.17 468.25 220.17 2 L
V
N
143.75 186.17 468.25 186.17 2 L
V
N
143.75 152.17 468.25 152.17 2 L
V
N
143.75 118.17 468.25 118.17 2 L
V
N
FMENDPAGE
%%EndPage: "35" 40
%%Page: "36" 41
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
80.36 729 549 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(36) 536.77 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Active Message API) 263.48 741.53 T
63 729 549 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
8 11 Q
0 X
-0.09 (Note) 63 609.67 P
1 F
-0.09 (: The active message transport functions are parameterized by) 84.38 609.67 P
8 F
-0.09 (M) 358.8 609.67 P
1 F
-0.09 (, the number of integers ar) 368.58 609.67 P
-0.09 (gument passed) 484.01 609.67 P
-0.21 (to the active message handler) 63 596.67 P
-0.21 (. All implementations will provide at least two versions of all functions with) 191.07 596.67 P
0 F
-0.21 (M=4) 526.85 596.67 P
1 F
0.48 (and) 63 583.67 P
0 F
0.48 (M=8) 82.11 583.67 P
1 F
0.48 (. Rather than repeat the active message function and handler semantics for every transport function,) 104.26 583.67 P
(readers should refer to Section 4 for those details.) 63 570.67 T
8 F
0.22 (Note) 63 550.67 P
1 F
0.22 (: In general, all) 84.38 550.67 P
2 F
0.22 (transport) 154.6 550.67 P
1 F
0.22 ( functions return integer value of) 195.55 550.67 P
1 9 Q
0.18 (AM_OK) 344.1 550.67 P
1 11 Q
0.22 ( if no problems with the given parame-) 376.09 550.67 P
0.06 (ters are found synchronously with respect to the calling computation and) 63 537.67 P
1 9 Q
0.05 (AM_ERR_XXX) 386.63 537.67 P
1 11 Q
0.06 ( otherwise. Subsequent) 447.13 537.67 P
0.37 (errors may arise asynchronously with respect to the calling computation and result in undeliverable messages) 63 524.67 P
-0.15 (being returned to their senders. All) 63 511.67 P
2 F
-0.15 (other) 218.2 511.67 P
1 F
-0.15 ( functions return integer values of) 241.42 511.67 P
1 9 Q
-0.12 (AM_OK) 392.03 511.67 P
1 11 Q
-0.15 ( if no problems with the giv-) 424.03 511.67 P
-0.12 (en function parameters are found and the operation completes successfully and) 63 498.67 P
1 9 Q
-0.1 (AM_ERR_XXX) 411.46 498.67 P
1 11 Q
-0.12 ( otherwise. These) 471.95 498.67 P
-0.19 (functions execute synchronously with respect to the calling computation and thus asynchronous error detection) 63 485.67 P
(issues is a non-issue.) 63 472.67 T
0 10 Q
(A.2  Function: AM_Init) 63 448.33 T
0 11 Q
(int rval = AM_Init\050\051) 63 422.67 T
2 F
0.06 (AM_Init) 63 402.67 P
1 F
0.06 ( initializes the active message layer and should be called before using any interface function. Multiple) 99.66 402.67 P
0.65 (calls return success. The function returns) 63 389.67 P
1 9 Q
0.54 (AM_OK) 249.91 389.67 P
1 11 Q
0.65 ( if the active message layer was successfully initialized and) 281.91 389.67 P
1 9 Q
(AM_ERR_NOT_INIT) 63 376.67 T
1 11 Q
( otherwise.) 144.99 376.67 T
0 10 Q
(A.3  Function: AM_T) 63 352.33 T
(erminate) 154.3 352.33 T
0 11 Q
(int rval = AM_T) 63 326.67 T
(erminate\050\051) 139.45 326.67 T
1 F
-0.04 (This function should be called when \336nished using active message. It cleans up and releases associated system) 63 306.67 P
1.01 (resources.) 63 293.67 P
2 F
1.01 (AM_T) 111.05 293.67 P
1.01 (erminate) 137.54 293.67 P
1 F
1.01 ( returns) 176.64 293.67 P
1 9 Q
0.83 (AM_OK) 214.72 293.67 P
1 11 Q
1.01 ( if all active message layer state is released and) 246.71 293.67 P
1 9 Q
0.83 (AM_ERR_NOT_INIT) 467.01 293.67 P
1 11 Q
(otherwise.) 63 280.67 T
0 10 Q
(A.4  Function: AM_RequestM) 63 256.33 T
0 11 Q
(int rval = AM_RequestM\050) 63 230.67 T
(ep_t r) 81 217.67 T
(equest_endpoint,) 108.6 217.67 T
(/* endpoint sending r) 191.11 217.67 T
(equest */) 290.24 217.67 T
(int r) 81 204.67 T
(eply_endpoint,) 101.27 204.67 T
(/* endpoint sending r) 187.5 204.67 T
(eply */) 286.63 204.67 T
(handler_t handler) 81 191.67 T
(,) 165.25 191.67 T
(/* index into destination endpoint\325) 187.5 191.67 T
(s handler table */) 347.85 191.67 T
(int a) 81 178.67 T
0 8.8 Q
(0,) 102.09 175.92 T
0 11 Q
(..., int arg) 108.69 178.67 T
0 8.8 Q
(M-1) 153.91 175.92 T
0 11 Q
(\051) 169.54 178.67 T
2 F
-0.14 (AM_RequestM) 63 158.67 P
1 F
-0.14 (returns control to the calling thread of computation after sending the request message. Upon re-) 130.98 158.67 P
-0.09 (ceipt, the receiver invokes the active message handler function with the) 63 145.67 P
2 F
-0.09 (M) 379.17 145.67 P
1 F
-0.09 (integer ar) 390.99 145.67 P
-0.09 (guments. The request han-) 432.55 145.67 P
(dler) 63 132.67 T
(\325) 80.51 132.67 T
(s prototype is:) 83.57 132.67 T
2 F
(void handler\050void *token,) 148.66 132.67 T
(int ar) 264.75 132.67 T
(g) 288.49 132.67 T
2 8.8 Q
(0,) 293.99 129.92 T
2 11 Q
(..., int ar) 300.59 132.67 T
(g) 338.08 132.67 T
2 8.8 Q
(M-1) 343.58 129.92 T
2 11 Q
(\051) 358.24 132.67 T
1 F
(.) 361.9 132.67 T
(AM_ERR_NOT_SE) 152.47 706.67 T
(NT) 190.67 693.67 T
(synchronous message not sent) 293.55 706.67 T
(AM_ERR_IN_USE) 154 672.67 T
(resource currently in use) 305.78 672.67 T
4 9 Q
(Figure  16) 144 652.33 T
0 10 Q
(Function r) 189 652.33 T
(eturn values and their descriptions) 234.1 652.33 T
144 719.75 144 665.25 2 L
V
0.5 H
N
252 720.25 252 664.75 2 L
V
N
468 719.75 468 665.25 2 L
V
N
143.75 720 468.25 720 2 L
V
N
143.75 686 468.25 686 2 L
V
N
143.75 665 468.25 665 2 L
V
N
FMENDPAGE
%%EndPage: "36" 41
%%Page: "37" 42
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
531.63 729 63 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(37) 63 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Active Message API) 263.48 741.53 T
549 729 63 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
0 10 Q
0 X
(A.5  Function: AM_RequestIM) 63 713.33 T
0 11 Q
(int rval = AM_RequestIM\050) 63 687.67 T
(ep_t r) 81 674.67 T
(equest_endpoint,) 108.6 674.67 T
(/* endpoint sending r) 188.36 674.67 T
(equest */) 287.49 674.67 T
(int r) 81 661.67 T
(eply_endpoint,) 101.27 661.67 T
(/* endpoint sending r) 187.5 661.67 T
(eply */) 286.63 661.67 T
(handler_t handler) 81 648.67 T
(,) 165.25 648.67 T
(/* index into destination endpoint\325) 187.5 648.67 T
(s handler table */) 347.85 648.67 T
(void *sour) 81 635.67 T
(ce_addr) 130.01 635.67 T
(,) 166.88 635.67 T
(int nbytes,) 81 622.67 T
(int a) 81 609.67 T
0 8.8 Q
(0,) 102.09 606.92 T
0 11 Q
(..., int arg) 108.69 609.67 T
0 8.8 Q
(M-1) 153.91 606.92 T
0 11 Q
(\051) 169.54 609.67 T
2 F
-0.25 (AM_RequestIM) 63 589.67 P
1 F
-0.25 (returns control to the calling thread of computation after sending) 134.54 589.67 P
2 F
-0.25 (nbytes) 419.23 589.67 P
1 F
-0.25 (of contiguous data and) 449.84 589.67 P
0.25 (then the associated request. The active message is logically delivered after the data transfer \336nishes. Upon re-) 63 576.67 P
0.93 (ceipt, the receiver invokes the handler function with a pointer to storage containing the data, the number of) 63 563.67 P
0.46 (data bytes transferred, and the) 63 550.67 P
8 F
0.46 (M) 200.31 550.67 P
1 F
0.46 ( integer ar) 210.09 550.67 P
0.46 (guments. The dynamic scope of the storage is the same as the dy-) 255.4 550.67 P
0.56 (namic scope of the handler) 63 537.67 P
0.56 (. The data should be copied if it is needed beyond this scope. The value of) 183.17 537.67 P
2 F
0.56 (nbytes) 520.89 537.67 P
1 F
0.56 (must be no lar) 63 524.67 P
0.56 (ger than the value returned by) 127.11 524.67 P
2 F
0.56 (AM_MaxMedium.) 264.86 524.67 P
1 F
0.56 (The request handler) 347.89 524.67 P
0.56 (\325) 436.77 524.67 P
0.56 (s prototype is:) 439.83 524.67 P
2 F
0.56 (void han-) 506.59 524.67 P
(dler\050void *token, void *buf, int nbytes,) 63 511.67 T
(int ar) 235.62 511.67 T
(g) 259.36 511.67 T
2 8.8 Q
(0,) 264.86 508.92 T
2 11 Q
(..., int ar) 271.46 511.67 T
(g) 308.95 511.67 T
2 8.8 Q
(M-1) 314.45 508.92 T
2 11 Q
(\051) 329.11 511.67 T
1 F
(.) 332.77 511.67 T
0 10 Q
(A.6  Function: AM_RequestXferM) 63 487.33 T
0 11 Q
(int rval = AM_RequestXferM\050) 63 461.67 T
(ep_t r) 81 448.67 T
(equest_endpoint,) 108.6 448.67 T
(/* endpoint sending r) 188.36 448.67 T
(equest */) 287.49 448.67 T
(int r) 81 435.67 T
(eply_endpoint,) 101.27 435.67 T
(/* endpoint sending r) 187.5 435.67 T
(eply */) 286.63 435.67 T
(int dest_offset,) 81 422.67 T
(handler_t handler) 81 409.67 T
(,) 165.25 409.67 T
(/* index into destination endpoint\325) 187.5 409.67 T
(s handler table */) 347.85 409.67 T
(void *sour) 81 396.67 T
(ce_addr) 130.01 396.67 T
(,) 166.88 396.67 T
(int nbytes,) 81 383.67 T
(int a) 81 370.67 T
0 8.8 Q
(0,) 102.09 367.92 T
0 11 Q
(..., int arg) 108.69 370.67 T
0 8.8 Q
(M-1) 153.91 367.92 T
0 11 Q
(\051) 169.54 370.67 T
2 F
-0.03 (AM_RequestXferM) 63 337.67 P
1 F
-0.03 ( returns control to the calling thread of computation after sending) 147.32 337.67 P
2 F
-0.03 (nbytes) 436.95 337.67 P
1 F
-0.03 ( of contiguous data) 465.06 337.67 P
0.23 (and then the associated request. The data transfer is of) 63 324.67 P
0.23 (fset into the destination endpoint\325) 303.17 324.67 P
0.23 (s virtual-memory seg-) 451.38 324.67 P
0.55 (ment by) 63 311.67 P
2 F
0.55 (dest_offset) 102.6 311.67 P
1 F
0.55 ( bytes. The active message is logically delivered after the bulk transfer \336nishes. Upon re-) 149.66 311.67 P
0.52 (ceipt, the receiver invokes the handler function with a pointer into the endpoint virtual-memory segment, the) 63 298.67 P
0.15 (number of data bytes transferred, and the) 63 285.67 P
2 F
0.15 (M) 247.32 285.67 P
1 F
0.15 ( integer ar) 256.48 285.67 P
0.15 (guments. The value of) 301.17 285.67 P
2 F
0.15 (nbytes) 402.89 285.67 P
1 F
0.15 ( must be no lar) 430.99 285.67 P
0.15 (ger than the) 496.77 285.67 P
0.49 (value returned by) 63 272.67 P
2 F
0.49 (AM_MaxLong.) 144.2 272.67 P
1 F
0.49 (The request handler) 213.73 272.67 P
0.49 (\325) 302.48 272.67 P
0.49 (s prototype is:) 305.54 272.67 P
2 F
0.49 (void handler\050void *token, void *buf, int) 372.09 272.67 P
(nbytes,) 63 259.67 T
(int ar) 96.61 259.67 T
(g) 120.34 259.67 T
2 8.8 Q
(0,) 125.84 256.92 T
2 11 Q
(..., int ar) 132.44 259.67 T
(g) 169.93 259.67 T
2 8.8 Q
(M-1) 175.43 256.92 T
2 11 Q
(\051) 190.09 259.67 T
1 F
(.) 193.75 259.67 T
0 10 Q
(A.7  Function: AM_RequestXferAsyncM) 63 235.33 T
0 11 Q
(int rval = AM_RequestXferAsyncM\050) 63 209.67 T
(ep_t r) 81 196.67 T
(equest_endpoint,) 108.6 196.67 T
(/* endpoint sending r) 188.36 196.67 T
(equest */) 287.49 196.67 T
(int r) 81 183.67 T
(eply_endpoint,) 101.27 183.67 T
(/* endpoint sending r) 187.5 183.67 T
(eply */) 286.63 183.67 T
(int dest_offset,) 81 170.67 T
(handler_t handler) 81 157.67 T
(,) 165.25 157.67 T
(/* index into destination endpoint\325) 187.5 157.67 T
(s handler table */) 347.85 157.67 T
(void *sour) 81 144.67 T
(ce_addr) 130.01 144.67 T
(,) 166.88 144.67 T
(int nbytes,) 81 131.67 T
(int a) 81 118.67 T
0 8.8 Q
(0,) 102.09 115.92 T
0 11 Q
(..., int arg) 108.69 118.67 T
0 8.8 Q
(M-1) 153.91 115.92 T
0 11 Q
(\051) 169.54 118.67 T
2 F
-0.26 (AM_RequestXferAsyncM) 63 98.67 P
1 F
-0.26 ( attempts to post the request operation with the communication system. If the commu-) 173.58 98.67 P
0.42 (nication system accepts the message for transmission, the function returns immediately with a status value of) 63 85.67 P
FMENDPAGE
%%EndPage: "37" 42
%%Page: "38" 43
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
80.36 729 549 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(38) 536.77 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Active Message API) 263.48 741.53 T
63 729 549 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
1 11 Q
0 X
1.71 (AM_OK and otherwise with status value of AM_ERR_XXX. If accepted, the caller must not modify the) 63 712.67 P
3.96 (source memory until it executes the matching reply handler) 63 699.67 P
3.96 (. Some implementations permit multiple) 355.61 699.67 P
2 F
0.73 (AM_RequestXferAsyncM) 63 686.67 P
1 F
0.73 ( operations to be posted and overlapped with local computation. If not accepted the) 173.58 686.67 P
(caller must retry) 63 673.67 T
(, and otherwise this function is similar to) 134.38 673.67 T
2 F
(AM_RequestXferM.) 316.79 673.67 T
0 10 Q
(A.8  Function: AM_ReplyM) 63 649.33 T
0 11 Q
(int rval = AM_ReplyM\050) 63 623.67 T
(void *token,) 81 610.67 T
(handler_t handler) 81 597.67 T
(,) 165.25 597.67 T
(/* index into destination endpoint\325) 187.5 597.67 T
(s handler table */) 347.85 597.67 T
(int a) 81 584.67 T
0 8.8 Q
(0,) 102.09 581.92 T
0 11 Q
(..., int arg) 108.69 584.67 T
0 8.8 Q
(M-1) 153.91 581.92 T
0 11 Q
(\051) 169.54 584.67 T
2 F
-0.25 (AM_ReplyM) 63 564.67 P
1 F
-0.25 (returns control to the calling thread of computation after sending the reply message to the request-) 121.09 564.67 P
0.97 (ing endpoint responsible for the particular invocation of the request handler) 63 551.67 P
0.97 (. Upon receipt, the requester in-) 404.53 551.67 P
0.41 (vokes the handler function with the) 63 538.67 P
2 F
0.41 (M) 223.71 538.67 P
1 F
0.41 ( integer ar) 232.87 538.67 P
0.41 (guments. The reply handler) 278.09 538.67 P
0.41 (\325) 400.7 538.67 P
0.41 (s prototype is:) 403.76 538.67 P
2 F
0.41 (void handler\050void) 470.07 538.67 P
(*token, int ar) 63 525.67 T
(g) 121.56 525.67 T
2 8.8 Q
(0,) 127.06 522.92 T
2 11 Q
(..., int ar) 133.66 525.67 T
(g) 171.15 525.67 T
2 8.8 Q
(M-1) 176.65 522.92 T
2 11 Q
(\051) 191.31 525.67 T
1 F
(.) 194.98 525.67 T
0 10 Q
(A.9  Function: AM_ReplyIM) 63 501.33 T
0 11 Q
(int rval = AM_ReplyIM\050) 63 475.67 T
(void *token,) 81 462.67 T
(handler_t handler) 81 449.67 T
(,) 165.25 449.67 T
(/* index into destination endpoint\325) 187.5 449.67 T
(s handler table */) 347.85 449.67 T
(void *sour) 81 436.67 T
(ce_addr) 130.01 436.67 T
(,) 166.88 436.67 T
(int nbytes,) 81 423.67 T
(int a) 81 410.67 T
0 8.8 Q
(0,) 102.09 407.92 T
0 11 Q
(..., int arg) 108.69 410.67 T
0 8.8 Q
(M-1) 153.91 407.92 T
0 11 Q
(\051) 169.54 410.67 T
2 F
0.4 (AM_ReplyIM) 63 390.67 P
1 F
0.4 (returns control to the calling thread of computation after sending) 125.41 390.67 P
2 F
0.4 (nbytes) 416.63 390.67 P
1 F
0.4 ( of contiguous data and) 444.73 390.67 P
-0.1 (then the associated reply message to the requesting endpoint responsible for the particular invocation of the re-) 63 377.67 P
0.72 (quest handler) 63 364.67 P
0.72 (. The active message is logically delivered after the data transfer \336nishes. Upon receipt, the re-) 122.08 364.67 P
0.76 (quester invokes the handler function with a pointer to storage containing the transferred data, the number of) 63 351.67 P
0.46 (data bytes transferred, and the) 63 338.67 P
8 F
0.46 (M) 200.31 338.67 P
1 F
0.46 ( integer ar) 210.09 338.67 P
0.46 (guments. The dynamic scope of the storage is the same as the dy-) 255.4 338.67 P
-0.23 (namic scope of the handler) 63 325.67 P
-0.23 (. The data should be copied if it is needed beyond this scope.) 180.01 325.67 P
2 F
-0.23 (nbytes) 447.45 325.67 P
1 F
-0.23 ( must be no lar) 475.56 325.67 P
-0.23 (g-) 539.84 325.67 P
1.04 (er than the value returned by) 63 312.67 P
2 F
1.04 (AM_MaxMedium.) 198.13 312.67 P
1 F
1.04 (The reply handler) 281.65 312.67 P
1.04 (\325) 362.33 312.67 P
1.04 (s prototype is:) 365.38 312.67 P
2 F
1.04 (void handler\050void *token,) 433.58 312.67 P
(void *buf, int nbytes,) 63 299.67 T
(int ar) 157.72 299.67 T
(g) 181.46 299.67 T
2 8.8 Q
(0,) 186.96 296.92 T
2 11 Q
(..., int ar) 193.56 299.67 T
(g) 231.05 299.67 T
2 8.8 Q
(M-1) 236.55 296.92 T
2 11 Q
(\051) 251.21 299.67 T
1 F
(.) 254.87 299.67 T
0 10 Q
(A.10  Function: AM_ReplyXferM) 63 275.33 T
0 11 Q
(int rval = AM_ReplyXferM\050) 63 249.67 T
(void *token,) 81 236.67 T
(int dest_offset,) 81 223.67 T
(handler_t handler) 81 210.67 T
(,) 165.25 210.67 T
(/* index into destination endpoint\325) 187.5 210.67 T
(s handler table */) 347.85 210.67 T
(void *sour) 81 197.67 T
(ce_addr) 130.01 197.67 T
(,) 166.88 197.67 T
(int nbytes,) 81 184.67 T
(int a) 81 171.67 T
0 8.8 Q
(0,) 102.09 168.92 T
0 11 Q
(..., int arg) 108.69 171.67 T
0 8.8 Q
(M-1) 153.91 168.92 T
0 11 Q
(\051) 169.54 171.67 T
2 F
0.67 (AM_ReplyXferM) 63 151.67 P
1 F
0.67 (returns control to the calling thread of computation after sending) 140.96 151.67 P
2 F
0.67 (nbytes) 434.86 151.67 P
1 F
0.67 ( of contiguous data) 462.96 151.67 P
0.73 (and then the associated reply message to the requesting endpoint responsible for the particular invocation of) 63 138.67 P
1.75 (the request handler) 63 125.67 P
1.75 (. The data transfer is of) 149.6 125.67 P
1.75 (fset into the destination endpoint\325) 260.2 125.67 P
1.75 (s virtual-memory segment by) 414.5 125.67 P
2 F
-0.27 (dest_offset) 63 112.67 P
1 F
-0.27 ( bytes. The active message is logically delivered after the bulk transfer \336nishes. Upon receipt, the re-) 110.06 112.67 P
0.42 (quester invokes the handler function with a pointer into the endpoint virtual-memory segment, the number of) 63 99.67 P
0.5 (data bytes transferred, and the) 63 86.67 P
2 F
0.5 (M) 200.53 86.67 P
1 F
0.5 ( integer ar) 209.69 86.67 P
0.5 (guments. The value of) 255.09 86.67 P
2 F
0.5 (nbytes) 358.22 86.67 P
1 F
0.5 ( must be no lar) 386.33 86.67 P
0.5 (ger than the value re-) 453.52 86.67 P
FMENDPAGE
%%EndPage: "38" 43
%%Page: "39" 44
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
531.63 729 63 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(39) 63 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Active Message API) 263.48 741.53 T
549 729 63 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
1 11 Q
0 X
0.21 (turned by) 63 712.67 P
2 F
0.21 (AM_MaxLong.) 108.03 712.67 P
1 F
0.21 (The reply handler) 177.29 712.67 P
0.21 (\325) 256.31 712.67 P
0.21 (s prototype is:) 259.37 712.67 P
2 F
0.21 (void handler\050void *token, void *buf, int nbytes, int) 325.09 712.67 P
(ar) 63 699.67 T
(g) 72.37 699.67 T
2 8.8 Q
(0,) 77.87 696.92 T
2 11 Q
(..., int ar) 84.47 699.67 T
(g) 121.96 699.67 T
2 8.8 Q
(M-1) 127.46 696.92 T
2 11 Q
(\051) 142.12 699.67 T
1 F
(.) 145.78 699.67 T
0 10 Q
(A.1) 63 675.33 T
(1  Function: AM_GetXferM) 77.17 675.33 T
0 11 Q
(int rval = AM_GetXferM\050) 63 649.67 T
(ep_t r) 81 636.67 T
(equest_endpoint,) 108.6 636.67 T
(/* endpoint issuing get */) 188.36 636.67 T
(int r) 81 623.67 T
(eply_endpoint,) 101.27 623.67 T
(/* endpoint sending data */) 187.5 623.67 T
(int sour) 81 610.67 T
(ce_offset,) 117.17 610.67 T
(/* offset into r) 187.5 610.67 T
(emote seg */) 252.98 610.67 T
(handler_t handler) 81 597.67 T
(,) 165.25 597.67 T
(/* index into destination endpoint\325) 187.5 597.67 T
(s handler table */) 347.85 597.67 T
(int dest_offset,) 81 584.67 T
(int nbytes,) 81 571.67 T
(int a) 81 558.67 T
0 8.8 Q
(0,) 102.09 555.92 T
0 11 Q
(..., int arg) 108.69 558.67 T
0 8.8 Q
(M-1) 153.91 555.92 T
0 11 Q
(\051) 169.54 558.67 T
2 F
0.86 (AM_GetXferM) 63 538.67 P
1 F
0.86 ( attempts to post the operation with the communication system. If the communication system) 128.37 538.67 P
-0.19 (accepts the message for transmission, the function returns immediately with a status value of AM_OK and oth-) 63 525.67 P
1.38 (erwise with status value of AM_ERR_XXX. If not accepted the caller must retry) 63 512.67 P
1.38 (.) 434.74 512.67 P
2 F
1.38 (AM_GetXferM) 441.62 512.67 P
1 F
1.38 (retrieves) 511.13 512.67 P
2 F
-0.09 (nbytes) 63 499.67 P
1 F
-0.09 ( of contiguous data from the replying endpoint\325) 91.11 499.67 P
-0.09 (s memory segment of) 298.51 499.67 P
-0.09 (fset by) 393.05 499.67 P
2 F
-0.09 (sour) 425.25 499.67 P
-0.09 (ce_offset) 444.4 499.67 P
1 F
-0.09 (. The returning) 483.51 499.67 P
0.44 (data is written into the caller) 63 486.67 P
0.44 (\325) 191.18 486.67 P
0.44 (s memory segment of) 194.23 486.67 P
0.44 (fset by) 290.37 486.67 P
2 F
0.44 (dest_offset.) 323.64 486.67 P
1 F
0.44 (The active message handler is invoked) 376.64 486.67 P
-0.26 (after the bulk transfer \336nishes with a pointer to the data, the number of data bytes transferred, and the) 63 473.67 P
2 F
-0.26 (M) 506.8 473.67 P
1 F
-0.26 ( integer) 515.96 473.67 P
0.2 (ar) 63 460.67 P
0.2 (guments.) 71.35 460.67 P
2 F
0.2 (nbytes) 114.33 460.67 P
1 F
0.2 ( must be no lar) 142.44 460.67 P
0.2 (ger than the value returned by) 208.45 460.67 P
2 F
0.2 (AM_MaxLong.) 344.09 460.67 P
1 F
0.2 (The get handler) 413.34 460.67 P
0.2 (\325) 483.19 460.67 P
0.2 (s prototype is:) 486.25 460.67 P
2 F
(void handler\050void *token, void *buf, int nbytes, int ar) 63 447.67 T
(g) 297.55 447.67 T
2 8.8 Q
(0,) 303.05 444.92 T
2 11 Q
(..., int ar) 309.65 447.67 T
(g) 347.14 447.67 T
2 8.8 Q
(M-1) 352.64 444.92 T
2 11 Q
(\051) 367.3 447.67 T
1 F
(.) 370.96 447.67 T
0.57 (This operation should be thought of as a primitive composition of a) 63 427.67 P
2 F
0.57 (r) 369.26 427.67 P
0.57 (equest) 373.13 427.67 P
1 F
0.57 ( and a) 401.24 427.67 P
2 F
0.57 (r) 431.96 427.67 P
0.57 (eply_xfer) 435.83 427.67 P
0.57 (.) 475.54 427.67 P
1 F
0.57 ( It has the same) 478.29 427.67 P
0.09 (calling restrictions as a request. The handler executes on the) 63 414.67 P
2 F
0.09 (r) 331.23 414.67 P
0.09 (equesting) 335.1 414.67 P
1 F
0.09 (node, there is no explicit event associ-) 380.11 414.67 P
0.16 (ated with the operation on the) 63 401.67 P
2 F
0.16 (r) 197.79 401.67 P
0.16 (eplying) 201.66 401.67 P
1 F
0.16 ( node, and the handler has the semantics of a reply handler) 234.04 401.67 P
0.16 (. It is the ap-) 493.05 401.67 P
1.95 (plication\325) 63 388.67 P
1.95 (s responsibility to manage the source and destination storage and to not modify either until the) 104.56 388.67 P
(operation completes.) 63 375.67 T
0 10 Q
(A.12  Function: AM_Poll) 63 351.33 T
0 11 Q
(int rval = AM_Poll\050eb_t bundle\051) 63 325.67 T
2 F
0.69 (AM_Poll) 63 305.67 P
1 F
0.69 (services incoming active messages from all endpoints in the speci\336ed bundle. The function returns) 106.16 305.67 P
1.57 (after receiving an implementation-speci\336c number of messages. This prevents a calling thread from being) 63 292.67 P
0.5 (pinned by a long stream of incoming messages. A correctly written program cannot distinguish this behavior) 63 279.67 P
(from a gap in the stream of arriving messages.) 63 266.67 T
0 10 Q
(A.13  Function: AM_MaxShort) 63 242.33 T
0 11 Q
(int rval = AM_MaxShort\050\051) 63 216.67 T
2 F
-0.01 (AM_MaxShort) 63 196.67 P
1 F
-0.01 (returns the maximum number of integer handler ar) 130.51 196.67 P
-0.01 (guments,) 352.95 196.67 P
2 F
-0.01 (i.e.) 395.72 196.67 P
0 F
-0.01 (M) 411.9 196.67 P
1 F
-0.01 (, that can be passed using re-) 422.28 196.67 P
(quest or reply operations. This value is guaranteed to be at least eight \050words\051.) 63 183.67 T
0 10 Q
(A.14  Function: AM_MaxMedium) 63 159.33 T
0 11 Q
(int rval = AM_MaxMedium\050\051) 63 133.67 T
2 F
0.52 (AM_MaxMedium) 63 113.67 P
1 F
0.52 (returns the maximum transmission unit for medium active messages in bytes. This value is) 143.24 113.67 P
(guaranteed to be at least 512 bytes across all implementations.) 63 100.67 T
FMENDPAGE
%%EndPage: "39" 44
%%Page: "40" 45
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
80.36 729 549 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(40) 536.77 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Endpoint and Bundle API) 252 741.53 T
63 729 549 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
0 10 Q
0 X
(A.15  Function: AM_MaxLong) 63 713.33 T
0 11 Q
(int rval = AM_MaxLong\050\051) 63 687.67 T
2 F
-0.01 (AM_MaxLong) 63 667.67 P
1 F
-0.01 (returns the maximum transmission unit for active xfer and get operations in bytes. This value is) 129.29 667.67 P
(guaranteed to be at least 8192 bytes across all implementations.) 63 654.67 T
63 618.17 549 623 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
4 12 Q
0 X
0 0 0 1 0 0 0 K
(Appendix B  Endpoint and Bundle API) 63 627 T
1 11 Q
0.14 (This sections de\336nes the interface to the endpoint and bundle management functions. All endpoint and bundle) 63 597.83 P
-0.09 (operations are atomic with respect to communications with dependencies on the relevant endpoints or bundles.) 63 584.83 P
0.25 (Some examples of such operations are adding endpoints, moving endpoints, deleting endpoints, and changing) 63 571.83 P
(endpoint parameters.) 63 558.83 T
0 10 Q
(B.1  Function: AM_AllocateBundle) 63 534.5 T
0 11 Q
(int rval = AM_AllocateBundle\050int type, eb_t *endb, en_t *endpoint_name\051) 63 508.83 T
2 F
0.12 (AM_AllocateBundle) 63 488.83 P
1 F
0.12 ( creates an endpoint bundle of speci\336ed type. The) 152.21 488.83 P
2 F
0.12 (type) 374.43 488.83 P
1 F
0.12 ( is either) 392.75 488.83 P
1 9 Q
0.09 (AM_SEQ) 433.73 488.83 P
1 11 Q
0.12 (or) 472.08 488.83 P
1 9 Q
0.09 ( AM_P) 481.24 488.83 P
0.09 (AR) 506.76 488.83 P
1 11 Q
0.12 ( where) 519.26 488.83 P
1 9 Q
0.49 (AM_SEQ) 63 475.83 P
1 11 Q
0.6 ( indicates that the application) 99 475.83 P
2 F
0.6 (pr) 233.66 475.83 P
0.6 (omises) 243.04 475.83 P
1 F
0.6 ( that at most one of its threads of computation will access the) 272.98 475.83 P
0.22 (bundle at any time and) 63 462.83 P
1 9 Q
0.18 (AM_P) 167.08 462.83 P
0.18 (AR) 190.25 462.83 P
1 11 Q
0.22 ( indicates that application) 202.75 462.83 P
2 F
0.22 (intends) 319.14 462.83 P
1 F
0.22 (to have multiple application threads concur-) 353.89 462.83 P
1.28 (rently accessing the bundle. If successful) 63 449.83 P
2 F
1.28 (endb) 253.67 449.83 P
1 F
1.28 ( contains the address of the new bundle and) 275.05 449.83 P
2 F
1.28 (endpoint_name) 481.17 449.83 P
1 F
2.57 (points to a globally-unique endpoint name. The function returns) 63 436.83 P
1 9 Q
2.1 (AM_OK) 370.25 436.83 P
1 11 Q
2.57 ( if the bundle was created and) 402.24 436.83 P
1 9 Q
(AM_ERR_XXX) 63 423.83 T
1 11 Q
(otherwise.) 125.75 423.83 T
0 10 Q
(B.2  Function: AM_AllocateEndpoint) 63 399.5 T
0 11 Q
(int rval = AM_AllocateEndpoint\050eb_t bundle, ep_t *endp\051) 63 373.83 T
2 F
-0.17 (AM_AllocateEndpoint) 63 353.83 P
1 F
-0.17 ( creates a communication endpoint in the) 161.38 353.83 P
2 F
-0.17 (bundle) 343.81 353.83 P
1 F
-0.17 (. If successful) 373.75 353.83 P
2 F
-0.17 (endp) 436.78 353.83 P
1 F
-0.17 ( contains the address) 458.16 353.83 P
0.61 (of the new endpoint. The function returns) 63 340.83 P
1 9 Q
0.5 (AM_OK) 253.03 340.83 P
1 11 Q
0.61 ( if the endpoint was added to the bundle and) 285.02 340.83 P
1 9 Q
0.5 (AM_ERR_XXX) 488.5 340.83 P
1 11 Q
(otherwise.) 63 327.83 T
0 10 Q
(B.3  Function: AM_Map) 63 303.5 T
0 11 Q
(int rval = AM_Map\050ep_t ea, int index,) 63 277.83 T
(en_t endpoint, tag_t tag\051) 244.35 277.83 T
2 F
0.47 (AM_Map) 63 257.83 P
1 F
0.47 ( establishes a translation-table entry mapping such that relative to) 104.55 257.83 P
2 F
0.47 (ea) 400.12 257.83 P
1 F
0.47 ( the) 410.5 257.83 P
2 F
0.47 (index) 430.39 257.83 P
1 F
0.47 ( is bound to) 454.22 257.83 P
2 F
0.47 (endpoint) 510.5 257.83 P
1 F
-0.01 (and) 63 244.83 P
2 F
-0.01 (tag.) 81.63 244.83 P
1 F
-0.01 ( The) 98.44 244.83 P
2 F
-0.01 (index) 121.03 244.83 P
1 F
-0.01 ( must be less than the value returned by) 144.85 244.83 P
2 F
-0.01 (AM_MaxNumT) 321.69 244.83 P
-0.01 (ranslation) 388.91 244.83 P
1 F
-0.01 (. An endpoint may map to) 434.14 244.83 P
1.23 (itself for loop back behavior) 63 231.83 P
1.23 (. It is an error to re-map an active translation-table entry) 191.94 231.83 P
1.23 (. The function returns) 450.01 231.83 P
1 9 Q
(AM_OK) 63 218.83 T
1 11 Q
( if the mapping was successfully established and) 95 218.83 T
1 9 Q
(AM_ERR_XXX) 311.3 218.83 T
1 11 Q
( otherwise.) 371.8 218.83 T
0 10 Q
(B.4  Function: AM_MapAny) 63 194.5 T
0 11 Q
(int rval = AM_MapAny\050ep_t ea, int *index,) 63 168.83 T
(en_t endpoint, tag_t tag\051) 269.4 168.83 T
2 F
-0.24 (AM_MapAny) 63 148.83 P
1 F
-0.24 ( establishes a translation-table entry mapping where that the system picks a translation-table entry) 121.65 148.83 P
0.17 (such that relative to) 63 135.83 P
2 F
0.17 (ea) 152.9 135.83 P
1 F
0.17 ( the) 163.28 135.83 P
2 F
0.17 (index) 182.56 135.83 P
1 F
0.17 ( is bound to) 206.39 135.83 P
2 F
0.17 (endpoint) 261.47 135.83 P
1 F
0.17 (and) 302.89 135.83 P
2 F
0.17 (tag.) 321.7 135.83 P
1 F
0.17 ( The chosen index is returned in) 338.5 135.83 P
2 F
0.17 (index) 483.59 135.83 P
1 F
0.17 (. An end-) 507.42 135.83 P
-0.06 (point may map itself for loop back behavior) 63 122.83 P
-0.06 (. It is an error to re-map an active translation-table entry) 255.36 122.83 P
-0.06 (. The func-) 500.56 122.83 P
(tion returns) 63 109.83 T
1 9 Q
(AM_OK) 116.16 109.83 T
1 11 Q
( if the mapping was successfully established and) 148.16 109.83 T
1 9 Q
(AM_ERR_XXX) 364.46 109.83 T
1 11 Q
( otherwise.) 424.96 109.83 T
FMENDPAGE
%%EndPage: "40" 45
%%Page: "41" 46
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
531.63 729 63 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(41) 63 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Endpoint and Bundle API) 252 741.53 T
549 729 63 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
0 10 Q
0 X
(B.5  Function: AM_Unmap) 63 713.33 T
0 11 Q
(int rval = AM_Unmap\050ep_t ea, int index\051) 63 687.67 T
2 F
0.47 (AM_Unmap) 63 667.67 P
1 F
0.47 ( removes a previous translation-table entry mapping. The function returns) 116.77 667.67 P
1 9 Q
0.39 (AM_OK) 448.68 667.67 P
1 11 Q
0.47 ( if the mapping) 480.67 667.67 P
(was successfully removed and) 63 654.67 T
1 9 Q
(AM_ERR_XXX) 199.25 654.67 T
1 11 Q
( otherwise.) 259.74 654.67 T
0 10 Q
(B.6  Function: AM_Fr) 63 630.33 T
(eeEndpoint) 158.37 630.33 T
0 11 Q
(int rval AM_Fr) 63 604.67 T
(eeEndpoint\050ep_t ea\051) 135.51 604.67 T
2 F
0.59 (AM_Fr) 63 584.67 P
0.59 (eeEndpoint) 94.98 584.67 P
1 F
0.59 ( atomically deallocates the endpoint. The calling process must have previously created the) 145.08 584.67 P
-0.06 (endpoint. Messages en route to the endpoint may or may not be delivered and/or handled depending on wheth-) 63 571.67 P
-0.14 (er or not the endpoint exists when they arrive. The system returns all messages sent to nonexistent endpoints to) 63 558.67 P
-0.01 (their senders. The system destroys, without handling, all pending messages in the endpoint\325) 63 545.67 P
-0.01 (s receive pool. The) 465.32 545.67 P
(function returns) 63 532.67 T
1 9 Q
(AM_OK) 135.71 532.67 T
1 11 Q
( if the endpoint was successfully deallocated and) 167.71 532.67 T
1 9 Q
(AM_ERR_XXX) 385.22 532.67 T
1 11 Q
( otherwise.) 445.72 532.67 T
0 10 Q
(B.7  Function: AM_Fr) 63 508.33 T
(eeBundle) 158.37 508.33 T
0 11 Q
(int rval = AM_Fr) 63 482.67 T
(eeBundle\050eb_t bundle\051) 144.53 482.67 T
2 F
3.04 (AM_Fr) 63 462.67 P
3.04 (eeBundle) 94.98 462.67 P
1 F
3.04 ( deallocates the endpoint) 135.91 462.67 P
2 F
3.04 (bundle) 259.87 462.67 P
1 F
3.04 (. Any endpoints in the bundle are \336rst removed as if) 289.81 462.67 P
2 F
0.52 (AM_Fr) 63 449.67 P
0.52 (eeEndpoint) 94.98 449.67 P
1 F
0.52 ( was called for each one. The function returns) 145.08 449.67 P
1 9 Q
0.43 (AM_OK) 353.81 449.67 P
1 11 Q
0.52 ( if the bundle was successfully freed) 385.81 449.67 P
(and) 63 436.67 T
1 9 Q
(AM_ERR_XXX) 81.63 436.67 T
1 11 Q
( otherwise.) 142.13 436.67 T
0 10 Q
(B.8  Function: AM_MoveEndpoint) 63 412.33 T
0 11 Q
(int rval = AM_MoveEndpoint\050ep_t ea,) 63 386.67 T
(eb_t fr) 245.88 386.67 T
(om_bundle,) 277.14 386.67 T
(eb_t to_bundle\051) 335.21 386.67 T
2 F
1.32 (AM_MoveEndpoint) 63 366.67 P
1 F
1.32 ( moves the endpoint) 149.15 366.67 P
2 F
1.32 (ea) 246.08 366.67 P
1 F
1.32 (from) 260.53 366.67 P
2 F
1.32 (fr) 285.98 366.67 P
1.32 (om_bundle) 292.91 366.67 P
1 F
1.32 (to) 345.86 366.67 P
2 F
1.32 (to_bundle) 358.49 366.67 P
1 F
1.32 (. This allows movement of end-) 402.49 366.67 P
4.47 (points between bundles. The function returns) 63 353.67 P
1 9 Q
3.65 (AM_OK) 291.13 353.67 P
1 11 Q
4.47 ( if the endpoint was successfully moved and) 323.12 353.67 P
1 9 Q
(AM_ERR_XXX) 63 340.67 T
1 11 Q
( otherwise.) 123.5 340.67 T
0 10 Q
(B.9  Function: AM_SetExpectedResour) 63 316.33 T
(ces) 231.14 316.33 T
0 11 Q
(int rval = AM_SetExpectedResour) 63 290.67 T
(ces\050ep_t ea,) 224.58 290.67 T
(int n_endpoints, int n_outstanding_r) 281.09 290.67 T
(equests\051) 452.65 290.67 T
2 F
0.25 (AM_SetExpectedResour) 63 270.67 P
0.25 (ces) 168.9 270.67 P
1 F
0.25 ( requests that the system reserve adequate endpoint communication resources such) 182.94 270.67 P
0.22 (that the endpoint can ef) 63 257.67 P
0.22 (\336ciently communicate) 166.93 257.67 P
2 F
0.22 (n_outstanding_r) 268.2 257.67 P
0.22 (equests) 340.52 257.67 P
1 F
0.22 (with up to) 375.88 257.67 P
2 F
0.22 (n_endpoints) 423.9 257.67 P
1 F
0.22 ( other endpoints) 477.68 257.67 P
0.04 (without any messages being returned due to persistent endpoint congestion. The function returns) 63 244.67 P
1 9 Q
0.03 (AM_OK) 491.26 244.67 P
1 11 Q
0.04 ( if the) 523.25 244.67 P
(system could make the reservation of endpoint resources and) 63 231.67 T
1 9 Q
(AM_ERR_XXX) 333.97 231.67 T
1 11 Q
( otherwise.) 394.47 231.67 T
0 10 Q
(B.10  Function: AM_SetT) 63 207.33 T
(ag) 172.08 207.33 T
0 11 Q
(int rval = AM_SetT) 63 181.67 T
(ag\050ep_t ea,) 154.11 181.67 T
(tag_t tag\051) 207.57 181.67 T
2 F
1.4 (AM_SetT) 63 161.67 P
1.4 (ag) 102.93 161.67 P
1 F
1.4 ( atomically sets the endpoint\325) 113.93 161.67 P
1.4 (s tag value to) 248.49 161.67 P
2 F
1.4 (tag) 315.22 161.67 P
1 F
1.4 (. After this function returns, messages with tags) 329.27 161.67 P
0.11 (matching the new tag will be delivered and all others will be returned to their senders. Before this function re-) 63 148.67 P
0.7 (turns, all pending messages in the endpoint\325) 63 135.67 P
0.7 (s receive pool are returned to their senders. The function returns) 260.02 135.67 P
1 9 Q
(AM_OK) 63 122.67 T
1 11 Q
( if the endpoint tag was successfully changed and) 95 122.67 T
1 9 Q
(AM_ERR_XXX) 315.26 122.67 T
1 11 Q
( otherwise.) 375.76 122.67 T
FMENDPAGE
%%EndPage: "41" 46
%%Page: "42" 47
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
80.36 729 549 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(42) 536.77 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Endpoint and Bundle API) 252 741.53 T
63 729 549 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
0 10 Q
0 X
(B.1) 63 713.33 T
(1  Function: AM_GetT) 76.62 713.33 T
(ag) 173.75 713.33 T
0 11 Q
(int rval = AM_GetT) 63 687.67 T
(ag\050ep_t ea,) 156.55 687.67 T
(tag_t *tag\051) 210.01 687.67 T
2 F
-0.05 (AM_GetT) 63 667.67 P
-0.05 (ag) 105.37 667.67 P
1 F
-0.05 ( retrieves the endpoint\325) 116.37 667.67 P
-0.05 (s tag value int) 217.35 667.67 P
2 F
-0.05 (tag) 281.32 667.67 P
1 F
-0.05 (. The function returns) 295.38 667.67 P
1 9 Q
-0.04 (AM_OK) 393.26 667.67 P
1 11 Q
-0.05 ( if the endpoint tag was suc-) 425.25 667.67 P
(cessfully retrieved and) 63 654.67 T
1 9 Q
(AM_ERR_XXX) 165.33 654.67 T
1 11 Q
( otherwise.) 225.83 654.67 T
0 10 Q
(B.12  Function: AM_GetT) 63 630.33 T
(ranslationName) 174.48 630.33 T
0 11 Q
(int rval = AM_GetT) 63 604.67 T
(ranslationName\050ep_t ea,) 156.75 604.67 T
(int i,) 274.38 604.67 T
(en_t *gan\051) 298.52 604.67 T
2 F
1.14 (AM_GetT) 63 584.67 P
1.14 (ranslationName) 105.78 584.67 P
1 F
1.14 ( retrieves the global-endpoint name associated with the) 176.67 584.67 P
2 F
1.14 (ith) 430.79 584.67 P
1 F
1.14 ( entry of the endpoint\325) 442.4 584.67 P
1.14 (s) 544.72 584.67 P
0.46 (translation table and stores it into) 63 571.67 P
2 F
0.46 (gan) 214.85 571.67 P
1 F
0.46 (. The function returns) 231.35 571.67 P
1 9 Q
0.38 (AM_OK) 331.25 571.67 P
1 11 Q
0.46 ( if the endpoint name was stored into) 363.24 571.67 P
2 F
0.46 (gan) 532.5 571.67 P
1 F
(and) 63 558.67 T
1 9 Q
(AM_ERR_XXX) 81.63 558.67 T
1 11 Q
( otherwise.) 142.13 558.67 T
0 10 Q
(B.13  Function: AM_GetT) 63 534.33 T
(ranslationT) 174.48 534.33 T
(ag) 223.57 534.33 T
0 11 Q
(int rval = AM_GetT) 63 508.67 T
(ranslationT) 156.75 508.67 T
(ag\050ep_t ea,) 210.75 508.67 T
(int i, tag_t *tag\051) 264.21 508.67 T
2 F
1 (AM_GetT) 63 488.67 P
1 (ranslationT) 105.78 488.67 P
1 (ag) 156.12 488.67 P
1 F
1 ( retrieves the tag associated with the) 167.12 488.67 P
2 F
1 (ith) 336.35 488.67 P
1 F
1 ( entry of the endpoint\325) 347.97 488.67 P
1 (s translation table and) 449.75 488.67 P
-0.12 (stores it into) 63 475.67 P
2 F
-0.12 (tag.) 119.79 475.67 P
1 F
-0.12 (The function returns) 139.23 475.67 P
1 9 Q
-0.1 (AM_OK) 231.43 475.67 P
1 11 Q
-0.12 ( if the tag was successfully stored into) 263.43 475.67 P
2 F
-0.12 (tag) 432.95 475.67 P
1 F
-0.12 ( and) 447.01 475.67 P
1 9 Q
-0.1 (AM_ERR_XXX) 468.15 475.67 P
1 11 Q
-0.12 ( oth-) 528.65 475.67 P
(erwise.) 63 462.67 T
0 10 Q
(B.14  Function: AM_GetT) 63 438.33 T
(ranslationInuse) 174.48 438.33 T
0 11 Q
(int rval = AM_GetT) 63 412.67 T
(ranslationInuse\050ep_t ea, int i\051) 156.75 412.67 T
2 F
0.75 (AM_GetT) 63 392.67 P
0.75 (ranslationInuse) 105.78 392.67 P
1 F
0.75 ( returns) 174.84 392.67 P
1 9 Q
0.62 (AM_OK) 212.39 392.67 P
1 11 Q
0.75 ( if an active translation is installed in the) 244.38 392.67 P
2 F
0.75 (ith) 432.33 392.67 P
1 F
0.75 ( entry of the endpoint\325) 443.95 392.67 P
0.75 (s) 544.72 392.67 P
(translation table, and) 63 379.67 T
1 9 Q
(AM_ERR_XXX) 157.71 379.67 T
1 11 Q
( otherwise.) 218.21 379.67 T
0 10 Q
(B.15  Function: AM_MaxNumT) 63 355.33 T
(ranslations) 199.48 355.33 T
0 11 Q
(int rval = AM_MaxNumT) 63 329.67 T
(ranslations\050int *ntrans\051) 184.25 329.67 T
2 F
0.99 (AM_MaxNumT) 63 309.67 P
0.99 (ranslations) 130.22 309.67 P
1 F
0.99 ( returns the maximum \050zero-based\051 translation-table index for all endpoints in the) 179.73 309.67 P
(system in) 63 296.67 T
2 F
(ntrans.) 107.62 296.67 T
1 F
( This value is at least 256 across all interface implementations.) 138.48 296.67 T
0 10 Q
(B.16  Function: AM_GetNumT) 63 272.33 T
(ranslations) 195.59 272.33 T
0 11 Q
(int rval = AM_GetNumT) 63 246.67 T
(ranslations\050ep_t ea, int *ntrans\051) 179.97 246.67 T
2 F
-0.01 (AM_GetNumT) 63 226.67 P
-0.01 (ranslations) 126.56 226.67 P
1 F
-0.01 ( returns the number of entries in the endpoint\325) 176.07 226.67 P
-0.01 (s translation table in) 377.64 226.67 P
2 F
-0.01 (ntrans) 469.27 226.67 P
1 F
-0.01 (. This value) 497.38 226.67 P
(is less than the value returned from) 63 213.67 T
2 F
(AM_MaxNumT) 220.33 213.67 T
(ranslations.) 287.55 213.67 T
0 10 Q
(B.17  Function: AM_SetNumT) 63 189.33 T
(ranslations) 193.37 189.33 T
0 11 Q
(int rval = AM_SetNumT) 63 163.67 T
(ranslations\050ep_t ea,) 177.53 163.67 T
(int ntrans\051) 271.95 163.67 T
2 F
0.95 (AM_SetNumT) 63 143.67 P
0.95 (ranslations) 124.12 143.67 P
1 F
0.95 ( sets the number of translation-table entries in the endpoint to) 173.63 143.67 P
2 F
0.95 (ntrans) 456.93 143.67 P
1 F
0.95 (. The value of) 485.05 143.67 P
2 F
-0.16 (ntrans) 63 130.67 P
1 F
-0.16 (should be at least 256 and less than the value returned from) 93.71 130.67 P
2 F
-0.16 (AM_MaxNumT) 355.77 130.67 P
-0.16 (ranslations.) 422.98 130.67 P
1 F
-0.16 (The function re-) 477.84 130.67 P
(turns) 63 117.67 T
1 9 Q
(AM_OK) 87.75 117.67 T
1 11 Q
( if the number of translation-table entries was successfully set to) 119.75 117.67 T
2 F
(n) 405.39 117.67 T
1 F
( and) 410.89 117.67 T
1 9 Q
(AM_ERR_XXX) 432.28 117.67 T
1 11 Q
( otherwise.) 492.77 117.67 T
FMENDPAGE
%%EndPage: "42" 47
%%Page: "43" 48
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
531.63 729 63 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(43) 63 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Endpoint and Bundle API) 252 741.53 T
549 729 63 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
0 10 Q
0 X
(B.18  Function: AM_GetSour) 63 713.33 T
(ceEndpoint) 188.93 713.33 T
0 11 Q
(int rval = AM_GetSour) 63 687.67 T
(ceEndpoint\050void *token,) 172.65 687.67 T
(en_t *gan\051) 290.3 687.67 T
1 F
7.02 (The communication system passes an opaque) 63 667.67 P
2 F
7.02 (token) 308 667.67 P
1 F
7.02 (pointer to each active message handler) 341.6 667.67 P
7.02 (.) 546.25 667.67 P
2 F
1.15 (AM_GetSour) 63 654.67 P
1.15 (ceEndpoint) 120.64 654.67 P
1 F
1.15 ( takes such pointers and returns the globally unique endpoint name of the endpoint) 170.74 654.67 P
0.79 (that sent the associated request message into) 63 641.67 P
2 F
0.79 (gan.) 266.77 641.67 P
1 F
0.79 ( The function returns) 286.02 641.67 P
1 9 Q
0.64 (AM_OK) 384.47 641.67 P
1 11 Q
0.79 ( if the) 416.46 641.67 P
2 F
0.79 (token) 447.23 641.67 P
1 F
0.79 ( was successfully) 471.06 641.67 P
(translated into a valid global-endpoint name and) 63 628.67 T
1 9 Q
(AM_ERR_XXX) 278.39 628.67 T
1 11 Q
( otherwise.) 338.89 628.67 T
0 10 Q
(B.19  Function: AM_GetDestEndpoint) 63 604.33 T
0 11 Q
(int rval = AM_GetDestEndpoint\050void *token,) 63 578.67 T
(ep_t *endp\051) 278.89 578.67 T
1 F
7.02 (The communication system passes an opaque) 63 558.67 P
2 F
7.02 (token) 308 558.67 P
1 F
7.02 (pointer to each active message handler) 341.6 558.67 P
7.02 (.) 546.25 558.67 P
2 F
-0.05 (AM_GetDestEndpoint) 63 545.67 P
1 F
-0.05 ( takes such tokens and returns the endpoint address of the local receiving endpoint endp) 160.77 545.67 P
2 F
-0.05 (.) 546.25 545.67 P
1 F
2.8 (The function returns) 63 532.67 P
1 9 Q
2.29 (AM_OK) 163.95 532.67 P
1 11 Q
2.8 ( if the) 195.95 532.67 P
2 F
2.8 (token) 232.75 532.67 P
1 F
2.8 ( was successfully translated into a local-endpoint address and) 256.57 532.67 P
1 9 Q
(AM_ERR_XXX) 63 519.67 T
1 11 Q
( otherwise.) 123.5 519.67 T
0 10 Q
(B.20  Function: AM_GetMsgT) 63 495.33 T
(ag) 192.63 495.33 T
0 11 Q
(int rval = AM_GetMsgT) 63 469.67 T
(ag\050void *token,) 176.72 469.67 T
(tag_t *tagp\051) 251.58 469.67 T
1 F
0.71 (The communication system passes an opaque) 63 449.67 P
2 F
0.71 (token) 270.11 449.67 P
1 F
0.71 (pointer to each active message handler) 297.39 449.67 P
0.71 (.) 470.48 449.67 P
2 F
0.71 (AM_GetMsgT) 476.69 449.67 P
0.71 (ag) 538 449.67 P
1 F
0.36 (takes such tokens and returns the corresponding message tag into) 63 436.67 P
2 F
0.36 (tagp.) 356.22 436.67 P
1 F
0.36 ( The function returns) 378.53 436.67 P
1 9 Q
0.29 (AM_OK) 475.29 436.67 P
1 11 Q
0.36 ( if the) 507.28 436.67 P
2 F
0.36 (to-) 536.78 436.67 P
(ken) 63 423.67 T
1 F
( was successfully translated into a local-endpoint address and) 78.27 423.67 T
1 9 Q
(AM_ERR_XXX) 351.08 423.67 T
1 11 Q
( otherwise.) 411.58 423.67 T
0 10 Q
(B.21  Function: AM_SetHandler) 63 399.33 T
0 11 Q
(int rval = AM_SetHandler\050ep_t ea,) 63 373.67 T
(handler_t handler) 229.36 373.67 T
(, void \050*function\051\050\051\051) 313.61 373.67 T
2 F
0.08 (AM_SetHandler) 63 353.67 P
1 F
0.08 ( sets the handler) 134.49 353.67 P
0.08 (-table entry) 205.68 353.67 P
2 F
0.08 (handler) 258.99 353.67 P
1 F
0.08 (for the endpoint) 296.03 353.67 P
2 F
0.08 (ea.) 369.28 353.67 P
1 F
0.08 (Once installed, incoming active mes-) 385.24 353.67 P
0.13 (sages naming) 63 340.67 P
2 F
0.13 (handler) 125.59 340.67 P
1 F
0.13 ( invoke the) 159.82 340.67 P
2 F
0.13 (function) 211.85 340.67 P
1 F
0.13 (. The function returns) 247.91 340.67 P
1 9 Q
0.11 (AM_OK) 346.51 340.67 P
1 11 Q
0.13 ( if the) 378.51 340.67 P
2 F
0.13 (handler) 407.32 340.67 P
1 F
0.13 (function was added and) 444.43 340.67 P
1 9 Q
(AM_ERR_XXX) 63 327.67 T
1 11 Q
( otherwise.) 123.5 327.67 T
0 10 Q
(B.22  Function: AM_SetHandlerAny) 63 303.33 T
0 11 Q
(int rval = AM_SetHandlerAny\050ep_t ea,) 63 277.67 T
(handler_t *handler) 248.92 277.67 T
(, void \050*function\051\050\051\051) 338.67 277.67 T
2 F
-0.03 (AM_SetHandlerAny) 63 257.67 P
1 F
-0.03 ( lets the system pick the handler) 151.59 257.67 P
-0.03 (-table entry for the speci\336ed handler function for the spec-) 292.35 257.67 P
0.76 (i\336ed endpoint) 63 244.67 P
2 F
0.76 (ea) 128.09 244.67 P
1 F
0.76 (, and returns the handler) 138.47 244.67 P
0.76 (-table index in the) 247.91 244.67 P
2 F
0.76 (handler) 333.46 244.67 P
1 F
0.76 (pointer) 371.19 244.67 P
2 F
0.76 (.) 401.13 244.67 P
1 F
0.76 ( Once installed, incoming active) 403.88 244.67 P
0.2 (messages naming) 63 231.67 P
2 F
0.2 (handler) 143.46 231.67 P
1 F
0.2 ( invoke the) 177.68 231.67 P
2 F
0.2 (function) 229.92 231.67 P
1 F
0.2 (. The function returns) 265.98 231.67 P
1 9 Q
0.17 (AM_OK) 364.86 231.67 P
1 11 Q
0.2 ( if the) 396.86 231.67 P
2 F
0.2 (handler) 425.88 231.67 P
1 F
0.2 (function was added) 463.06 231.67 P
(and) 63 218.67 T
1 9 Q
(AM_ERR_XXX) 81.63 218.67 T
1 11 Q
( otherwise.) 142.13 218.67 T
0 10 Q
(B.23  Function: AM_GetNumHandlers) 63 194.33 T
0 11 Q
(int rval = AM_GetNumHandlers\050ep_t ea, int *n_handlers\051) 63 168.67 T
2 F
(AM_GetNumHandlers) 63 148.67 T
1 F
( returns the number of handler) 161.99 148.67 T
(-table entries for the endpoint in) 295.27 148.67 T
2 F
(n_handlers) 439.46 148.67 T
1 F
(.) 488.96 148.67 T
0 10 Q
(B.24  Function: AM_SetNumHandlers) 63 124.33 T
0 11 Q
(int rval = AM_SetNumberHandlers\050ep_t ea,) 63 98.67 T
(int) 272.75 98.67 T
(n_handlers\051) 288.33 98.67 T
FMENDPAGE
%%EndPage: "43" 48
%%Page: "44" 49
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
80.36 729 549 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(44) 536.77 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Endpoint and Bundle API) 252 741.53 T
63 729 549 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
2 11 Q
0 X
0.4 (AM_SetNumHandlers) 63 712.67 P
1 F
0.4 ( sets the number of handler) 159.55 712.67 P
0.4 (-table entries for the endpoint to) 280.79 712.67 P
2 F
0.4 (n_handlers) 427.42 712.67 P
1 F
0.4 (. The number of) 476.92 712.67 P
0.3 (entries should be at least 256 and smaller than the value returned by) 63 699.67 P
2 F
0.3 (AM_MaxNumHandlers.) 368.46 699.67 P
1 F
0.3 (The function re-) 476.92 699.67 P
(turns) 63 686.67 T
1 9 Q
(AM_OK) 87.75 686.67 T
1 11 Q
( if the number of handler) 119.75 686.67 T
(-table entries was successfully changed and) 229.2 686.67 T
1 9 Q
(AM_ERR_XXX) 423.48 686.67 T
1 11 Q
( otherwise) 483.98 686.67 T
0 10 Q
(B.25  Function: AM_MaxNumHandlers) 63 662.33 T
0 11 Q
(int rval = AM_MaxNumHandlers\050\051) 63 636.67 T
2 F
-0.22 (AM_MaxNumHandlers) 63 616.67 P
1 F
-0.22 ( returns the maximum allowable number of handler) 165.65 616.67 P
-0.22 (-table entries for any endpoint in the) 390.25 616.67 P
(system. This value is at least 256 across all interface implementations.) 63 603.67 T
0 10 Q
(B.26  Function: AM_SetSeg) 63 579.33 T
0 11 Q
(int rval = AM_SetSeg\050ea_ t ea, void *addr) 63 553.67 T
(, int nbytes\051) 258.91 553.67 T
2 F
0.26 (AM_SetSeg) 63 533.67 P
1 F
0.26 ( sets the endpoint\325) 113.71 533.67 P
0.26 (s virtual-memory segment address to) 194.25 533.67 P
2 F
0.26 (base) 360.85 533.67 P
1 F
0.26 ( and its length to) 381.01 533.67 P
2 F
0.26 (nbytes.) 458.41 533.67 P
1 F
0.26 ( The base ad-) 489.26 533.67 P
0.53 (dress may have arbitrary alignment though implementations frequently optimize for the double-word aligned) 63 520.67 P
3.95 (\050or lar) 63 507.67 P
3.95 (ger\051 case. The segment length must be less than the or equal to the value returned by the) 93.93 507.67 P
2 F
0.84 (AM_MaxSegLength) 63 494.67 P
1 F
0.84 ( function. The function returns) 150.37 494.67 P
1 9 Q
0.69 (AM_OK) 292.06 494.67 P
1 11 Q
0.84 ( if the endpoint virtual-memory segment base and) 324.05 494.67 P
(length were set and) 63 481.67 T
1 9 Q
(AM_ERR_XXX) 150.98 481.67 T
1 11 Q
( otherwise.) 211.48 481.67 T
0 10 Q
(B.27  Function: AM_GetSeg) 63 457.33 T
0 11 Q
(int rval = AM_GetSeg\050ep_t ea, void *addr) 63 431.67 T
(, int *nbytes\051) 259.22 431.67 T
2 F
0.52 (AM_GetSegBase) 63 411.67 P
1 F
0.52 ( returns the base address of the endpoint\325) 137.54 411.67 P
0.52 (s virtual-memory segment in) 321.14 411.67 P
2 F
0.52 (addr) 452.79 411.67 P
1 F
0.52 ( and its length in) 473.57 411.67 P
(bytes in) 63 398.67 T
2 F
(nbytes.) 100.28 398.67 T
0 10 Q
(B.28  Function: AM_MaxSegLength) 63 374.33 T
0 11 Q
(int rval = AM_MaxSegLength\050int *nbtyes\051) 63 348.67 T
2 F
(AM_MaxSegLength) 63 328.67 T
1 F
( returns the maximum segment length in bytes supported by the system in) 150.37 328.67 T
2 F
(nbytes.) 477.61 328.67 T
0 10 Q
(B.29  Function: AM_GetEventMask) 63 304.33 T
0 11 Q
(int rval = AM_GetEventMask\050eb_t eb\051) 63 278.67 T
2 F
(AM_GetEventMask) 63 258.67 T
1 F
(returns the bundle\325) 151.89 258.67 T
(s event mask value.) 234.38 258.67 T
0 10 Q
(B.30  Function: AM_SetEventMask) 63 234.33 T
0 11 Q
(int rval = AM_SetEventMask\050eb_t eb, int mask\051) 63 208.67 T
2 F
(AM_SetEventMask) 63 188.67 T
1 F
(sets the bundle\325) 149.45 188.67 T
(s event mask value. It is closely related to the) 217.89 188.67 T
2 F
(AM_W) 420.45 188.67 T
(aitSema) 449.98 188.67 T
1 F
( function.) 485.42 188.67 T
-0.26 (This function is atomic in the following sense: if the event condition holds when the mask is being set to enable) 63 168.67 P
1.2 (the condition then the mask is set and the event is) 63 155.67 P
2 F
1.2 (generated.) 297.12 155.67 P
1 F
1.2 (Whenever an event is) 347.81 155.67 P
2 F
1.2 (generated,) 450.36 155.67 P
1 F
1.2 ( the system) 497.1 155.67 P
0.03 (atomically sets the bundle\325) 63 142.67 P
0.03 (s binary semaphore to one, and clears the corresponding event mask bit. If there are) 180.73 142.67 P
0.17 (any threads blocked on the semaphore, one is unblocked. For example, a thread may enable an event and wait) 63 129.67 P
4.37 (using) 63 116.67 P
2 F
4.37 (AM_W) 93.96 116.67 P
4.37 (aitSema) 123.49 116.67 P
1 F
4.37 ( until it occurs. Then is disables the event by calling) 158.94 116.67 P
2 F
4.37 (AM_SetEventMask) 438.62 116.67 P
1 F
4.37 ( with) 522.32 116.67 P
1 9 Q
(AM_NOEVENTS) 63 103.67 T
1 11 Q
(, does its work, and resets the mask before calling) 129.49 103.67 T
2 F
(AM_W) 351.29 103.67 T
(aitSema) 380.82 103.67 T
1 F
( again.) 416.26 103.67 T
(The interface de\336nes these masks and events:) 63 83.67 T
FMENDPAGE
%%EndPage: "44" 49
%%Page: "45" 50
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
531.63 729 63 729 2 L
7 X
0 0 0 1 0 0 0 K
V
0.25 H
0 Z
0 X
N
63 33.83 549 55.91 R
7 X
V
3 11 Q
0 X
(45) 63 48.57 T
63 732.33 549 747.53 R
7 X
V
4 9 Q
0 X
(Endpoint and Bundle API) 252 741.53 T
549 729 63 729 2 L
7 X
V
0 X
N
63 72 549 720 R
7 X
V
1 11 Q
0 X
(\245) 63 712.67 T
(AM_NOEVENTS) 72 712.67 T
(No endpoint-state transition generates an event.) 72 694.67 T
(\245) 63 677.67 T
(AM_NOTEMPTY) 72 677.67 T
(A nonempty receive pool or a receive pool that has a message delivered to it generates an event.) 72 659.67 T
0 10 Q
(B.31  Function: AM_W) 63 635.33 T
(aitSema) 162.45 635.33 T
0 11 Q
(int rval = AM_W) 63 609.67 T
(aitSema\050eb_t eb\051) 143.52 609.67 T
1 F
0.55 (AM_W) 63 589.67 P
0.55 (ait blocks the calling thread until the count in the bundle\325) 95.72 589.67 P
0.55 (s semaphore becomes equal to one and then) 352.38 589.67 P
2.67 (atomically decrements it. When an event occurs the system performs the matching operation, logically) 63 576.67 P
0.13 (AM_PostSvar) 63 563.67 P
0.13 (, which atomically increments the count in the bundle\325) 124.9 563.67 P
0.13 (s semaphore and clears the event mask so) 365.13 563.67 P
0.25 (as to disable subsequent generation of the same event. If there are any threads blocked on the semaphore, one) 63 550.67 P
(is unblocked.) 63 537.67 T
FMENDPAGE
%%EndPage: "45" 50
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 50
%%DocumentFonts: Times-Bold
%%+ Times-Roman
%%+ Times-Italic
%%+ Helvetica
%%+ Helvetica-Bold
%%+ Courier
%%+ Helvetica-Oblique
%%+ Helvetica-BoldOblique
%%+ Times-BoldItalic
%%EOF
